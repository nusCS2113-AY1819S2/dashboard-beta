[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T09-2/main[image:https://travis-ci.org/CS2113-AY1819S2-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasketch is an application that helps you to manage your daily time by managing your tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasketch is a CLI (Command Line Interface) application with GUI output so that you can have best of the both worlds."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasketch is a Java application that you can run on any machine with Java Runtime Environment installed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* What makes Tasketch special:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Daily Time Planner monitors your time planned for different task categories of a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Reminder reminds you of the important tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Command Suggestion suggests you the possible commands that you can enter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Auto Complete Command helps you to enter commands faster and easier."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This application is built on the sample application https://github.com/nusCS2113-AY1819S2/addressbook-level4[Address Book (Level 4)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://opencsv.sourceforge.net/[opencsv]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 13,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    compile group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00274.1\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    archiveName \u003d \u0027Tasketch.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //    runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //    runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            //test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            //test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            //test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u0027site-name\u0027: \u0027Tasketch\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S2-T09-2/main\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 18,
      "Zeyang-Li": 1,
      "-": 218
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch was developed by the C2113T-T09-2 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Cheah Zhi Kang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::cheahzk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/cheahzk[github]] [\u003c\u003ccheahzk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Responsibilities: Deliverables and deadlines +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Zhang Jingchen"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::jingchen-z.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "{empty}[https://github.com/jingchen-z[github]] [\u003c\u003cjingchen-z#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Responsibilities: Design UI and the format of Data Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Jin Shibo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::brittonalone.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[http://github.com/BrittonAlone[github]] [\u003c\u003cBrittonAlone#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Data + Documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Wan Chunwei"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "image::wanchunwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/Wanchunwei[github]] [\u003c\u003cWanchunwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Code quality + Integration"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Li Zeyang"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "image::zeyang-li.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "{empty}[https://github.com/Zeyang-Li[github]] [\u003c\u003cZeyang-Li#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Responsibilities: Scheduling and tracking + Testing"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "cheahzk": 9,
      "jingchen-z": 3,
      "Zeyang-Li": 10,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2113-ay1819s2-t09-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Contributing* : We do not suggest making pull requests from students not enrolled in this module \u003d(."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Email us* : You can also reach us at `https://github.com/cs2113-ay1819s2-t09-2`"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 3,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "By: `T09-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d What is Tasketch"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Tasketch is for those who need to manage their time by allocating time for each daily task. More importantly, Tasketch is optimized for those who prefer to use a desktop app and work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This developer guide is introducing the development structure of Tasketch and provide a better understanding of how this project works. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  `Logic` uses the `TaskBookParser` class to parse the user command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* stores the Task Book data."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Task Book`, which `Task` can reference. This would allow `Task Book` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* can save the Task Book data in json format and read it back."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Versioned Tasketch feature"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTaskBook`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "It extends `TaskBook` with an undo/redo history, stored internally as an `taskBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#commit()` -- Saves the current task book state in its history."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#undo()` -- Restores the previous task book state from its history."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `VersionedTaskBook#redo()` -- Restores a previously undone task book state from its history."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTaskBook()`, `Model#undoTaskBook()` and `Model#redoTaskBook()` respectively."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTaskBook` will be initialized with the initial task book state, and the `currentStatePointer` pointing to that single task book state."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the task book. The `delete` command calls `Model#commitTaskBook()`, causing the modified state of the task book after the `delete 5` command executes to be saved in the `taskBookStateList`, and the `currentStatePointer` is shifted to the newly inserted task book state."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Step 3. The user executes `add n/Do CS2113 ...` to add a new task. The `add` command also calls `Model#commitTaskBook()`, causing another modified task book state to be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTaskBook()`, so the task book state will not be saved into the `taskBookStateList`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTaskBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::suggestiom[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Suggestion feature"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The suggestion mechanism is facilitated by \u0027Suggestion\u0027."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::suggestion[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::reminder[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::month/timeline[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Month/Timeline feature"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::month/timeline[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::timeplanner[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Timeplanner feature"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::timeplanned[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// tag::import/export[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Import/Export feature"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "// end::import/export[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* NUS students who need to manage time due to multiple CCAs, tasks, assignments and datelines"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Manage all the tasks and assignments by giving each of them a time period."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"18%,\u003c20%,\u003c35%,\u003c50%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | add task | manage multiple tasks"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | delete task | get rid of a task that no longer want to do"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | edit task | change the all the information of the task"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|`* * *` | user | clear tasks | remove all the completed tasks of a day or a month or all the finished tasks"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | find tasks | check the full information of the task when forgetting the task description"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | list tasks | know what task is on that day"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | record total time spent on each classified task type | see how much time they spend on a specific"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "task type each day"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | show summary of time planned on a day | plan future tasks more effectively"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* * *` | user | undo/redo a command | remove/redo a command that I entered/removed by mistake"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | know today\u0027s date | sure of today\u0027s date"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | add priority of the task | set the importance of an task"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | view priority of all events | see all the events based on the priority"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | list tasks of certain priority of this week | know what must be done in this week"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | classify a task | separate different tasks"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | search tasks by classification | see different tasks based on the classification"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | write reflection | write their daily reflection"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`* *` | user | have alarm | remind myself of the coming events"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | change the color for the calendar | choose different version of different color of calendar"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | play music | be entertained when working on the desk"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|`*` | user | find out weather condition for current location | plan the next action, like to bring umbrella or not"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d User cases"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "(For all use cases below, the *System* is the `ProjectManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Add a task"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "1.  User requests to create a task"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* 1a. User submits the following information. Task Name || Start date || Start time || End date || End time ||"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Description || Task category || Tag"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "2.  TaskBook add that task into the task list"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* 1a1 Missing information"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** 1a1a TaskBook displays error message"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request edit -taskID [id] -s [startDateTime] -e [endDateTime] -t [topic] -d [description]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook lists the details of a task and user can edit the description of the task."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\tUse case ends"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Find a task"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request find [keyWords/subString]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook will list all the tasks which satisfy the searching condition."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\tUse case ends."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Delete a task"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request delete [task] [keywords]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook list all the task satisfy that keywords condition"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook remove that task."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\tUse case ends"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Clear tasks by time period"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear all"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes all the tasks in Tasketch."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Extension"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear [Date]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes the tasks which start from that day."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". User request clear [Month]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ". TaskBook removes the tasks which start from that month."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d List tasks by time period"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list of all tasks"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook shows a list of tasks of the current day by default."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Extension"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list all"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of all the tasks."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list [Date]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of tasks of that specific date."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request list [Month]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ".. TaskBook shows a list of tasks of that month"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ". User request for a reminder."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ".. TaskBook shows a list of tasks which have nearest start time or deadline."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Extension"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ". User request for a reminder of certain category of tasks."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ".. TaskBook shows a list of tasks with the specified category which have nearest start time or deadline."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ". User requests help"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ". TaskBook shows a list of commands with the examples of their usage"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "\u003d\u003d\u003d Exit"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". User request for exiting the program"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". TaskBook saves all the changes and exits."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Non-functional requirements"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Should work on any mainstream OS as long as it has Java 9 (revision"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "1.8.0_201 or higher) installed."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Should be able to hold up to 1000 tasks without a noticeable sluggishness"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "in performance for typical usage."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "code, not system admin commands) should be able to accomplish most of"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ". Mainstream OS: Windows, Linux, Unix, OS-X"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 39,
      "cheahzk": 86,
      "jingchen-z": 7,
      "BrittonAlone": 5,
      "Zeyang-Li": 35,
      "-": 366
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Tasketch - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "By: `T09-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch is an application that helps you to manage your everyday time by giving you an overview of all the time planned"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "for all the tasks in a daily manner. It also helps you to be aware of all the tasks dateline too. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This application is designed for the busy NUS students who have many tasks, assignments and datelines everyday. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch uses minimal (GUI) elements, instead opting for a faster Command Line Interface (CLI) while maintaining the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "benefits of the GUI. So, if you are used to the command line, Tasketch is sure to help manage your time effectively. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This user guide will introduce the features of Tasketch and show you how to use all the command lines. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d How to use this guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "There are several terms which we use throughout the guide. To make your understanding clearer, you can read the following"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "section to ensure that you are able to use this user guide to the fullest."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* Some commands have an alias, which you can also use to execute the command e.g. to add a task to Tasketch, you can"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "type either `add` or `a`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/TASK`, `TASK` is a parameter which can be used as `add n/Do MA1101R tutorial`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `sd/START_DATE ed/END_DATE`, `ed/END_DATE sd/START_DATE` is also acceptable."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The format for dates is `dd-mm-yy`. For example: `25-03-19` means March 25th, 2019."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* The format for times is `hh.mm` and it is using 24-hour clock. For example: `13.00` means 1 o\u0027clock in the afternoon."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[[category]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* There are only 5 valid categories for each task: +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** a - Academic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** e - Entertainment"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** c - Co-Curicullar Activity (CCA)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** r - Errands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** o - Others"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Any inputs other than the above will be invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** The time duration displayed for each category is in hours and minutes unit. (e.g. 1.0 for 1 hour, 1.15 for 1 hour 15 minutes)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "****"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  Download the latest `tasketch.jar` link:{repoURL}/releases[here]*(the link needs to be changed)*."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Tasketch."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ".  Some examples you can try:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *`list`* : lists all the tasks you have added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **`add`**`n/Do CS2113 sd/17-03-19 sd/10.00 ed/17-03-19 et/12.00 d/Do User Guide` : adds a new task to Tasketch."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* **`delete`**`3` : deletes the task with index 3 in Tasketch."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Daily Time Planner"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This feature will help you to monitor the time planned for different tasks in a day. By looking at the time spent on"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "different tasks, it aims to help you to plan your time better so that you will not spend most time on specific type"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`/`a`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To get started, you will need to add a task into Tasketch. The format is as below. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "When you are adding a task, the app will ensure that there will be no duplicate names added. This is to ensure that"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is no confusion in the task names."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adding a task with the same start date and end date means that it is a daily task, will be monitored by the Daily Time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Planner. Different dates means it is a long period task, thus will not be considered as daily task but can still be added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The app will not able to verify the correctness for the number of days in different months, so you have to ensure that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the date exists in that particular month. However, the app will able to differentiate the maximum number of days and months."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This means that you will never be able to enter more than 31 days and more than 12 months in the start date and end date. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Should you enter different start date and end date, the app will ensure that your end date is after the start date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As for start time and end time, the app is smart enough to inform you when you have entered invalid time, such as 24.00,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as this is incorrect. You will not able to enter hours beyond 23 and minutes beyond 59. The app will also ensure"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that the end time is after start time too. This to ensure the time spent/duration calculation (end time - start time)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "will result correct values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You will also need to specify the type of category of the task that you are adding for the Daily Time Planner to monitor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "your time effectively."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If any of the above is violated, the app will alert you that it is an invalid command with the corrected format shown to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "you."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* There are only 5 valid categories. (The details about it can be found in \u003c\u003ccategory\u003e\u003e.)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION c/CATEGORIES [t/TAG]...`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Adds a task named CS2113 task in the app. It starts at 12:00 on March 13rd, 2019 and it ends at 14:00 on the same day. The description for this task is to talk about version control."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/MA1101R tutorial sd/14-03-19 st/12.00 ed/14-03-19 et/14.00 d/Tutorial 8 c/a` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Adds a task named MA1101R tutorial. It starts at 12:00 on March 14th, 2019 and ends at 14:00 on the same day. Its description is tutorial and it category is academic."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS3235 lecture sd/13-03-19 st/08.00 ed/13-03-19 et/10.00 d/Talk about network security t/important` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Adds a task named CS3235 lecture. It starts at 8:00 in March 3rd, 2019 and ends at 10:00. Its description is to talk about network security. The tag for it is \u0027important\u0027."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see the task added into the task list on the left of the app. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The time duration on that task will be calculated in the back and the time should be reflected in the day list on the right"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of the app."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Clearing all tasks : `clear`/`c`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have done with the tasks, simply clear them from the Tasketch, so that they will not disrupt your time planning."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in Tasketch"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear DATE` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks starting from the specified date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 21-02-2019` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February 21st, 2019."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 02-2019` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February, 2019."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear before` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which finished before today."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in the storage."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The tasks of your date choice should be cleared from the task list on the left of the app. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The correspond time duration for those tasks will be deducted from the Daily Time Planner."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`/`d`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Deletes the specified task from Tasketch."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `delete INDEX_NUMBER`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Each tasks is identified by the index number shown in the task list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Deletes the task with the index number."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find cs2113t` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Editing a task : `edit`/`e`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Sometimes, you might have added a task information wrongly or wish to change its information. This command will allow you to"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "edit all existing tasks in Tasketch."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Since the Daily Time Planner only includes tasks that start and end on the same date. Editing the start date and end date"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task will also lead to some changes."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "1. Changing from same start and end date to different dates will remove the task from Daily Time Planner, its corresponding"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "time duration will also be deducted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "2. Changing from different start and end date to same dates will make it a daily task, thus to be included into the Daily"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Time Planner, its corresponding time duration will also be added."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "3. Maintaining the same start and end dates but changed the start or end time of a task. Its time duration changes will"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "also be updated in the Daily Time Planner."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `edit TASK_ID [n/NAME] [st/START_TIME] [et/END_TIME] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Edits the task with the index number shown in the task list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* When editing description, the existing description of the task will be removed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `edit 1 st/12.00 et/14.00 t/GET1018 tut` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "Edits the start time and end time of the task with ID 1 to be `12.00` and `14.00` respectively. Change the topic to `GET1018 tut`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The information edited for that task will be updated and shown in the task list. +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The day related to that edited task will be updated and shown in the day list on the right of the app."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Searching tasks by keywords: `find`/`f`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Finds tasks whose topic or description contain any of the given keywords."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS] ...`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The search is case insensitive. e.g `Tutorial` will match `tutorial`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T tutorial` will match `tutorial CS2113T`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Only full words will be matched e.g. `tut` will not match `tutorial`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2113T tutorial` will return `CS2113T lecture`, `CS3235 tutorial`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find CS2113T` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Returns `CS2113T lecture`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `f Lecture` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Returns `CS2113T lecture` and `CS3235 lecture`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`/`l`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Shows a list of tasks in Tasketch."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks of today +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list DATE` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks of that specific date +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 02-2019` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks in February, 2019"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 20-02-2019` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks in February 20th, 2019"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the tasks in the storage"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see the state of Tasketch before the last `undo` command that you have executed."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Showing time planned for all task categories : `showTime`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To help you to plan and make full use of your daily time better, simply use this command to see all the time planned on"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "all 5 categories for every day."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all the days"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to the time planned for everyday, just use this command."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showTime`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a list of days with all the category times on the right side of the app."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing a particular day"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to see only one specific day, simply add the date that you wish to see behind the command."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showTime DATE`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a day of your choice with all the category times on the right side of the app, if the date exists."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Reminder"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminding the users of the nearest task : `remind`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows to the user the nearest tasks of certain category. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind start` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Reminds the users of most recently begin tasks of all categories. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind ddl` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent deadline of all categories. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a/e/c/r/o ddl/start` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent start tasks or deadline of specified category."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"a\" - Academic +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"e\" - Entertainment +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"c\" - Co-Curricular Activity (CCA) +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"r\" - Errand +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"o\" - Other"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind e start` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest start tasks of \"entertainment\" category."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d View calender \u0026 timeline"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Set the calendar to desired month : `month`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the desired month to the user. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month +` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to next month. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month -` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Changes the current calendar to previous month."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Shows the timeline of a specific day to the user : `timeline` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of today by default. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline [DATE]` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of that date. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline for today."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline 01-04-19` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the whole timeline for 1st April 2019."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Getting wrong command suggestions"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "There so many commands in the app, so to help you to use the app easier, it will tell you what you have typed wrongly automatically,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "by giving a list of closest approximations of word through the message box after pressing `enter`. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The input is not case sensitive, hence it would increase the chance of getting a closer approximation of the correct command!"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This feature tolerates a maximum of two wrong alphabets."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* This feature allows user to type in a command which has the same alphabets with one of the correct command word but in different order. The system can give suggestion even if the user type in the reverse command word."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `clear` but typed `clarr` instead, the system will tell you that it is an unknown command, and would suggest the command `clear` instead."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `exit` but typed `ecot` instead, the system will tell you that it is an unknown command, and would suggest the command `exit` and `edit` instead."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `history` but typed `hsitryo` instead, the system will tell you that it is an unknown command, and would suggest the command `history` instead."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Automatically complete input command for user"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you type something wrongly, the app will automatically correct type error and fulfill their incomplete typed command in command line."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* The input is not case sensitive."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you type a string that is a substring of one of the commands, then command line will fulfill the string with this command."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you type a string that is not a substring of any of the commands, then command line will show the most similar command compared this string."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* if you type a string can not match any command, then command line will show `No command matched`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples："
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* If you want to type `list`, you can type `li` instead, and press `TAB` on keyboard. The system will automatically fulfill the command in command line with `list`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `histoy`, but you type `histoy` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `history`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* If you want to type `add`, but you type `aefw` instead, and press `tap` on keyboard. The system will automatically fulfill the command line with `No command matched`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Import/Export"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature allows you to import an existing json file which contains your other tasks in Tasketch. Also, it supports"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "the product to export what you have in the Tasketch to a json file if you want."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Export tasks displayed: `export`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "You can save all tasks or filtered tasks into a json file. It can be used with `list` or `find`. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `export FILENAME.json`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find Revise` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export revise.json` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are named with keyword \"Revise\"."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 13-03-19` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export 13-03-19.json` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which starts on March 13, 2019."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*  `export` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are shown on the left list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file will be located in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/FILENAME.json`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  This command overwrites any files with the same name at `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Import tasks: `import`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have a classmate who have the same module with you, and you forget to add any related"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "task into Tasketch. There are a brunch of tasks in this module. In this case, you do not"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "need to add them one by one. Instead, you can simply ask your friend to export all tasks about this module and send the"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "file to you. What you have to do is just simply import it."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `import FILENAME.json`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `import revise.json` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Imports all tasks in revise.json into Tasketch."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file to import must be placed in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  Tasks that already exist in your Tasketch won’t be imported. To import an existing task in Tasketch with different details, please `delete` it first."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Versioned Tasketch"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature will help you to check all the commands you have typed into Tasketch. Besides, it gives you a chance to"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "regret your previous attempts when playing with Tasketch."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`/`h`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`/`u`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Restores the Tasetch to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `list` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `clear` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo`  (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `clear` command)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`/`r`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` (reapplies the `delete 1` command)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   The `redo` command fails as there are no undo commands executed previously."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`redo` (reapplies the `clear` command)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "In case you are clueless, you can always use this command get help on all the commands available and their functions."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you are done using the app, you just use this command to exit and close the app."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Add* : `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION [c/CATEGORY] [t/TAG]...` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `add n/CS2113 sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control c/a`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Clear* : `clear [DATE]` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "e.g. `clear 21-02-2019`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Delete* : `delete INDEX_NUMBER` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Edit* : `edit INDEX_NUMBER [s/START_TIME] [e/END_TIME] [t/TOPIC] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `edit 1 s/12.00 e/14.00 t/GET1018 tut`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Search* : `search KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "e.g. `search CS2113T`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *List* : `list [DATE]` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "e.g. `list 02-2019`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Showtime* : `showtime [DATE]`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "e.g. `showtime 13-02-2019`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 3,
      "cheahzk": 164,
      "jingchen-z": 30,
      "BrittonAlone": 26,
      "Zeyang-Li": 142,
      "-": 147
    }
  },
  {
    "path": "docs/team/BrittonAlone.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d Jin Shibo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "My teammates and I developed Tasketch for those who need to manage their time by allocating time for each daily task. More importantly, our Tasketch is optimized for those who prefer to use a desktop app and work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Major enhancement*: I have added *the reminder feature* to our Tasketch."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** What it does: Sometimes student tend to forget important deadline of their tasks or start time of their CCA events and etc. The reminder will show a list of tasks in time order for them to conveniently view what tasks are coming soon so that they will know what to prepare first."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Justification: For busy university students, it is almost impossible for them to remember every start time or deadlines of their activities. A reminder is a common requirement of them to easily view these time in order. This feature significantly improves the users\u0027 using experience by meeting this requirement."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "** Highlights: This feature implement a very useful method sort() in model API which can be used to implement other features."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Minor enhancement*: I made an enhancement to the list command of the previous version. In the previous version, list command can only list all the tasks in the storage. After enhancement, it support the usage like *list td* to list all the tasks of today so that user will know what need to be done today easily. It also support *list [DATE]*, which show a list of tasks on the specified date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dBrittonAlone\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dBrittonAlone\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Test code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Updated the GUI for reminder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Wrote additional tests for existing features."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Did improvement to UserGuide according to new features."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** Did improvement to DeveloperGuide according to new features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** PRs reviewed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "*** The filterlist() function of the new list commands I added was adopted by my teammates."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`/`l`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of tasks in Tasketch."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of today +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list DATE` +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks of that specific date +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list 02-2019` +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in February, 2019"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list 20-02-2019` +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in February 20th, 2019"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Lists all the tasks in the storage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "\u003d\u003d\u003d Reminding the users of the nearest task : `remind`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows to the user the nearest tasks of certain category. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind start` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Reminds the users of most recently begin tasks of all categories. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind ddl` +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent deadline of all categories. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind a/e/c/r/o ddl/start` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Remind the users of most recent start tasks or deadline of specified category."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"a\" - Academic +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"e\" - Entertainment +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"c\" - Co-Curricular Activity (CCA) +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"r\" - Errand +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* \"o\" - Other"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "****"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "* `remind e start` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "Shows a list of nearest start tasks of \"entertainment\" category."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 2,
      "BrittonAlone": 67,
      "Zeyang-Li": 46
    }
  },
  {
    "path": "docs/team/Wanchunwei.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 4,
      "-": 68
    }
  },
  {
    "path": "docs/team/Zeyang-Li.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d Zeyang Li - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Tasketch is an application that helps you to manage your everyday time by giving you an overview of all the time planned"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "for all the tasks in a daily manner. It also helps you to be aware of all the tasks dateline too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Major enhancement*: +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   1. Added the ability to clear tasks which start from one specific date or month and also clear all tasks that are finished before today. +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   2. Added the ability to give users suggestion when they type the command words wrongly. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   3. Still working on the import and export feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** What it does: +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    a. It allows the user to clear some tasks that are no longer needed on the daily basis or the monthly basis or even clear all finished tasks in the storage. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    b. It is more user friendly because the system will be smart to guess what is the most similar command with the wrongly typed command word. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    c. It will also allow the users to import or export the tasks in Json file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Justification: +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    This feature improves the product significantly because a user can make clear a branch of tasks in the app. And when users have forgot or typed wrongly a command word, it will give suggestions to them. Also, it allows the app to be able to linked with the outside files."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Highlights: +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Credits: +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Minor enhancement*: +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " Changed a bit of the ability to open help window, to exit the program and to undo and redo the previous command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Code contributed*: [https://github.com/CS2113-AY1819S2-T09-2/main/tree/master/src/main/java/seedu/address/export[Export code]] [https://github.com/CS2113-AY1819S2-T09-2/main/tree/master/src/main/java/seedu/address/commons/events[Events code]][https://github.com/CS2113-AY1819S2-T09-2/main/tree/master/src/main/java/seedu/address/logic/suggestions[Suggestion code]][https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/src/main/java/seedu/address/logic/parser/ClearCommandParser.java[Clear Command Parser]][https://github.com/CS2113-AY1819S2-T09-2/main/blob/master/src/main/java/seedu/address/logic/commands/ClearCommand.java[Clear Command]][https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dZeyang-Li\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[RepoSence Report]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Managed releases `v1.1` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Updated the clear command (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide, developer guide, Readme: https://github.com[#14]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#28], https://github.com[#31], https://github.com[#32], https://github.com[#35], https://github.com[#52], https://github.com[#58], https://github.com[#65]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** Some parts of the input suggestion feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** bring in a third party library (opencsv) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all tasks : `clear`/`c`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have done with the tasks, simply clear them from the Tasketch, so that they will not disrupt your time planning."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in Tasketch"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear DATE` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks starting from the specified date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 21-02-2019` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February 21st, 2019."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear 02-2019` +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which start from February, 2019."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear before` +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks which finished before today."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `clear` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Clears all the tasks in the storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The tasks of your date choice should be cleared from the task list on the left of the app. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "The correspond time duration for those tasks will be deducted from the Daily Time Planner."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Import/Export"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature allows you to import an existing json file which contains your other tasks in Tasketch. Also, it supports"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "the product to export what you have in the Tasketch to a json file if you want."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Export tasks displayed: `export`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "You can save all tasks or filtered tasks into a json file. It can be used with `list` or `find`. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `export FILENAME.json`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `find Revise` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export revise.json` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are named with keyword \"Revise\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `list 13-03-19` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `export 13-03-19.json` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which starts on March 13, 2019."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*  `export` +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Exports all tasks which are shown on the left list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file will be located in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/FILENAME.json`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  This command overwrites any files with the same name at `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Import tasks: `import`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you have a classmate who have the same module with you, and you forget to add any related"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "task into Tasketch. There are a brunch of tasks in this module. In this case, you do not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "need to add them one by one. Instead, you can simply ask your friend to export all tasks about this module and send the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "file to you. What you have to do is just simply import it."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `import FILENAME.json`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `import revise.json` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   Imports all tasks in revise.json into Tasketch."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "1.  The file to import must be placed in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "2.  Tasks that already exist in your Tasketch won’t be imported. To import an existing task in Tasketch with different details, please `delete` it first."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Versioned Tasketch"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "This feature will help you to check all the commands you have typed into Tasketch. Besides, it gives you a chance to"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "regret your previous attempts when playing with Tasketch."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`/`h`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`/`u`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Restores the Tasetch to the state before the previous undoable command was executed. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `list` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `clear` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo`  (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `clear` command)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`/`r`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` (reapplies the `delete 1` command)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "  `redo` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "   The `redo` command fails as there are no undo commands executed previously."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "`redo` (reapplies the `clear` command)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "In case you are clueless, you can always use this command get help on all the commands available and their functions."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "If you are done using the app, you just use this command to exit and close the app."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 206
    }
  },
  {
    "path": "docs/team/cheahzk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d Cheah Zhi Kang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch is an application that helps you to manage your everyday time by giving you an overview of all the time planned"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "for all the tasks in a daily manner. It also helps you to be aware of all the tasks dateline too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Major enhancement*: added *Daily Time Planner*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** What it does: Keeping track of all the time planned for all the daily tasks added and show the user based on each day with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "time planned for different categories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Justification: This feature allowing the user to plan the daily time by planning tasks of certain categories after seeing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "how much time has been planned for that category on that day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "** Highlights: This enhancement greatly dependent on the tasks information. Getting the right data from the tasks added"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "is important."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Minor enhancement*: added restriction and checks on the `add` command to ensure no invalid data being entered into the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Tasketch, as well as ensuring the Daily Time Planner works correctly after the command being parsed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* *Code contributed*: [https://github.com/CS2113-AY1819S2-T09-2/main/commit/c32d4c5b5a218ba50dfeb315b3757dc19ad99a94[Daily Time Planner code]][https://github.com/CS2113-AY1819S2-T09-2/main/commit/fd905013aa33b2effad033e0d4609a3007bcf431[Date and Time Check code]][https://github.com/CS2113-AY1819S2-T09-2/main/pull/36[Morphing to Tasketch code]][https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dcheah%20zhi%20kang\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003dZeyang-Li\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master\u0026repoSort\u003dtrue[RepoSense]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Managed releases `v1.2` on GitHub"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Create milestones for Tasketch version on Github"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Setup issue trackers for Tasketch on Github"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Updated `add` command for Daily Time Planner (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/90[#90], https://github.com/CS2113-AY1819S2-T09-2/main/pull/98[#98])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Added UI for Daily Time Planner commands (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/116[#116])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** Did cosmetic tweaks added more content to existing contents of the User Guide, Developer Guide and ReadMe:: https://github.com/CS2113-AY1819S2-T09-2/main/pull/110[#110],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "https://github.com/CS2113-AY1819S2-T09-2/main/pull/111[#111]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S2-T09-2/main/pull/38[#38]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Daily Time Planner"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This feature will help you to monitor the time planned for different tasks in a day. By looking at the time spent on"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "different tasks, it aims to help you to plan your time better so that you will not spend most time on specific type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of a task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`/`a`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To get started, you will need to add a task into Tasketch. The format is as below. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "When you are adding a task, the app will ensure that there will be no duplicate names added. This is to ensure that"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "there is no confusion in the task names."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adding a task with the same start date and end date means that it is a daily task, will be monitored by the Daily Time"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Planner. Different dates means it is a long period task, thus will not be considered as daily task but can still be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The app will not able to verify the correctness for the number of days in different months, so you have to ensure that"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "the date exists in that particular month. However, the app will able to differentiate the maximum number of days and months."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "This means that you will never be able to enter more than 31 days and more than 12 months in the start date and end date. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Should you enter different start date and end date, the app will ensure that your end date is after the start date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "As for start time and end time, the app is smart enough to inform you when you have entered invalid time, such as 24.00,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "as this is incorrect. You will not able to enter hours beyond 23 and minutes beyond 59. The app will also ensure"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "that the end time is after start time too. This to ensure the time spent/duration calculation (end time - start time)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "will result correct values."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You will also need to specify the type of category of the task that you are adding for the Daily Time Planner to monitor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "your time effectively."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If any of the above is violated, the app will alert you that it is an invalid command with the corrected format shown to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "you."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* There are only 5 valid categories. (The details about it can be found in \u003c\u003ccategory\u003e\u003e.)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `add n/TASK_NAME sd/START_DATE st/START_TIME ed/END_DATE et/END_TIME d/DESCRIPTION c/CATEGORIES [t/TAG]...`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS2113 task sd/13-03-19 st/12.00 ed/13-03-19 et/14.00 d/Talk about version control` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS2113 task in the app. It starts at 12:00 on March 13rd, 2019 and it ends at 14:00 on the same day. The description for this task is to talk about version control."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/MA1101R tutorial sd/14-03-19 st/12.00 ed/14-03-19 et/14.00 d/Tutorial 8 c/a` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named MA1101R tutorial. It starts at 12:00 on March 14th, 2019 and ends at 14:00 on the same day. Its description is tutorial and it category is academic."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "* `add n/CS3235 lecture sd/13-03-19 st/08.00 ed/13-03-19 et/10.00 d/Talk about network security t/important` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Adds a task named CS3235 lecture. It starts at 8:00 in March 3rd, 2019 and ends at 10:00. Its description is to talk about network security. The tag for it is \u0027important\u0027."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see the task added into the task list on the left of the app. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "The time duration on that task will be calculated in the back and the time should be reflected in the day list on the right"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "of the app."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d Showing time planned for all task categories : `showTime`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "To help you to plan and make full use of your daily time better, simply use this command to see all the time planned on"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "all 5 categories for every day."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all the days"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to the time planned for everyday, just use this command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showTime`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a list of days with all the category times on the right side of the app."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d\u003d\u003d Showing a particular day"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "If you want to see only one specific day, simply add the date that you wish to see behind the command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Format: `showTime DATE`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "Result: +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "You should see a day of your choice with all the category times on the right side of the app, if the date exists."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "_{Adding}_"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 98,
      "Zeyang-Li": 37
    }
  },
  {
    "path": "docs/team/jingchen-z.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d Zhang Jingchen - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d PROJECT: Tasketch"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Tasketch is for those who need to manage their time by allocating time for each daily task. More importantly, Tasketch is optimized for those who prefer to use a desktop app and work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "This user guide is introducing the features of Tasketch and show to the users how to use all the command lines. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Major enhancement*: Enhance visual feedback with timeline feature."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** What it does: It helps the user to visually view the time they should spend on each task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Justification: This feature improves the product significantly because people tend to believe what they see, it is good to have a vivid picture of the whole timeline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Highlights: This feature helps the user to better manage their tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "** Credits: _{I use Shibo\u0027s idea on filtering the desired tasks so that I can display the tasks according to different categories on the timeline}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Minor enhancement*: morphed the find and history command that allows the user to easily locate a task and see history commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Functional code]] [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-01\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabAuthor\u003djingchen-z\u0026tabRepo\u003dCS2113-AY1819S2-T09-2_main_master[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** The UI designer and the person in charge."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Managed releases `v1.0` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated the GUI arrangement and corresponding features (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/83[#83], https://github.com/CS2113-AY1819S2-T09-2/main/pull/91[#91], https://github.com/CS2113-AY1819S2-T09-2/main/pull/96[#96])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated previous commands (Pull requests https://github.com/CS2113-AY1819S2-T09-2/main/pull/51[#51], https://github.com/CS2113-AY1819S2-T09-2/main/pull/45[#45])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Updated UserGuide and DeveloperGuide ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Some parts of the history feature I added was referenced by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "*** Google is always the best friend. :)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Set the calendar to desired month : `month`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the desired month to the user. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month +` +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to next month. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `month -` +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Changes the current calendar to previous month. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Show the timeline : `timeline`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of a specific day to the user. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of today by default. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline [DATE]` +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline of that date. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline` +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the timeline for today."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `timeline 01-04-19` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Shows the whole timeline for 1st April 2019."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Searching tasks by keywords: `find`/`f`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Finds tasks whose topic or description contain any of the given keywords."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS] ...`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* The search is case insensitive. e.g `Tutorial` will match `tutorial`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T tutorial` will match `tutorial CS2113T`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Only full words will be matched e.g. `tut` will not match `tutorial`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `CS2113T tutorial` will return `CS2113T lecture`, `CS3235 tutorial`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find CS2113T` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Returns `CS2113T lecture`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `f Lecture` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Returns `CS2113T lecture` and `CS3235 lecture`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`/`d`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the specified task from Tasketch."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Format: `delete INDEX_NUMBER`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Each tasks is identified by the index number shown in the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* Deletes the task with the index number."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "* `find cs2113t` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "Deletes the task with index number 1 in task list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "---"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 92,
      "cheahzk": 2,
      "Zeyang-Li": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.TaskBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Testing Travis"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "//This line is to test Travis CI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Tasketch ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBookStorage taskBookStorage \u003d new JsonTaskBookStorage(userPrefs.getTaskBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        storage \u003d new StorageManager(taskBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The data from the sample task book will be used instead if {@code storage}\u0027s task book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * or an empty task book will be used instead if errors occur when reading {@code storage}\u0027s task book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cReadOnlyTaskBook\u003e taskBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ReadOnlyTaskBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskBookOptional \u003d storage.readTaskBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!taskBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Tasketch\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d taskBookOptional.orElseGet(SampleDataUtil::getSampleTaskBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Tasketch\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d new TaskBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Tasketch\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            initialData \u003d new TaskBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"Starting Tasketch \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Tasketch ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 19,
      "jingchen-z": 5,
      "BrittonAlone": 3,
      "Zeyang-Li": 11,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1080;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 700;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String LOG_FILE \u003d \"taskbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "Zeyang-Li": 15,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_TASK_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DAY_LISTED_OVERVIEW \u003d \"%1$d days listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TaskBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * keep track if the task book is changed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class TaskBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public final ReadOnlyTaskBook data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * keep track if the task book is changed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public TaskBookChangedEvent(ReadOnlyTaskBook data) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return \"number of tasks \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                + data.getTaskList().size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String JSON_FILE_EXTENSION \u003d \".json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path}},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if {@code filename} is a valid filename for xml files,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filename A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static boolean isValidXmlFilename(String filename) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (filename.length() \u003c\u003d JSON_FILE_EXTENSION.length()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // Compares the filename extension with the expected xml file extension"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int indexOfExtension \u003d filename.length() - JSON_FILE_EXTENSION.length();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String fileExtension \u003d filename.substring(indexOfExtension);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String lowercaseFileExtension \u003d fileExtension.toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return lowercaseFileExtension.equals(JSON_FILE_EXTENSION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 21,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 1,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Joins the elements of the provided array into a single String"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * containing the provided list of elements."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param array  the array of values to join together, may be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param separator  the separator character to use"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return the joined String, {@code null} if null array input"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @since 2.0"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static String join(final List\u003cString\u003e array, final String separator) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (array \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final int arraySize \u003d array.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (arraySize \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final StringBuilder buf \u003d new StringBuilder(arraySize);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c arraySize; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                buf.append(separator);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (array.get(i) !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                buf.append(array.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return buf.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 29,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/export/CsvWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The writer for CSV file of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class CsvWriter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_NAME \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_STARTDATE \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_STARTTIME \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_ENDDATE \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_ENDTIME \u003d 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_DESCRIPTION \u003d 5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int INDEX_TASK_CATEGRORIES \u003d 6;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final String[] header \u003d { \"Name\", \"StartDate\", \"StartTime\", \"EndDate\", \"EndTime\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                                        \"Description\", \"Categories\" };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final ObservableList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Path outputFilepath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CsvWriter(Task task, Path outputFilepath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireAllNonNull(task, outputFilepath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!FileUtil.isFileExists(outputFilepath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                FileUtil.createFile(outputFilepath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                logger.severe(\"Error creating output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"Initializing with output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.listOfTasks \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.outputFilepath \u003d outputFilepath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CsvWriter(ObservableList\u003cTask\u003e tasks, Path outputFilepath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!FileUtil.isFileExists(outputFilepath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                FileUtil.createFile(outputFilepath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                logger.severe(\"Error creating output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"Initializing with output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.listOfTasks \u003d tasks;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.task \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.outputFilepath \u003d outputFilepath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Writes to the file as defined in {@code outputFilepath}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void write() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            File file \u003d new File(String.valueOf(outputFilepath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileWriter outputFile \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            CSVWriter writer \u003d new CSVWriter(outputFile);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            writer.writeNext(header);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (listOfTasks !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                writeMultiplePersons(writer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (task !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                writeSinglePerson(writer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Writes the {@code listOfPersons} to the csv file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void writeMultiplePersons(CSVWriter writer) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        listOfTasks.forEach(person -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            String[] personDetails \u003d convertToStringArray(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            data.add(personDetails);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        writer.writeAll(data);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Writes the {@code person} to the csv file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void writeSinglePerson(CSVWriter writer) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] personDetails \u003d convertToStringArray(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        writer.writeNext(personDetails);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns a string array that contains the details of a {@code task}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param task {@code Task} to be saved to the string array."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return A string array containing the name, phone, address, and email of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *          the {@code person}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private String[] convertToStringArray(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] taskDetails \u003d new String[header.length];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_NAME] \u003d task.getName().toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_STARTDATE] \u003d task.getStartDate().toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_STARTTIME] \u003d task.getStartTime().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_ENDDATE] \u003d task.getEndDate().toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_ENDTIME] \u003d task.getEndTime().toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_DESCRIPTION] \u003d task.getDescription().toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskDetails[INDEX_TASK_CATEGRORIES] \u003d task.getCategories().toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getOutputFilepath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return outputFilepath;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Export.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The API of the Export component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Export {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the filteredTasks to the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IllegalValueException if the current Taskbook is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void saveFilteredTasks() throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @see #saveFilteredTasks()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void saveFilteredTasks(ObservableList\u003cTask\u003e filteredTasks, Path filePath)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ExportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonFileStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonSerializableTaskBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages exporting of AddressBook data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportManager implements Export {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_NOTHING_TO_EXPORT \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.export.ExportManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private ObservableList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path exportPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportManager(ObservableList\u003cTask\u003e filteredTasks, Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filteredTasks \u003d filteredTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.exportPath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getExportFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the {@code filteredTasks} to the {@code exportPath}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IllegalValueException if the current taskbook is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void saveFilteredTasks() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        saveFilteredTasks(filteredTasks, exportPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #saveFilteredTasks()}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filteredTasks cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filePath file path of the data. Cannot be null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void saveFilteredTasks(ObservableList\u003cTask\u003e filteredTasks, Path filePath)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filteredTasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (filteredTasks.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.warning(\"There is nothing to export!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NOTHING_TO_EXPORT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (FileUtil.isFileExists(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"File exists. Overwriting output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.fine(\"Initializing output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        JsonFileStorage.saveDataToFile(filePath, new JsonSerializableTaskBook(filteredTasks));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Import.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * The API of the Import component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Import {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns the taskBook from the xml file specified."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws FileNotFoundException if the file does not exist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #readTaskBook()}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, FileNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ImportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonFileStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.storage.JsonSerializableTaskBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Manages importing of TaskBook data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportManager implements Import {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImportManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path importPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportManager(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.importPath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getImportPath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return importPath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return readTaskBook(importPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.info(\"TaskBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Optional\u003cJsonSerializableTaskBook\u003e jsonTaskBook \u003d JsonFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (jsonTaskBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return Optional.of(jsonTaskBook.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the TaskBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#getTaskBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyTaskBook getTaskBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of days */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredDayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the month on calendar."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param month"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    void setMonth(String month);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#selectedTaskProperty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected day in the filtered day list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no day is selected."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#selectedDayProperty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cDay\u003e selectedDayProperty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedTask(Task)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected day in the filtered day list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedDay(Day)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedDay(Day day);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 30,
      "jingchen-z": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.parser.TaskBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskBookParser taskBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean taskBookModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookParser \u003d new TaskBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Set taskBookModified to true whenever the models\u0027 task book is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.getTaskBook().addListener(observable -\u003e taskBookModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Command command \u003d taskBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (taskBookModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.info(\"Task book modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                storage.saveTaskBook(model.getTaskBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyTaskBook getTaskBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getTaskBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredDayList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredDayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getTaskBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setMonth(month);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.selectedTaskProperty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cDay\u003e selectedDayProperty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.selectedDayProperty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setSelectedTask(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedDay(Day day) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.setSelectedDay(day);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 37,
      "jingchen-z": 1,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Add a task to Tasketch"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to Tasketch. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTTIME + \"START_TIME(24-hr format) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDTIME + \"END_TIME(24-hr format) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CONTENT \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_NAME + \"Revise CS2113T \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTDATE + \"15-03-19 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTTIME + \"14.00 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDDATE + \"15-03-19 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDTIME + \"17.00 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Class diagram \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"a \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_TAG + \"urgent \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_TAG + \"duesoon\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_NAME + \"TASK NAME \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_STARTDATE + \"START_DATE \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_STARTTIME + \"START_TIME(24-hr format) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_ENDDATE + \"END_DATE \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_ENDTIME + \"END_TIME(24-hr format) \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CONTENT \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Task added: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This Task already exists in Tasketch\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Start Date \u0026 Start Time must be before End Date \u0026 End Time!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Adding daily task, End Time must be after Start Time!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String startD \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String endD \u003d task.getEndDate().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startD.equalsIgnoreCase(endD)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isTimeValid(task), String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_TIME_CONSTRAINTS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            checkArgument(isValidDate(task), String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_DATE_CONSTRAINTS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both date of a task is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isValidDate(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateS \u003d task.getStartDate().value.split(\"-\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateE \u003d task.getEndDate().value.split(\"-\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[0]) \u003e Integer.parseInt(dateE[0])) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[1]) \u003e Integer.parseInt(dateE[1])) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (Integer.parseInt(dateS[2]) \u003e Integer.parseInt(dateE[2])) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if endTime of a task is the same."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isTimeValid(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String time \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double end \u003d task.getEndTime().getTimeDouble(time);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        time \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double start \u003d task.getStartTime().getTimeDouble(time);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (end \u003e start) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 71,
      "Zeyang-Li": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Clears the Tasketch."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"Tasketch has been cleared!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"clear : clear tasks\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Parameters: none or DATE or before\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" 18-03-19\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" 03-19\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_WORD + \" before\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: none or DATE or before\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEARDATE_SUCCESS \u003d \"clear %1$d tasks which start at %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_CLEARYD_SUCCESS \u003d \"clear %1$d tasks which have already ended on %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private String specificDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private List\u003cTask\u003e tasksToBeDeleted \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Creates an ClearDateCommand to clear tasks on the specified {@code specific_date}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ClearCommand(String specificDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.specificDate \u003d specificDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that help predicate to select specific tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkDate(String checkingDate, String dateInTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] specificDateList \u003d checkingDate.split(\"-\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (specificDateList.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (checkingDate.equals(dateInTask)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (specificDateList.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            final String[] startDateInString \u003d dateInTask.split(\"-\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (specificDateList[0].equals(startDateInString[1]) \u0026\u0026 specificDateList[1].equals(startDateInString[2])) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that checks whether the task is ended before today."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkBeforeDate(String checkingDate, String dateInTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] specificDateList \u003d checkingDate.split(\"-\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String[] taskDateList \u003d dateInTask.split(\"-\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer day \u003d Integer.parseInt(taskDateList[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer month \u003d Integer.parseInt(taskDateList[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer year \u003d Integer.parseInt(taskDateList[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificYear \u003d Integer.parseInt(specificDateList[2]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificMonth \u003d Integer.parseInt(specificDateList[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final Integer specificDay \u003d Integer.parseInt(specificDateList[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if ((specificYear \u003e year)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (specificMonth \u003e month \u0026\u0026 specificYear \u003d\u003d year)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (specificDay \u003e\u003d day \u0026\u0026 specificYear \u003d\u003d year \u0026\u0026 specificMonth \u003d\u003d month)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Boolean function that checks whether the task starts from that specific day."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkStartDate(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        final String startDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return checkDate(this.specificDate, startDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (this.specificDate.equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.setTaskBook(new TaskBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (this.specificDate.equals(\"before\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            calendar.set(Calendar.HOUR_OF_DAY, -24);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            this.specificDate \u003d formatter.format(calendar.getTime());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (Task task : lastShownList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (checkBeforeDate(this.specificDate, task.getEndDate().value)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    tasksToBeDeleted.add(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.deleteTaskList(tasksToBeDeleted);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEARYD_SUCCESS, count, specificDate));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (Task task : lastShownList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (checkStartDate(task)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    tasksToBeDeleted.add(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.deleteTaskList(tasksToBeDeleted);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEARDATE_SUCCESS, count, specificDate));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "Zeyang-Li": 123,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandFormatString.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " * Contains format string for input of each command in Command Line Interface (CLI)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "public class CommandFormatString {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String ADD_COMMAND_FORMATSTRING \u003d PREFIX_NAME + \"task_name  \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTTIME + \"hh:mm  \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDTIME + \"hh:mm  \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"content  \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_CATEGORY + \"category  \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"tag]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String LIST_COMMAND_FORMATSTRING \u003d \"dd-mm-yy\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String EDIT_COMMAND_FORMATSTRING \u003d PREFIX_NAME + \"task_name  \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_STARTTIME + \"hh:mm  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDDATE + \"dd-mm-yy  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_ENDTIME + \"hh:mm  \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"content  \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String FIND_COMMAND_FORMATSTRING \u003d \"Keyword\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String DELETE_COMMAND_FORMATSTRING \u003d \"Index\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String CLEAR_COMMAND_FORMATSTRING \u003d \"dd-mm-yy\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Delete a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Task personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.deleteTask(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 10,
      "cheahzk": 1,
      "Zeyang-Li": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "  * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "  */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DECRIPTION] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"STRATDATE] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"STARTTIME] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"ENDTIME] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_NAME + \"Study \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Study for the whole day\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DECRIPTION] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_STARTDATE + \"STRATDATE] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_STARTTIME + \"STARTTIME] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"[\" + PREFIX_ENDDATE + \"ENDDATE] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_ENDTIME + \"ENDTIME] \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the Tasketch.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      * @param index of the Task in the filtered Task list to edit"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      * @param editTaskDescriptor details to edit the person with"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "      */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static Task createEditedTask(Task personToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(personToEdit.getDescription());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StartDate updatedStartDate \u003d editTaskDescriptor.getStartDate().orElse(personToEdit.getStartDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        StartTime updatedStartTime \u003d editTaskDescriptor.getStartTime().orElse(personToEdit.getStartTime());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EndDate updatedEndDate \u003d editTaskDescriptor.getEndDate().orElse(personToEdit.getEndDate());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EndTime updatedEndTime \u003d editTaskDescriptor.getEndTime().orElse(personToEdit.getEndTime());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Categories updatedCategories \u003d editTaskDescriptor.getCategories().orElse(personToEdit.getCategories());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        System.out.println(editTaskDescriptor.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(updatedName, updatedStartDate, updatedStartTime, updatedEndDate, updatedEndTime,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                updatedDescription, updatedCategories, updatedTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private Categories categories;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private EndDate endDate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private EndTime endTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private StartDate startDate;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private StartTime startTime;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        private String category;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor(Description description, EndDate endDate, EndTime endTime,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                            Name name, StartDate startDate, StartTime startTime, Set\u003cTag\u003e tags, String category) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.categories \u003d categories;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, endDate, endTime, startDate, startTime, category);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the description"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param description the description to set"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the endDate"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cEndDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param endDate the endDate to set"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setEndDate(EndDate endDate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the endTime"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cEndTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param endTime the endTime to set"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setEndTime(EndTime endTime) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the name"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param name2 the name to set"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setName(Name name2) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.name \u003d name2;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the startDate"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cStartDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param startDate the startDate to set"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setStartDate(StartDate startDate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the startTime"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public Optional\u003cStartTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @param startTime the startTime to set"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setStartTime(StartTime startTime) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         * @param categories the category to set"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void setCategories(Categories categories) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.categories \u003d categories;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "         * @return the category"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public Optional\u003cCategories\u003e getCategories() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.ofNullable(categories);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * @return the tags"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "         */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return \"EditTaskDescriptor [description\u003d\" + description + \", endDate\u003d\" + endDate"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    + \", endTime\u003d\" + endTime + \", name\u003d\" + name + \", startDate\u003d\" + startDate"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    + \", startTime\u003d\" + startTime + \", category\u003d\" + categories + \"]\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 166,
      "cheahzk": 26,
      "BrittonAlone": 5,
      "Zeyang-Li": 6,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Tasketch as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Exports all persons in the address book to a file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportAllCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportall\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all the tasks in the task book.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Filetype: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all tasks.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.exportTaskBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Exports the listed tasks in the taskbook to a xml file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .xml)\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" export.xml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the persons listed \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"in the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Exported persons listed to %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FAILURE_EMPTY_AB \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportCommand(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.exportFilteredTaskBook(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_EMPTY_AB);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ExportCommand e \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Finds and lists all tasks in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2101 cs2113t\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2101 cs2113t\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private final TaskContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public FindCommand(TaskContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                String.format(Messages.MESSAGE_TASK_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 8,
      "cheahzk": 3,
      "Zeyang-Li": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Show command history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Import the tasks to the task book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .json)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" import.json\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import the tasks in the file specified to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"Tasketch.\\n\" + COMMAND_PARAMETERS + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Imported %1$s task(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Import failed! Error: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_INVALID_LIST_SIZE \u003d \"Invalid list size.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportCommand(Path filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook readOnlyTasksBook \u003d model.getTaskBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ObservableList\u003cTask\u003e taskList \u003d readOnlyTasksBook.getTaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int initialNumberOfPersons \u003d taskList.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isFileExists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            model.importTasksFromTaskBook(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, ioe));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, dce));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int finalNumberOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int tasksImported \u003d calculateImportedEntries(initialNumberOfPersons, finalNumberOfTasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_IMPORT_SUCCESS, tasksImported));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns the number of entries imported to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static int calculateImportedEntries(int initialListSize, int finalListSize) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(initialListSize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(finalListSize);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int importedEntries \u003d finalListSize - initialListSize;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidSize(importedEntries)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, MESSAGE_INVALID_LIST_SIZE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return importedEntries;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static boolean isValidSize(int size) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return size \u003e\u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ImportCommand e \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Lists all tasks in the task book to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list : list specified tasks\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"1. no parameters: list        list all tasks\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"2. td: list td       list all the tasks of today\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"3. DATE: list 25-03-19    \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"list all the tasks which are before/after 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS1 \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS2 \u003d \"Listed all tasks of today.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS3 \u003d \"Listed tasks on %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"1. no parameters: list        list all tasks\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"2. td: list td       list all the tasks of today\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"3. DATE: list 25-03-19    \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            + \"list all the tasks which are before/after 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ListCommand(String[] arguments) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (arguments[0].equals(\"td\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementTd(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            specifiedDate \u003d arguments[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirementDate(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS3, specifiedDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list td command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirementTd(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String dateInString \u003d formatter.format(currentDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (taskDate.equals(dateInString)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function used to decide predicate for list DATE command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirementDate(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] dateInfo \u003d specifiedDate.split(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (dateInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (taskDate.equals(specifiedDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (dateInfo.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] splitDate \u003d taskDate.split(\"-\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (splitDate[1].equals(dateInfo[0]) \u0026\u0026 splitDate[2].equals(dateInfo[1])) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 4,
      "BrittonAlone": 80,
      "Zeyang-Li": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Lists all tasks on an specific date in tasketch to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class ListDateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list : list specified tasks\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"1. no parameters: list        list all tasks\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"2. td: list td       list all the tasks of today\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"3. DATE: list 25-03-19    \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"list all the tasks which are before/after 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed tasks on %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Constructor for ListDateCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ListDateCommand(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        this.specifiedDate \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function that help predicate to select specific tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirement(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] dateInfo \u003d specifiedDate.split(\"-\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (dateInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (taskDate.equals(specifiedDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (dateInfo.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            final String taskDate \u003d task.getStartDate().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            String[] splitDate \u003d taskDate.split(\"-\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (splitDate[0].equals(dateInfo[0]) \u0026\u0026 splitDate[1].equals(dateInfo[1])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirement(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, specifiedDate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 9,
      "cheahzk": 1,
      "BrittonAlone": 56,
      "Zeyang-Li": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MonthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Month command will change the current month shown on calendar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class MonthCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"month\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"m\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change the current calendar to \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"next month or previous month.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [+ / -]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" +\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d COMMAND_WORD + \": Change the current calendar to \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"next month or previous month.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [+ / -]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing %s month\u0027s calendar!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL \u003d \"Please type in + or - to indicate!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String parameter \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public MonthCommand(String c) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(c);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (c.equals(\" +\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.parameter \u003d \"next\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else if (c.equals(\" -\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.parameter \u003d \"previous\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException(MESSAGE_ILLEGAL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        model.setMonth(parameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, parameter));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!model.canRedoTaskBook()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.redoTaskBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 2,
      "Zeyang-Li": 7,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Set a reminder of the nearest tasks for user, those tasks can be specified by task category."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"remind: give reminds on specified requirement\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"1. start/ddl: Tasketch will give a reminding task list ordered by task start time or deadline.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"2. a/e/c/r/o start/ddl: Tasketch will give a reminding task list of specified category\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            + \"of tasks ordered by start time or deadline.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Constructor of RemindCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public RemindCommand(String userInput) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.arguments \u003d userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Access function of arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.arguments;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function to verify user\u0027s input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isValidCategory(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (!input.equals(\"a\") \u0026\u0026 !input.equals(\"e\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                \u0026\u0026 !input.equals(\"c\") \u0026\u0026 !input.equals(\"r\") \u0026\u0026 !input.equals(\"o\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A boolean function to verify user\u0027s input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean isValidTime(String input) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (!input.equals(\"start\") \u0026\u0026 !input.equals(\"ddl\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * A predicate function decide which task to choose"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private boolean meetRequirement(Task task, String givenCategory) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (task.getCategories().value.equals(givenCategory)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String trimmedArguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] splitedInput \u003d trimmedArguments.split(\"\\\\s\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (splitedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (!isValidTime(splitedInput[0])) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else if (splitedInput[0].equals(\"start\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                model.sortByStart();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                model.sortByEnd();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else if (splitedInput.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (!isValidCategory(splitedInput[0]) || !isValidTime(splitedInput[1])) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                if (splitedInput[1].equals(\"start\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.sortByStart();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    model.sortByEnd();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.commitTaskBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e meetRequirement(task, splitedInput[0]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return new CommandResult(\"Reminder shown!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowTimeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Lists all tasks in the task book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class ShowTimeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showtime\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"showtime : show each category\u0027s time of specified days\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"1. no parameters: showtime        show all days\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"2. DATE: showtime 25-03-19    \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"show the day 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS1 \u003d \"Shown all days\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_SUCCESS2 \u003d \"Listed day on %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"1. no parameters: showtime        show all days\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"2. DATE: showtime 25-03-19    \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"show the day 25th March, 2019\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String[] arguments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String specifiedDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ShowTimeCommand(String[] arguments) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * A boolean function used to decide predicate for list DATE command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean meetRequirementDate(Day day) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] dateInfo \u003d specifiedDate.split(\"-\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateInfo.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            final String taskDate \u003d day.getDate().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (taskDate.equals(specifiedDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (dateInfo.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            final String taskDate \u003d day.getDate().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitDate \u003d taskDate.split(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (splitDate[0].equals(dateInfo[0]) \u0026\u0026 splitDate[1].equals(dateInfo[1])) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            specifiedDate \u003d arguments[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Predicate\u003cDay\u003e predicate \u003d day -\u003e meetRequirementDate(day);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            model.updateFilteredDayList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS2, specifiedDate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimelineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the Timeline command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimelineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timeline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"time\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Arrange the tasks of the specific date \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"into a timeline and displays them according to categories.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [date]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"15-03-19\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d COMMAND_WORD + \": Arrange the tasks of the specific date \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"into a timeline and displays them according to categories.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Parameters: [date]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"15-03-19\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Timeline on %1$s has been successfully arranged!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public static final String MESSAGE_ILLEGAL \u003d \"Incorrect date format. [dd-mm-yys]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimelineCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.parameter \u003d args;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This filters the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private boolean filter(Task task, String d) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (task.getStartDate().value.equals(d)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String formattedToday \u003d formatter.format(today);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(formattedToday);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (parameter.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e filter(task, formattedToday);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, formattedToday));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Predicate\u003cTask\u003e predicate \u003d task -\u003e filter(task, this.parameter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, parameter));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DAYS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!model.canUndoTaskBook()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.undoTaskBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 2,
      "Zeyang-Li": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_ENDTIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                PREFIX_ENDTIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartTime startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Categories categories \u003d ParserUtil.parseCategories(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d new Task(name, startDate, startTime, endDate, endTime, description, categories, tagList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 26,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Used for parsing user input for clear command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ClearCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (arguments[0].equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (arguments[0].equals(\"before\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(\"before\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else if (isValidDateFormat(arguments[0])) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return new ClearCommand(arguments[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] strSplited \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (strSplited.length \u003d\u003d 2 || strSplited.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_ENDDATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Delete command parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_STARTDATE, PREFIX_STARTTIME, PREFIX_ENDDATE, PREFIX_ENDTIME, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        EditTaskDescriptor editPersonDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setDescription(ParserUtil.parseDescription"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                (argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setStartDate(ParserUtil.parseStartDate"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                (argMultimap.getValue(PREFIX_STARTDATE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STARTTIME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            editPersonDescriptor.setStartTime(ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_STARTTIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDDATE).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setEndDate(ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_ENDDATE).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENDTIME).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setEndTime(ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_ENDTIME).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            editPersonDescriptor.setCategories(ParserUtil.parseCategories(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 23,
      "cheahzk": 8,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Parses input arguments and creates a new {@code ExportCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Path filePath \u003d ParserUtil.parseFilename(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ExportCommand(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 33,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Parses the given {@code String} of arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return new FindCommand(new TaskContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 4,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            Path filePath \u003d ParserUtil.parseFilename(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * Used for parsing user input for list command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (arguments[0].equals(\"\") || arguments[0].equals(\"td\") || isValidDateFormat(arguments[0])) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return new ListCommand(arguments);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String[] strSplit \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (strSplit.length \u003d\u003d 2 || strSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 40,
      "Zeyang-Li": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MonthCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Parser for changing calendar view."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class MonthCommandParser implements Parser\u003cMonthCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public MonthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new MonthCommand(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MonthCommand.MESSAGE_ILLEGAL), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidPath;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidXmlFilename;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.model.Filetype.isValidFiletype;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_FILENAME \u003d \"Filename is invalid.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_INVALID_EXTENSION \u003d \"Filename must end with \\\".xml\\\".\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String startDate} into a {@code StartDate}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static StartDate parseStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedStartDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartDate.isValidStartDate(trimmedStartDate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new StartDate(trimmedStartDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String startTime} into a {@code StartTime}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code startTime} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static StartTime parseStartTime(String startTime) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedStartTime \u003d startTime.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartTime.isValidStartTime(trimmedStartTime)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new StartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String endDate} into a {@code EndDate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code endDate} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static EndDate parseEndDate(String endDate) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedEndDate \u003d endDate.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndDate.isValidEndDate(trimmedEndDate)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new EndDate(trimmedEndDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String endTime} into a {@code EndTime}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code endTime} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static EndTime parseEndTime(String endTime) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedEndTime \u003d endTime.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndTime.isValidEndTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new EndTime(trimmedEndTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Categories parseCategories(String categories) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String trimmedCategories \u003d categories.trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Categories.isValidCategories(trimmedCategories)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Categories(trimmedCategories);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses a {@code String filetype} into a {@code Filetype}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the given {@code String filetype} is invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Filetype parseFiletype(String filetype) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String trimmedFiletype \u003d filetype.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidFiletype(trimmedFiletype)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(Filetype.MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return new Filetype(trimmedFiletype);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Parses a String with white space into a String without white space."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static String parseCategory(String s) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        String trimmedCategory \u003d s.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return trimmedCategory;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses a {@code String filename} into a {@code Path}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws ParseException if the given {@code filename} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Path parseFilename(String filename) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidPath(trimmedFilename)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!isValidXmlFilename(trimmedFilename)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EXTENSION);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return Paths.get(\"data\", trimmedFilename);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 74,
      "BrittonAlone": 10,
      "Zeyang-Li": 42,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowTimeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Used for parsing user input for list command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class ShowTimeCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parse function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] arguments \u003d userInput.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (arguments.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (arguments[0].equals(\"\") || arguments[0].equals(\"st\") || isValidDateFormat(arguments[0])) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return new ShowTimeCommand(arguments);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowTimeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Check if user input is of the correct format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isValidDateFormat(String str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String[] strSplit \u003d str.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (strSplit.length \u003d\u003d 2 || strSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "//The command created for Tasketch:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case MonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case MonthCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new MonthCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case TimelineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case TimelineCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new TimelineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            return new RemindCommand(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ShowTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ShowTimeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new ShowTimeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExportAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ExportAllCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cString\u003e listOfCommands \u003d new WrongCommandSuggestion().getSuggestions(commandWord);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (listOfCommands \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                String suggestionsToString \u003d StringUtil.join(listOfCommands, \", \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \u0027\\n\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                        + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, suggestionsToString));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "jingchen-z": 18,
      "cheahzk": 12,
      "BrittonAlone": 4,
      "Zeyang-Li": 24,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimelineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.commands.TimelineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the Timeline parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimelineCommandParser implements Parser\u003cTimelineCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimelineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return new TimelineCommand(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimelineCommand.MESSAGE_ILLEGAL), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/InputCommandSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.logic.commands.ShowTimeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Checks whether input is valid in the commands after each key press"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class InputCommandSuggestion implements Suggestion {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String NO_REQUIRED_PARAMETERS \u003d \"This command does not require any parameters.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String INVALID_COMMAND_PARAMETERS \u003d \"There are no available parameters!\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static Trie commandList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static int wrongCharOverflow \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList \u003d new Trie();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ImportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.insert(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        commandList.insert(ShowTimeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Gets a list of suggested commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userInput the current string to check for suggested commands"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return ArrayList of possible commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ArrayList\u003cString\u003e getSuggestions(String userInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String command \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return commandList.getListOfWords(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Checks whether current character input is valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key current key input in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return true if current word is valid and there are no overflows of wrong characters"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *         false if current word typed is invalid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkValidCharacter(char key) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        boolean isValid \u003d commandList.search(key);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (Character.isLetter(key) \u0026\u0026 !isValid) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            wrongCharOverflow++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return isValid \u0026\u0026 (wrongCharOverflow \u003d\u003d 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Checks whether string input is valid"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key string to check input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return true if the key is in the Trie"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean checkValidString(String key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return commandList.search(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Moves search crawler to its parent if word is valid"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * else, it removes the overflow character count."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return true when current substring is valid, false if current substring is invalid"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean removeSearchCharacter() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (wrongCharOverflow \u003e 1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            wrongCharOverflow--;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else if (wrongCharOverflow \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            wrongCharOverflow--;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            commandList.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Resets the search crawler to the root node"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void resetSearchCrawler() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        commandList.resetSearchCrawlerToRoot();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Gets the respective command parameters from input command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param command the command to get parameters"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return command parameters"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String getCommandParameters(String command) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return AddCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return DeleteCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return EditCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return ExportCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return FindCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return ClearCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return ImportCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return ListCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case ShowTimeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return ShowTimeCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case ExportAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return NO_REQUIRED_PARAMETERS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return INVALID_COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "Zeyang-Li": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/StringSimilarity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Finds how similar two given strings are."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class StringSimilarity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int ARRAY_PADDING \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int DELETION_COST \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int ADDITION_COST \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int SUBSTITUTION_COST \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Finds the edit distance between two strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand the command the user has entered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param commandToCheck the reference command to check the edit difference in string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return {@code int} the edit distance of the two strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public int editDistance(String userCommand, String commandToCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int[][] distanceArray \u003d new int[userCommand.length() + ARRAY_PADDING][commandToCheck.length() + ARRAY_PADDING];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length() + ARRAY_PADDING; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            distanceArray[i][0] \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int j \u003d 0; j \u003c commandToCheck.length() + ARRAY_PADDING; j++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            distanceArray[0][j] \u003d j;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (int j \u003d 0; j \u003c commandToCheck.length(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (userCommand.charAt(i) \u003d\u003d commandToCheck.charAt(j)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d distanceArray[i][j];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d minimum("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i + ARRAY_PADDING][j] + DELETION_COST,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i][j + ARRAY_PADDING] + ADDITION_COST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                            distanceArray[i][j] + SUBSTITUTION_COST"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return distanceArray[userCommand.length()][commandToCheck.length()];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private int minimum(int a, int b, int c) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return Math.min(Math.min(a, b), c);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/Suggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * API of the suggestion component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public interface Suggestion {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Executes getSuggestion"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param input any user input that requires suggestions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return a list of possible suggestions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    List\u003cString\u003e getSuggestions(String input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/Trie.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Trie data structure for quick searching of valid strings"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class Trie {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Node data structure. Component of a Trie data structure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static class Node {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private HashMap\u003cCharacter, Node\u003e children;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private Node parent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private boolean isEndOfWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private Node() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            isEndOfWord \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            parent \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private Node getChild(char key) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return children.get(key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private Set\u003cCharacter\u003e getChildren() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return children.keySet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private void putChild(char key, Node childNode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            children.put(key, childNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            childNode.parent \u003d this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private void setEndOfWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            this.isEndOfWord \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        private boolean getIsEndOfWord() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return isEndOfWord;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Node rootNode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Node searchCrawler;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Trie() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        rootNode \u003d new Node();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        resetSearchCrawlerToRoot();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Allows insertion of a new String into the data structure"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key Word to be stored into the data structure"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void insert(String key) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char curChar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int level \u003d 0; level \u003c key.length(); level++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            curChar \u003d key.charAt(level);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (crawler.getChild(curChar) \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                crawler.putChild(curChar, new Node());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            crawler \u003d crawler.getChild(curChar);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        crawler.setEndOfWord();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Searches whether a key character exists in the data structure at that position of the key"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key character to check if word exists at that character order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return true if it exists, false if it doesn\u0027t exist"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean search(char key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (searchCrawler.getChild(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            searchCrawler \u003d searchCrawler.getChild(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Overloaded operator, allows for searching a string whether it exists in the data structure"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key string to be searched"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return whether the string exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean search(String key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char curChar;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int level \u003d 0; level \u003c key.length(); level++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            curChar \u003d key.charAt(level);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (crawler.getChild(curChar) \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            crawler \u003d crawler.getChild(curChar);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Moves the search crawler back to its parent."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void moveSearchCrawlerToParent() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (searchCrawler.parent !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            searchCrawler \u003d searchCrawler.parent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Resets search crawler to root"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void resetSearchCrawlerToRoot() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        searchCrawler \u003d rootNode;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Checks if current node points to the end of the word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return true if it is at the end of the word"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean getIsEndOfWord() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return searchCrawler.getIsEndOfWord();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Uses DFS to find all the possible words given the current prefix string"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param key prefix string to find words"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return ArrayList of possible words"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfWords(String key) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Node subStringNode \u003d getToSubStringNode(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        findChildName(key, subStringNode, result);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * DFS to find child. Adds substring into the result when is at the end of word."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Else, it continues traversing down the tree to find the end of the word, and appends"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * the current substring with the child key."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param curSubString current substring formed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param parent current parent node"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param result result of a list of words from current substring and node."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void findChildName(String curSubString, Node parent, List\u003cString\u003e result) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (parent \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (parent.getIsEndOfWord()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            result.add(curSubString);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (char child: parent.getChildren()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            findChildName(curSubString + child, parent.getChild(child), result);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Node getToSubStringNode(String key) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (char child: key.toCharArray()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            crawler \u003d crawler.getChild(child);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (crawler \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return crawler;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/WrongCommandSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Suggests a command with the closest match to the inputted string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class WrongCommandSuggestion implements Suggestion {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String SUGGESTION_HEADER \u003d \"Do you mean: %1$s?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String NO_SUGGESTION \u003d \"No suggestions available.Try \u0027help\u0027\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final int WORD_DISTANCE_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static final String[] CommandList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Initialising the CommandList Array"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CommandList \u003d new String[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ExportAllCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ExportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ImportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Check the alphabets occurrence in command input and stores it as a String."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns a string of the a;phabet occurrence."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand A {@code String} object of the user\u0027s command input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return A {@code String} object containing the suggestion header and suggested similar command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String checkOcc(String userCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char[][] resultArr \u003d new char[26][2];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        char [] stringArr \u003d userCommand.toCharArray();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (char check \u003d \u0027a\u0027; check \u003c\u003d \u0027z\u0027; check++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            resultArr[count][0] \u003d check;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            resultArr[count][1] \u003d \u00270\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c stringArr.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (int j \u003d 0; j \u003c 26; j++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (stringArr[i] \u003d\u003d resultArr[j][0]) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    resultArr[j][1]++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int j \u003d 0; j \u003c 26; j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (resultArr[j][1] !\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                result \u003d result + resultArr[j][0] + resultArr[j][1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Parses the command input and passes it to the getNearestCommand for comparison of commands."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns formatted string of the suggestion header and closest matched command, else returns nothing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param userCommand A {@code String} object of the user\u0027s command input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return A {@code String} object containing the suggestion header and suggested similar command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public List\u003cString\u003e getSuggestions(String userCommand) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String userCommandInLowerCase \u003d userCommand.toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        String alphabetOcc \u003d checkOcc(userCommandInLowerCase);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ArrayList\u003cString\u003e suggestion \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (String commands: CommandList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            String commandOcc \u003d checkOcc(commands);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (commandOcc.equals(alphabetOcc)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                suggestion.add(commands);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (suggestion.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            List\u003cString\u003e suggestedCommand \u003d getNearestCommands(userCommandInLowerCase);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return suggestedCommand;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return suggestion;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private List\u003cString\u003e getNearestCommands(String userCommand) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ArrayList\u003cString\u003e[] commandEditDistances \u003d new ArrayList[WORD_DISTANCE_LIMIT];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (int i \u003d 0; i \u003c WORD_DISTANCE_LIMIT; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            commandEditDistances[i] \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (userCommand.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            for (String commands: CommandList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                if (commands.charAt(0) \u003d\u003d userCommand.charAt(0)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    commandEditDistances[1].add(commands);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            for (String commands: CommandList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                int distance \u003d new StringSimilarity().editDistance(userCommand, commands);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                if (distance \u003c WORD_DISTANCE_LIMIT) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    commandEditDistances[1].add(commands);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (ArrayList\u003cString\u003e suggestedCommands: commandEditDistances) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (!suggestedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                return suggestedCommands;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 9,
      "Zeyang-Li": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Filetype.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Represents filetype available for import/export."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFiletype(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class Filetype {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String MESSAGE_FILETYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            \"Filetype can take either \\\"csv\\\" or \\\"vcf\\\", and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * The first character of the filetype must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static final String FILETYPE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Filetypes that can be used to export contacts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public enum Extension {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        csv, vcf"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Constructs a {@code Filetype} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param filetype a string representing the filetype."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Filetype(String filetype) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        checkArgument(isValidFiletype(filetype), MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        value \u003d filetype;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if a given string is a valid filetype."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static boolean isValidFiletype(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return test.matches(FILETYPE_VALIDATION_REGEX) \u0026\u0026 isValidExtension(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if a given string matches any of the valid Extension."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static boolean isValidExtension(String extension) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return contains(Extension.class, extension);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Reused from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // http://www.java2s.com/Tutorials/Java/Data_Type_How_to/String/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    // Check_if_enum_contains_a_given_string.html with minor modifications"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns true if an {@code enumClass} contains a specific {@code value}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private static \u003cE extends Enum\u003cE\u003e\u003e boolean contains(Class\u003cE\u003e enumClass,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                                                        String value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return EnumSet.allOf(enumClass)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                    .contains(Enum.valueOf(enumClass, value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                || (other instanceof Filetype // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 value.equals(((Filetype) other).value)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Predicate\u003cDay\u003e PREDICATE_SHOW_ALL_DAYS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the user prefs\u0027 task book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTaskBookFilePath(Path taskBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces task book data with the data in {@code taskBook}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTaskBook(ReadOnlyTaskBook taskBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns the TaskBook */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyTaskBook getTaskBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must exist in the task book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void deleteTaskList(List\u003cTask\u003e targets);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Sort the task list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void sortByStart();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    void sortByEnd();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code task} must not already exist in the task book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the task book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered day list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getFilteredDayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates the filter of the filtered day list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void updateFilteredDayList(Predicate\u003cDay\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the model has previous task book states to restore."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean canUndoTaskBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the model has undone task book states to restore."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    boolean canRedoTaskBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the model\u0027s task book to its previous state."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void undoTaskBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the model\u0027s task book to its previously undone state."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void redoTaskBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves the current task book state for undo/redo."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void commitTaskBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selected day in the filtered day list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no day is selected."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ReadOnlyProperty\u003cDay\u003e selectedDayProperty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the selected task in the filtered task list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Task getSelectedTask();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the selected day in the filtered day list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void setSelectedDay(Day day);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the current month in GUI."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    void setMonth(String month);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Imports the persons from a xml at {@code importFilePath}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void importTasksFromTaskBook(Path importFilePath) throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Adds all the persons in {@code addressBookImported} to the current address book."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @return hasChanged is true if the addressBook is modified, returns false otherwise."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    boolean addTasksToTaskBook(ReadOnlyTaskBook addressBookToImported);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Exports the current filtered person list to a xml file at {@code exportFilePath}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void exportFilteredTaskBook(Path exportFilePath) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Exports the current address book state to a .csv file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void exportTaskBook() throws IOException;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Exports the given person to a .csv file."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void exportTask(Task task) throws IOException;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 59,
      "jingchen-z": 2,
      "BrittonAlone": 4,
      "Zeyang-Li": 21,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.CsvWriter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.Export;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.ExportManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.Import;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.export.ImportManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents the in-memory model of the tasketch data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final VersionedTaskBook versionedTaskBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final FilteredList\u003cDay\u003e filteredDays;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final SimpleObjectProperty\u003cDay\u003e selectedDay \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Comparator\u003cTask\u003e startComparator \u003d new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sdO1 \u003d o1.getStartDate().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sd02 \u003d o2.getStartDate().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo1 \u003d sdO1.split(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo2 \u003d sd02.split(\"-\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate1 \u003d dateInfo1[2] + dateInfo1[1] + dateInfo1[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate2 \u003d dateInfo2[2] + dateInfo2[1] + dateInfo2[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (finalDate1.compareTo(finalDate2) !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return finalDate1.compareTo(finalDate2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return o1.getStartTime().toString().compareTo(o2.getStartTime().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Comparator\u003cTask\u003e endComparator \u003d new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sdO1 \u003d o1.getEndDate().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String sd02 \u003d o2.getEndDate().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo1 \u003d sdO1.split(\"-\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String[] dateInfo2 \u003d sd02.split(\"-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate1 \u003d dateInfo1[2] + dateInfo1[1] + dateInfo1[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            String finalDate2 \u003d dateInfo2[2] + dateInfo2[1] + dateInfo2[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (finalDate1.compareTo(finalDate2) !\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return finalDate1.compareTo(finalDate2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                return o1.getStartTime().toString().compareTo(o2.getStartTime().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Initializes a ModelManager with the given taskBook and userPrefs."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ModelManager(ReadOnlyTaskBook taskBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(taskBook, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        logger.fine(\"Initializing with task book: \" + taskBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook \u003d new VersionedTaskBook(taskBook);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskBook.getTaskList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays \u003d new FilteredList\u003c\u003e(versionedTaskBook.getDayList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays.addListener(this::ensureSelectedDayIsValid);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this(new TaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * @return startComparator."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Comparator\u003cTask\u003e getStartComparator() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return startComparator;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * @return endComparator."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Comparator\u003cTask\u003e getEndComparator() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return endComparator;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return userPrefs.getTaskBookFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath(Path taskBookFilePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBookFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(taskBookFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBook(ReadOnlyTaskBook taskBook) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.resetData(taskBook);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyTaskBook getTaskBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private void indicateTaskBookChanged() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        new TaskBookChangedEvent(versionedTaskBook);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.hasTask(task);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.removeTask(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void deleteTaskList(List\u003cTask\u003e targets) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        for (Task target : targets) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            versionedTaskBook.removeTask(target);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortByStart() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        versionedTaskBook.sortTaskByDate(startComparator);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortByEnd() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        versionedTaskBook.sortTaskByDate(endComparator);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.addTask(task);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        updateFilteredDayList(PREDICATE_SHOW_ALL_DAYS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.setTask(target, editedTask);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code versionedTaskBook}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Day List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Day} backed by the internal list of"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code versionedTaskBook}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getFilteredDayList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filteredDays;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void updateFilteredDayList(Predicate\u003cDay\u003e predicate) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        filteredDays.setPredicate(predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canUndoTaskBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.canUndo();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canRedoTaskBook() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.canRedo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undoTaskBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.undo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redoTaskBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.redo();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commitTaskBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        versionedTaskBook.commit();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task getSelectedTask() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedTask.getValue();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (task !\u003d null \u0026\u0026 !filteredTasks.contains(task)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.setValue(task);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected day \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ReadOnlyProperty\u003cDay\u003e selectedDayProperty() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return selectedDay;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setSelectedDay(Day day) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (day !\u003d null \u0026\u0026 !filteredDays.contains(day)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedDay.setValue(day);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setMonth(String month) {}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Ensures {@code selectedTask} is a valid task in {@code filteredTasks}."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void ensureSelectedTaskIsValid(ListChangeListener.Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // null is always a valid selected task, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedTaskReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTask.getValue());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedTaskReplaced) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTask.getValue());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedTask.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedTaskRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    .anyMatch(removedTask -\u003e selectedTask.getValue().isSameTask(removedTask));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedTaskRemoved) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedTask.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void importTasksFromTaskBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Import importManager \u003d new ImportManager(importFilePath);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ReadOnlyTaskBook taskBookImported \u003d importManager.readTaskBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        boolean hasChanged \u003d addTasksToTaskBook(taskBookImported);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (hasChanged) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            indicateTaskBookChanged();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean addTasksToTaskBook(ReadOnlyTaskBook addressBookImported) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        ObservableList\u003cTask\u003e tasks \u003d addressBookImported.getTaskList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        AtomicBoolean hasChanged \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        tasks.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            // TODO: explain why this instead of addPerson() above in developer guide (indicate ab changed at the end)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            if (!hasTask(task)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                hasChanged.set(true);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                versionedTaskBook.addTask(task);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        });"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return hasChanged.get();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void exportFilteredTaskBook(Path exportFilePath) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        Export export \u003d new ExportManager(getFilteredTaskList(), exportFilePath);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        export.saveFilteredTasks();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void exportTaskBook() throws IOException {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CsvWriter csvWriter \u003d new CsvWriter(versionedTaskBook.getTaskList(), userPrefs.getExportCsvFilePath());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        csvWriter.write();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void exportTask(Task task) throws IOException {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        CsvWriter csvWriter \u003d new CsvWriter(task, userPrefs.getExportCsvFilePath());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        csvWriter.write();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Ensures {@code selectedDay} is a valid day in {@code filteredDays}."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void ensureSelectedDayIsValid(ListChangeListener.Change\u003c? extends Day\u003e change) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // null is always a valid selected day, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedDayReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedDay.getValue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedDayReplaced) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Update selectedDay to its new value."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDay.getValue());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedDay.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            boolean wasSelectedDayRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    .anyMatch(removedDay -\u003e selectedDay.getValue().isSameDay(removedDay));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (wasSelectedDayRemoved) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // Select the day that came before it in the list,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                selectedDay.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return versionedTaskBook.equals(other.versionedTaskBook)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 filteredDays.equals(other.filteredDays)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedTask.get(), other.selectedTask.get())"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedDay.get(), other.selectedDay.get());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 140,
      "jingchen-z": 3,
      "BrittonAlone": 62,
      "Zeyang-Li": 65,
      "-": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Unmodifiable view of an task book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public interface ReadOnlyTaskBook extends Observable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    ObservableList\u003cDay\u003e getDayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Map\u003cDate, Day\u003e getDayMap();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.UniqueDayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Wraps all data at the task-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBook implements ReadOnlyTaskBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final UniqueDayList days;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Map\u003cDate, Day\u003e dayMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days \u003d new UniqueDayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Creates an TaskBook using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook(ReadOnlyTaskBook toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDatas(List\u003cTask\u003e tasks, List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.days.setDays(days);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetDayMap(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Reset the dayMap after reset data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetDayMap(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayMap.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String dateS \u003d t.getStartDate().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String dateE \u003d t.getEndDate().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Date date \u003d new Date(dateS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    dayMap.put(date, new Day(date));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Day a \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    days.add(a);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(date, d);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(d);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                d.addCategory(t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, d);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                addDay(d);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Resets the existing data of this {@code TaskBook} with {@code newData}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void resetData(ReadOnlyTaskBook newData) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        setDatas(newData.getTaskList(), newData.getDayList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a day with the same identity as {@code day} exists in the task book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean hasDay(Day day) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return days.contains(day);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a task to the task book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must not already exist in the task book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateS \u003d t.getStartDate().toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateE \u003d t.getEndDate().toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(dateS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, new Day(date));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day a \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(a);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(date, d);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.addCategory(t);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.put(date, d);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addDay(d);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Add day into uniqueDayList"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addDay(Day d) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.add(d);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the task book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String targetDateS \u003d target.getStartDate().toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String targetDateE \u003d target.getEndDate().toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedDateS \u003d editedTask.getStartDate().toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedDateE \u003d editedTask.getEndDate().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 !editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(targetDateS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(date, d);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.removeCategory(target);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!d.isDayEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(d);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, d);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (!targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(editedDateS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, new Day(date));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day a \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.remove(date, a);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(a);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayMap.put(date, a);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.remove(date);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.addCategory(editedTask);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addDay(d);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            dayMap.put(date, d);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (targetDateE.equalsIgnoreCase(targetDateS) \u0026\u0026 editedDateE.equalsIgnoreCase(editedDateS)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date targetStartDate \u003d new Date(targetDateS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date editedStartDate \u003d new Date(editedDateS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!targetStartDate.equals(editedStartDate)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (!dayMap.containsKey(editedStartDate)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    dayMap.put(editedStartDate, new Day(editedStartDate));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day eD \u003d dayMap.get(editedStartDate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(eD);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(eD);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                eD.addCategory(editedTask);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(eD);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                Day tD \u003d dayMap.get(targetStartDate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.remove(tD);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                tD.removeCategory(target);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(tD);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                indicateModified();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day tD \u003d dayMap.get(targetStartDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(tD);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            tD.editCategory(target, editedTask);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addDay(tD);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes {@code key} from this {@code TaskBook}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code key} must exist in the task book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateS \u003d key.getStartDate().toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String dateE \u003d key.getEndDate().toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (dateS.equalsIgnoreCase(dateE)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Date date \u003d new Date(dateS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Day d \u003d dayMap.get(date);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            days.remove(d);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            d.removeCategory(key);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (!d.isDayEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                days.add(d);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            tasks.remove(key);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            indicateModified();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Sort tasks in the storage by given comparator."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortTaskByDate(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        tasks.sortByDate(comparator);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Notifies listeners that the task book has been modified."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\" + days.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + \" days\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e getDayList() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return days.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Map\u003cDate, Day\u003e getDayMap() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this.dayMap;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof TaskBook // instanceof handles nulls"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskBook) other).tasks));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 305,
      "BrittonAlone": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path taskBookFilePath \u003d Paths.get(\"data\" , \"taskbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path daysKeeperFilePath \u003d Paths.get(\"data\" , \"dayskeeper.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path exportCsvFilePath \u003d Paths.get(\"data\", \"tasketch.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        setTaskBookFilePath(newUserPrefs.getTaskBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTaskBookFilePath(Path taskBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBookFilePath \u003d taskBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public Path getExportCsvFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return exportCsvFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDaysKeeperFilePath(Path daysKeeperFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(daysKeeperFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.daysKeeperFilePath \u003d daysKeeperFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookFilePath.equals(o.taskBookFilePath)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 daysKeeperFilePath.equals(o.daysKeeperFilePath)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "                \u0026\u0026 exportCsvFilePath.equals(o.exportCsvFilePath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookFilePath.equals(o.taskBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(guiSettings, taskBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(\"\\nLocal taskBook data file location : \" + taskBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 17,
      "Zeyang-Li": 7,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * {@code TaskBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class VersionedTaskBook extends TaskBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cReadOnlyTaskBook\u003e taskBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public VersionedTaskBook(ReadOnlyTaskBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.add(new TaskBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves a copy of the current {@code TaskBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.add(new TaskBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStateList.subList(currentStatePointer + 1, taskBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the task book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(taskBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Restores the task book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        resetData(taskBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code undo()} has task book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code redo()} has task book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return currentStatePointer \u003c taskBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof VersionedTaskBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        VersionedTaskBook otherVersionedTaskBook \u003d (VersionedTaskBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return super.equals(otherVersionedTaskBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 taskBookStateList.equals(otherVersionedTaskBook.taskBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTaskBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super(\"Current state pointer at start of taskBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super(\"Current state pointer at end of taskBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Academic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s academic in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Academic extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Academic time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\" + \"\\\\.\" + \"\\\\d*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Academic(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Academic // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Academic) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * To extend an object to category."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Cca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s cca in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Cca extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Cca time should only contain numbers \u0026 \u0027.\u0027, ie: 3.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Cca(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Cca // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Cca) other).value)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s date in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Day.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a day in the task book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String dafault \u003d \"0.0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Academic academic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Entertainment entertainment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Cca cca;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Errand errand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Other other;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day(Date date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d new Academic(dafault);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d new Entertainment(dafault);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d new Cca(dafault);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d new Errand(dafault);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d new Other(dafault);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day(Date date, Academic academic, Entertainment entertainment, Cca cca, Errand errand, Other other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d academic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d entertainment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d errand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Academic getAcademic() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return academic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Entertainment getEntertainment() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return entertainment;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Cca getCca() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return cca;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Errand getErrand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return errand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Other getOther() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To add a time into the category for each task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void addCategory(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeStart \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeEnd \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String category \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ACADEMIC:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            academic.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_CCA:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            cca.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ENTERTAINMENT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            entertainment.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ERRAND:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            errand.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_OTHER:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            other.addTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To remove a time into the category for each task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void removeCategory(Task task) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeStart \u003d task.getStartTime().value;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String timeEnd \u003d task.getEndTime().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String category \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        switch(category) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ACADEMIC:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            academic.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_CCA:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            cca.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ENTERTAINMENT:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            entertainment.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_ERRAND:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            errand.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        case Categories.CAT_OTHER:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            other.removeTime(calculateTime(timeStart, timeEnd));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To edit a time into the category for each task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void editCategory(Task task, Task editedTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String taskCategory \u003d task.getCategories().value;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String editedTaskCategory \u003d editedTask.getCategories().value;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (taskCategory.equals(editedTaskCategory)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            removeCategory(task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addCategory(editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            removeCategory(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            addCategory(editedTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To calculate time into the category for each task"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double calculateTime(String start, String end) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Double result \u003d Double.valueOf(end) - Double.valueOf(start);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(result * scale) / scale;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * To check whether each categories for a task is empty"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isDayEmpty() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double academicTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double ccaTime;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double entertainmentTime;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double errandTime;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double otherTime;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academicTime \u003d academic.getTimeDouble();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ccaTime \u003d cca.getTimeDouble();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainmentTime \u003d entertainment.getTimeDouble();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errandTime \u003d errand.getTimeDouble();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        otherTime \u003d other.getTimeDouble();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (academicTime \u003d\u003d 0 \u0026\u0026 ccaTime \u003d\u003d 0 \u0026\u0026 entertainmentTime \u003d\u003d 0 \u0026\u0026 errandTime \u003d\u003d 0 \u0026\u0026 otherTime \u003d\u003d 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both days of the same topic have at least one other identity field that is the same."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a weaker notion of equality between two days."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherDay !\u003d null"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 otherDay.getDate().equals(getDate());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both days have the same identity and data fields."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof Day)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Day otherDay \u003d (Day) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherDay.getDate().equals(getDate());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(date, academic, entertainment, cca, errand, other);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        builder.append(getDate())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" AcademicTime: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getAcademic().getTime())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EntertainmentTime: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEntertainment().getTime())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" CcaTime: \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getCca().getTime())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" ErrandTime: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getErrand().getTime())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" OtherTime: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getOther().getTime());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 234
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/DayContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Tests that a {@code Day}\u0027s {@code date} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayContainsKeywordsPredicate implements Predicate\u003cDay\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean test(Day day) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(day.getDate().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof DayContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 keywords.equals(((DayContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Entertainment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s entertainment in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Entertainment extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Entertainment time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Entertainment(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Entertainment // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Entertainment) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Errand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s errand in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Errand extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Errand time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d*\" + \"\\\\.\" + \"\\\\d*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Errand(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Errand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Errand) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/Other.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Day\u0027s other in the task book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Other extends Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Other time should only contain numbers \u0026 \u0027.\u0027, ie: 1.0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Academic}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Other(String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adding time after update"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String addTime(double result) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t +\u003d result;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deducting time after update"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @return value"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String removeTime(double result) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t -\u003d result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d String.valueOf(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Other // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Other) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/UniqueDayList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.exceptions.DuplicateDayException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A list of days that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A day is considered unique by comparing using {@code Day#isSameDay(Day)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * days uses Day#isSameDay(Day) for equality so as to ensure that the day being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * unique in terms of identity in the UniqueDayList. However, the removal of a day uses Day#equals(Day) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * as to ensure that the day with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * @see Day#isSameDay(Day)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class UniqueDayList implements Iterable\u003cDay\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cDay\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cDay\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the list contains an equivalent day as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean contains(Day toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a day to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The day must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void add(Day toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes the equivalent day from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The day must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void remove(Day toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Clear all the days in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDays(UniqueDayList replacement) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of this list with {@code days}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code days} must not contain duplicate days."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setDays(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(days);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!daysAreUnique(days)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateDayException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(days);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cDay\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Iterator\u003cDay\u003e iterator() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof UniqueDayList // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDayList) other).internalList));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean daysAreUnique(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c days.size() - 1; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c days.size(); j++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (days.get(i).isSameDay(days.get(j))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DayNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/day/exceptions/DuplicateDayException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation will result in duplicate Days (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DuplicateDayException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DuplicateDayException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(\"Operation would result in duplicate days\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Categories.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s category in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategories(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Categories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ACADEMIC \u003d \"a\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_CCA \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ENTERTAINMENT \u003d \"e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_ERRAND \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String CAT_OTHER \u003d \"o\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Category should contains 1 alphabet\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Should be a (academic), c (cca), e (entertainment), r (errand), o (other)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[acero]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code Categories}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param categories A valid categories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Categories(String categories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidCategories(categories), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d categories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (value.equalsIgnoreCase(CAT_ACADEMIC)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Academic\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_CCA)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Cca\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_ENTERTAINMENT)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Entertainment\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_ERRAND)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Errand\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else if (value.equalsIgnoreCase(CAT_OTHER)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Other\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            fullName \u003d \"Invalid\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidCategories(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Categories // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Categories) other).value)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s description in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/EndDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s endDate in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEndDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class EndDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"End date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartDate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidEndDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidEndDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof EndDate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((EndDate) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/EndTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startTime in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEndTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class EndTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Time should only contain numbers \u0026 \u0027.\u0027, 2 digits\u0027.\u00272digits, ie: 13.00\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Hours should only contain numbers range from 00 to 23\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Minutes should only contain numbers range from 00 to 59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"\\\\.\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndTime(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidEndTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidEndTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitTime \u003d test.split(\"\\\\.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (hour \u003c 0 || hour \u003e 23) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (minute \u003c 0 || minute \u003e 59) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Get double version of time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof EndTime // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((EndTime) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s topic in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Task name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The first character of the topic must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid topic."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/StartDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startDate in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class StartDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Start date should only contain numbers \u0026 -, 2 digits-2 digits-2digits, ie: 12-03-19\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Day should only contain numbers range from 01 to 31\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Month should only contain numbers range from 01 to 12\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartDate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartDate(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidStartDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidStartDate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] spiltDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int day \u003d Integer.parseInt(spiltDate[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int month \u003d Integer.parseInt(spiltDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof StartDate // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((StartDate) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/StartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task\u0027s startTime in the task book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class StartTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \"Time should only contain numbers \u0026 \u0027.\u0027, 2 digits\u0027.\u00272digits, ie: 13.00\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Hours should only contain numbers range from 00 to 23\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            + \"Minutes should only contain numbers range from 00 to 59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"\\\\.\" + \"\\\\d{2}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code StartTime}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param time A valid time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartTime(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        checkArgument(isValidStartTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if a given string is a valid start time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static boolean isValidStartTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            String[] splitTime \u003d test.split(\"\\\\.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int hour \u003d Integer.parseInt(splitTime[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            int minute \u003d Integer.parseInt(splitTime[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (hour \u003c 0 || hour \u003e 23) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (minute \u003c 0 || minute \u003e 59) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Get double version of time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public double getTimeDouble(String time) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double t;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        double scale \u003d Math.pow(10, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        t \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Math.round(t * scale) / scale;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof StartTime // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 value.equals(((StartTime) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a Task in the task book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final StartDate startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final EndDate endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final StartTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final EndTime endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Categories categories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task(Name name, StartDate startDate, StartTime startTime, EndDate endDate, EndTime endTime,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Description description, Categories categories, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, startTime, endTime, description, categories, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartDate getStartDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndDate getEndDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StartTime getStartTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public EndTime getEndTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Categories getCategories() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Objects.hash(name, startDate, startTime, endDate, endTime, description, categories, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" StartDate: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" StartTime: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EndDate: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" EndTime: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(getCategories().value)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof TaskContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void sortByDate(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cheahzk": 138,
      "BrittonAlone": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Academic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Cca;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Entertainment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Errand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Other;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Contains utility methods for populating {@code TaskBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Day SAMPLE_DAYS \u003d new Day(new Date(\"15-03-19\"), new Academic(\"3.0\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Entertainment(\"0.0\"), new Cca(\"0.0\"), new Errand(\"0.0\"), new Other(\"0.0\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Task(new Name(\"Revise CS2113T\"), new StartDate(\"15-03-19\"), new StartTime(\"14.00\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new EndDate(\"15-03-19\"), new EndTime(\"17.00\"), new Description(\"Class diagram\"), new Categories(\"a\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                getTagSet(\"CS2113T\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Task(new Name(\"Do CS2101\"), new StartDate(\"17-03-19\"), new StartTime(\"10.00\"), new EndDate(\"17-03-19\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new EndTime(\"14.00\"), new Description(\"User Guide\"), new Categories(\"a\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                getTagSet(\"CS2101\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Day[] getSampleDays() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Day[] {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Day(new Date(\"15-03-19\"), new Academic(\"3.0\"), new Entertainment(\"0.0\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    new Cca(\"0.0\"), new Errand(\"0.0\"), new Other(\"0.0\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            new Day(new Date(\"17-03-19\"), new Academic(\"2.0\"), new Entertainment(\"0.0\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    new Cca(\"0.0\"), new Errand(\"0.00\"), new Other(\"0.0\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static ReadOnlyTaskBook getSampleTaskBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook sampleTb \u003d new TaskBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            sampleTb.addTask(sampleTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return sampleTb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 42,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Academic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Entertainment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Errand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Other;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "class JsonAdaptedDay {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Date\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String academic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String cca;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String entertainment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String errand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String other;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"date\") String date, @JsonProperty(\"AcademicTime\") String academic,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"ccaTime\") String cca,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"entertainmentTime\") String entertainment,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                          @JsonProperty(\"errandTime\") String errand, @JsonProperty(\"otherTime\") String other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.academic \u003d academic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.entertainment \u003d entertainment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.errand \u003d errand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.other \u003d other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academic \u003d source.getAcademic().getTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cca \u003d source.getCca().getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainment \u003d source.getEntertainment().getTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errand \u003d source.getErrand().getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        other \u003d source.getOther().getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this Jackson-friendly adapted day object into the model\u0027s {@code Day} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted day."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (academic \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Academic.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Academic.isValidTime(academic)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Academic.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Academic modelAcademic \u003d new Academic(academic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (cca \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Cca.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Cca.isValidTime(cca)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Cca.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Cca modelCca \u003d new Cca(cca);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (entertainment \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Entertainment.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Entertainment.isValidTime(entertainment)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Entertainment.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Entertainment modelEntertainment \u003d new Entertainment(entertainment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (errand \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Errand.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Errand.isValidTime(errand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Errand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Errand modelErrand \u003d new Errand(errand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Other.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Other.isValidTime(other)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Other.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Other modelOther \u003d new Other(other);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Day(modelDate, modelAcademic, modelEntertainment, modelCca, modelErrand, modelOther);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Name\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final String categories;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"start date\") String startDate,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"start time\") String startTime, @JsonProperty(\"end date\") String endDate,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"end time\") String endTime, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            @JsonProperty(\"category\") String categories, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d source.getStartTime().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d source.getEndDate().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        categories \u003d source.getCategories().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    StartDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartDate.isValidStartDate(startDate)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StartDate modelStartDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    StartTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!StartTime.isValidStartTime(startTime)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(StartTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final StartTime modelStartTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    EndDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndDate.isValidEndDate(endDate)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(EndDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final EndDate modelEndDate \u003d new EndDate(endDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                    EndTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!EndTime.isValidEndTime(endTime)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(EndTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final EndTime modelEndTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (categories \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    Categories.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!Categories.isValidCategories(categories)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalValueException(Categories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Categories modelCategories \u003d new Categories(categories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(modelName, modelStartDate, modelStartTime, modelEndDate, modelEndTime, modelDescription,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                modelCategories, modelTags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 150,
      "BrittonAlone": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " * Stores book data in an Json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class JsonFileStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the given taskbook data to the specified file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static void saveDataToFile(Path file, JsonSerializableTaskBook taskBook)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            JsonUtil.saveJsonFile(taskBook, file);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Returns task book in the file or an empty address book"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public static Optional\u003cJsonSerializableTaskBook\u003e loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return JsonUtil.readJsonFile(file, JsonSerializableTaskBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An Immutable TaskBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "@JsonRootName(value \u003d \"taskbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "public class JsonSerializableTaskBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAY \u003d \"Days list contains duplicate day(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskBook} with the given tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonSerializableTaskBook(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskBook} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonSerializableTaskBook(ReadOnlyTaskBook source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        days.addAll(source.getDayList().stream().map(JsonAdaptedDay::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Conversion with filtered tasks instead of the whole task book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public JsonSerializableTaskBook(ObservableList\u003cTask\u003e filteredPersons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        tasks.addAll(filteredPersons.stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Converts this task book into the model\u0027s {@code TaskBook} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (taskBook.hasTask(task)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            taskBook.addTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBook;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        if (!(other instanceof JsonSerializableTaskBook)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        return tasks.equals(((JsonSerializableTaskBook) other).tasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 62,
      "Zeyang-Li": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A class to access TaskBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class JsonTaskBookStorage implements TaskBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    private Path backupPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public JsonTaskBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        this.backupPath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return readTaskBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Similar to {@link #readTaskBook()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cJsonSerializableTaskBook\u003e jsonTaskBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                filePath, JsonSerializableTaskBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!jsonTaskBook.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return Optional.of(jsonTaskBook.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(taskBook, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Similar to {@link #saveTaskBook(ReadOnlyTaskBook)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(taskBook);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskBook(taskBook), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Similar to {@link #backupTaskBook(ReadOnlyTaskBook)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        saveTaskBook(taskBook, backupPath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 79,
      "Zeyang-Li": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public interface Storage extends TaskBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void handleTaskBookChangedEvent(TaskBookChangedEvent abce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "Zeyang-Li": 8,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.model.TaskBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Manages storage of Tasketch data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskBookStorage taskBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StorageManager(TaskBookStorage taskBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBookStorage \u003d taskBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Path getTaskBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookStorage.getTaskBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return readTaskBook(taskBookStorage.getTaskBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBookStorage.readTaskBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        saveTaskBook(taskBook, taskBookStorage.getTaskBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBookStorage.saveTaskBook(taskBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        taskBookStorage.backupTaskBook(taskBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    public void handleTaskBookChangedEvent(TaskBookChangedEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            saveTaskBook(event.data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "            new DataSavingExceptionEvent(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 16,
      "Zeyang-Li": 17,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TaskBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public interface TaskBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Path getTaskBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns TaskBook data as a {@link ReadOnlyTaskBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see #getTaskBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    Optional\u003cReadOnlyTaskBook\u003e readTaskBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @param taskBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see #saveTaskBook(ReadOnlyTaskBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * Backup the given {@link ReadOnlyTaskBook} to a temporary local backup file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @param taskBook cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "    void backupTaskBook(ReadOnlyTaskBook taskBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 45,
      "Zeyang-Li": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cTask\u003e selectedTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            loadTaskPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private void loadTaskPage(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(task.getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + task.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Load selected page."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(url);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6,
      "jingchen-z": 6,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.ADD_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.CLEAR_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.DELETE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.EDIT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.FIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import static seedu.address.logic.commands.CommandFormatString.LIST_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    public static final String NO_MATCHED_COMMAND \u003d \"No matched command!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private static final String[] CommandList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        CommandList \u003d new String[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            RemindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (Arrays.asList(CommandList).contains(commandTextField.getText())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                showParameterForCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                autoCompleteInputCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Show the format string of parameter for commands in Command line."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void showParameterForCommand(String text) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String completedtext \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        switch (text) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + ADD_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + CLEAR_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + DELETE_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + EDIT_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + FIND_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            completedtext \u003d text + \" \" + LIST_COMMAND_FORMATSTRING;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            replaceText(completedtext);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void autoCompleteInputCommand() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String completedtext \u003d getCompletedtext(text);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "        replaceText(completedtext);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getCompletedtext(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return getMostSimilarCommand(text, CommandList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Get the most similar command with the text field input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private String getMostSimilarCommand(String text, String[] commandlist) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int length \u003d text.length();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        float highestRatio \u003d 0;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        String highestRatioCommand \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (String commands: commandlist) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            if (length \u003c\u003d commands.length() \u0026\u0026 text.equals(commands.substring(0, length))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                return commands;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            } else if (highestRatio \u003d\u003d 0 || highestRatio \u003c getSimilarityRatio(text, commands)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                highestRatio \u003d getSimilarityRatio(text, commands);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                highestRatioCommand \u003d commands;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            //System.out.println(getSimilarityRatio(text, commands));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (highestRatio \u003c 0.5) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return NO_MATCHED_COMMAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return highestRatioCommand;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private float getSimilarityRatio(String text, String commands) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int max \u003d Math.max(text.length(), commands.length());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return 1 - (float) compare(text, commands) / max;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Compare input text with the command to get the similarity of them."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private float compare(String text, String command) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int[][] difference;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int textLength \u003d text.length();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int commandLength \u003d command.length();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        char ch1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        char ch2;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        int temp;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (textLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return commandLength;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        if (commandLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            return textLength;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        difference \u003d new int[textLength + 1][commandLength + 1];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d textLength; i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            difference[i][0] \u003d i;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d commandLength; j++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            difference[0][j] \u003d j;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d textLength; i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            ch1 \u003d text.charAt(i - 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d commandLength; j++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                ch2 \u003d command.charAt(j - 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                if (ch1 \u003d\u003d ch2 || ch1 \u003d\u003d ch2 + 32 || ch1 + 32 \u003d\u003d ch2) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    temp \u003d 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                    temp \u003d 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                difference[i][j] \u003d min(difference[i - 1][j] + 1,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "                                       difference[i][j - 1] + 1, difference[i - 1][j - 1] + temp);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return difference[textLength][commandLength];"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private int min(int one, int two, int three) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        return (one \u003d one \u003c two ? one : two) \u003c three ? one : three;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     * Handles the tap button pressed event."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private void handleCommandtapped() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 181,
      "BrittonAlone": 2,
      "Zeyang-Li": 1,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"DayListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final Day day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label academic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label aName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label cca;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label cName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label entertainment;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label entName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label errand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label errName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label oName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayCard(Day day, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        date.setText(day.getDate().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        academic.setText(day.getAcademic().getTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cca.setText(day.getCca().getTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entertainment.setText(day.getEntertainment().getTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errand.setText(day.getErrand().getTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        other.setText(day.getOther().getTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        aName.setText(\"Academic: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        cName.setText(\"Cca: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        entName.setText(\"Entertainment: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        errName.setText(\"Errand: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        oName.setText(\"Other: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof DayCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        DayCard card \u003d (DayCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 day.equals(card.day);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DayListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.day.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class DayListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"DayListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DayListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private ListView\u003cDay\u003e dayListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public DayListPanel(ObservableList\u003cDay\u003e dayList, ObservableValue\u003cDay\u003e selectedDay,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        Consumer\u003cDay\u003e onSelectedDayChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.setItems(dayList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.setCellFactory(listView -\u003e new DayListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selection in day list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            onSelectedDayChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedDay.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selected day changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected day,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (Objects.equals(dayListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d dayListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                dayListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Day} using a {@code DayCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    class DayListViewCell extends ListCell\u003cDay\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        protected void updateItem(Day day, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super.updateItem(day, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (empty || day \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(new DayCard(day, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DefaultPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.ui.calendar.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.ui.reminder.ReminderPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.ui.timeline.TimePane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Default page contains calendar, reminder and timeline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class DefaultPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String FXML \u003d \"DefaultPage.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private ObservableList\u003cTask\u003e all;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private DayListPanel dayListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private SplitPane overallPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane calendarAnchorPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane reminderAnchorPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane dayListPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane timelineAnchorPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private AnchorPane upperPartAnchorPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public DefaultPage(ObservableList\u003cTask\u003e taskList, Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.all \u003d taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d getDay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.dayListPanel \u003d new DayListPanel(logic.getFilteredDayList(), logic.selectedDayProperty(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logic::setSelectedDay);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Show the calendar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().add(new Calendar(YearMonth.now()).getView());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().add(new TimePane(taskList, day).getView());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().add(new ReminderPane(logic, logic.getFilteredTaskList()).getView());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListPane.getChildren().add(dayListPanel.getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set each window to proper fixed size."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        upperPartAnchorPane.maxHeightProperty().bind(overallPane.heightProperty().multiply(0.55));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.maxHeightProperty().bind(overallPane.heightProperty().multiply(0.45));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        reminderAnchorPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        dayListPane.maxWidthProperty().bind(upperPartAnchorPane.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the desired month."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setMonth(String month) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Calendar c \u003d new Calendar(YearMonth.now());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(month);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month.equals(\"Viewing next month\u0027s calendar!\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            c.nextMonth();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(month);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (month.equals(\"Viewing previous month\u0027s calendar!\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            c.previousMonth();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(month);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendarAnchorPane.getChildren().add(c.getView());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the desired timeline to that day."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param feedback"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setTimeline(String feedback) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (!feedback.split(\" \")[0].equals(\"Timeline\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(\"not\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d feedback.split(\" \")[3];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        if (!feedback.split(\" \")[3].contains(\"-\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            this.day \u003d feedback.split(\" \")[2];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(day);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineAnchorPane.getChildren().add(new TimePane(all, day).getView());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(day);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This returns the current date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * To be updated."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Date today \u003d new Date();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-YY\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String formattedToday \u003d formatter.format(today);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return formattedToday;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void setReminder(Logic logic) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        ReminderPane r \u003d new ReminderPane(logic, logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        reminderAnchorPane.getChildren().add(r.getView());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 111,
      "cheahzk": 9,
      "BrittonAlone": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String DEFAULT_PAGE \u003d \"defaultPage\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String PROJECT_DETAILS \u003d \"projectDetails\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private DefaultPage defaultPage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    //To check which scene to show"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String optionPage \u003d DEFAULT_PAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private StackPane defaultBrowserPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StackPane dayListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        switch (optionPage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case DEFAULT_PAGE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            defaultPage \u003d new DefaultPage(logic.getFilteredTaskList(), logic);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultBrowserPlaceholder.getChildren().add(defaultPage.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case PROJECT_DETAILS:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            browserPanel \u003d new BrowserPanel(logic.selectedTaskProperty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            defaultPage \u003d new DefaultPage(logic.getFilteredTaskList(), logic);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultBrowserPlaceholder.getChildren().add(defaultPage.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                logic::setSelectedTask);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskBookFilePath(), logic.getTaskBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Choose which page to show."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setScene(String value) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        optionPage \u003d value;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Get current page."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getPage() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return this.optionPage;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultPage.setMonth(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            defaultPage.setTimeline(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            defaultPage.setReminder(logic);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        } catch (IllegalArgumentException | CommandException | ParseException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 2,
      "jingchen-z": 39,
      "cheahzk": 12,
      "BrittonAlone": 3,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyTaskBook taskBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Label categories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate.setText(task.getStartDate().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime.setText(task.getStartTime().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate.setText(task.getEndDate().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime.setText(task.getEndTime().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        categories.setText(task.getCategories().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 27,
      "BrittonAlone": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            Consumer\u003cTask\u003e onSelectedTaskChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            onSelectedTaskChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            logger.fine(\"Selected task changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected task,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (Objects.equals(taskListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                int index \u003d taskListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                taskListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/Tasketch.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wanchunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wanchunwei": 1,
      "jingchen-z": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/Calendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * The real implementation for calendar will be here."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class Calendar extends Node {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private ArrayList\u003cPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private YearMonth shownYearMonth;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Create a calendar with 35 grids (5x7)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param yearMonth"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Calendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendar.setPrefSize(340, 200);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Fill up the calendar."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                PaneNode newGrid \u003d new PaneNode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                newGrid.setPrefSize(48, 40);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                calendar.add(newGrid, j, i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                allCalendarDays.add(newGrid);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Text[] weekDays \u003d { new Text(\"Sun\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Mon\"), new Text(\"Tues\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Wed\"), new Text(\"Thur\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                            new Text(\"Fri\"), new Text(\"Sat\") };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane weekDayLabel \u003d new GridPane();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        weekDayLabel.setPrefWidth(340);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text day : weekDays) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(48, 10);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(day);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            weekDayLabel.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Text calendarTitle \u003d new Text(); //Title to be added later"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        HBox titleBar \u003d new HBox(calendarTitle);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(yearMonth);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        view \u003d new VBox(titleBar, weekDayLabel, calendar);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Show the calendar."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Show from the first Sunday before current month."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void showCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PaneNode aGrid : allCalendarDays) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (aGrid.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.getChildren().remove(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setDay(calendarDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setTopAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setLeftAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(txt);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Change the current view to previous month, FOR FUTURE DEVELOPMENT."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void previousMonth() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d shownYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(shownYearMonth);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Change the current view to next month, FOR FUTURE DEVELOPMENT."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void nextMonth() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        shownYearMonth \u003d shownYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showCalendar(shownYearMonth);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Required by Travis."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public ArrayList\u003cPaneNode\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cPaneNode\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Node getStyleableNode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/calendar/PaneNode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is each single date grid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class PaneNode extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private LocalDate day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Initialize."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param children"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public PaneNode(Node... children) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Get today. required by Travis."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public LocalDate getDay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set current date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param newDay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void setDay(LocalDate newDay) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.day \u003d newDay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/reminder/ReminderPane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "package seedu.address.ui.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.ui.TaskCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " * The UI part of remind feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "public class ReminderPane extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private ListView\u003cTaskCard\u003e taskListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * The constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ReminderPane(Logic logic, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        taskListView \u003d new ListView\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        addTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Add task to UI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public void addTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            taskListView.getItems().add(new TaskCard(task, i++));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        vbox.getChildren().addAll(taskListView);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Get logic."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ListView\u003cTaskCard\u003e getListView() { return this.taskListView; }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Get view."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this.vbox;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Travis"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        protected void updateItem(TaskCard taskCard, boolean empty) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            super.updateItem(taskCard, empty);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            if (empty || taskCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                setGraphic(taskCard.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BrittonAlone": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/PreTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This class is to store processed data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class PreTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String cate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public PreTask(String ttl, String cat, float s, float e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.title \u003d ttl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.cate \u003d cat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.start \u003d s;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.end \u003d e;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public String getCate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return cate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public float getStart() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public float getEnd() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/TimePane.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * This is the overall arrangement of timeline pane."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class TimePane extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String[] category \u003d {\"a\", \"c\", \"e\", \"r\", \"o\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public TimePane(ObservableList\u003cTask\u003e taskList, String d) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        showTimeline(taskList, d);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This update the timeline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public void showTimeline(ObservableList\u003cTask\u003e taskList, String d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.setSpacing(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up time points\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Text[] timePoints \u003d { new Text(\" \"), new Text(\"6:00\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"8:00\"), new Text(\"10:00\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"12:00\"), new Text(\"14:00\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"16:00\"), new Text(\"18:00\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"20:00\"), new Text(\"22:00\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                              new Text(\"0:00\"), new Text(\"2:00\")};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane timelineLabel \u003d new GridPane();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        timelineLabel.setPrefWidth(800);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //timelineLabel.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text time : timePoints) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(96, 10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(time);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setStyle(\"-fx-text-inner-color: white;\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timelineLabel.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up a rectangle\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle heading \u003d new Rectangle();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setX(150.0f);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setY(75.0f);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setWidth(920.0f);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setHeight(10.0f);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle heading2 \u003d new Rectangle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading2.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading2.setX(150.0f);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading2.setY(75.0f);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading2.setWidth(920.0f);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading2.setHeight(5.0f);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the height and width of the arc"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //heading.setArcWidth(10.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //heading.setArcHeight(10.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Add to the view"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.getChildren().add(heading);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        vbox.getChildren().add(timelineLabel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //vbox.getChildren().add(heading2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up each timeline for 4 categories\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        String[] cate \u003d {\"a\", \"c\", \"e\", \"r\", \"o\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filteredDate \u003d filterDate(taskList, d);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            PreTask[] filteredCate \u003d filterCate(filteredDate, category[i]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            Timeline t \u003d new Timeline(filteredCate, cate[i]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            vbox.getChildren().add(t.getOneTimeline());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This function filters the tasks to desired date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param day"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] filterDate(ObservableList\u003cTask\u003e taskList, String day) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filteredDate \u003d new PreTask[1000];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getCategories();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException ep) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (t.getStartDate().toString().equals(day)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                filteredDate[count] \u003d new PreTask(t.getName().toString(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getCategories().toString(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        parse(t.getStartTime().toString()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        parse(t.getEndTime().toString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return filteredDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * returns filtered category list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * The O(n^2) filtering method could be improved to O(n)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param cate"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] filterCate(PreTask[] taskList, String cate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        PreTask[] filtered \u003d new PreTask[1000];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(\"Sofarsogood 11\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PreTask t : taskList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getCate();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException ep) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(t.getCategories().toString().equals(cate));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (t.getCate().equals(cate)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                //System.out.println(\"Sofarsogood 33\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                filtered[count] \u003d new PreTask(t.getTitle(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getCate(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getStart(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                        t.getEnd());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private float parse(String time) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return Float.parseFloat(time);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return this.vbox;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/timeline/Timeline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "package seedu.address.ui.timeline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " * Individual Timeline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "public class Timeline {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private VBox oneTimeline \u003d new VBox();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private PreTask[] tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String cate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Text[] taskNames \u003d {new Text(\"Cate\"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                                new Text(\" \"), new Text(\" \"), new Text(\" \"), new Text(\" \")};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public Timeline(PreTask[] pre, String c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.tasks \u003d pre;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        this.cate \u003d c;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        sort();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.setSpacing(13);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up a seperate line\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up Titles\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepTitle(c);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dSet up Timelines\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        prepTimeline(pre);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the line."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        Rectangle heading \u003d new Rectangle();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setFill(Color.GRAY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the properties of the rectangle"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setWidth(850.0f);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setHeight(1.0f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Setting the height and width of the arc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setArcWidth(0.3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        heading.setArcHeight(0.3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //Add to the view"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(heading);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the name of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepTitle(String c) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane taskNameLine \u003d new GridPane();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        taskNameLine.setPrefWidth(850);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //taskNameLine.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int col \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        taskNames[0] \u003d new Text(getCate(c));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (Text n : taskNames) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.setPrefSize(100, 5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //n.setBoundsType(TextBoundsType.VISUAL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setStyle(\"-fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                       + \"-fx-font-size: 14px;\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            n.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            aGrid.getChildren().add(n);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            taskNameLine.add(aGrid, col, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            col++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(taskNameLine);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * This method will prepare the real timeline."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void prepTimeline(PreTask[] pre) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        GridPane time \u003d new GridPane();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        time.setPrefWidth(850);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //time.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int[] timeInterval \u003d markTimeInterval(pre);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c timeInterval.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.print(timeInterval[i]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (timeInterval[i]) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect1 \u003d new Region();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect1.setPrefSize(40, 10);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect1, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect2 \u003d new Region();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect2.setPrefSize(40, 10);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect2, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect3 \u003d new Region();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect3.setPrefSize(40, 10);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect3, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                Region rect4 \u003d new Region();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                rect4.setPrefSize(40, 10);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(setColor(rect4, timeInterval[i]), i, 0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                AnchorPane aGrid \u003d new AnchorPane();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.setPrefSize(40, 5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                aGrid.getChildren().add(new Text(\" \"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                time.add(aGrid, i, 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(\"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        oneTimeline.getChildren().add(time);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Marks time intervals to fill in."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private int[] markTimeInterval(PreTask[] pre) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int[] timeInterval \u003d new int[24];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int start \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int end \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (PreTask t : pre) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                t.getStart();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException np) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                //System.out.println(\"null\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return timeInterval;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            start \u003d (Math.round(t.getStart()) + 20) % 24;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            end \u003d (Math.round(t.getEnd()) + 20) % 24;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (start \u003d\u003d end) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                timeInterval[start] \u003d 4;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int i \u003d 0; i \u003c end - start; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                timeInterval[i + start + 1] \u003d 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timeInterval[(start + 1) % 24] \u003d 2;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            timeInterval[(end + 1) % 24] \u003d 3;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return timeInterval;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Sort the tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * The sorting function could be improved to quicksork / mergesort etc."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private void sort() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int total \u003d getSize();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        //System.out.println(total);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            for (int j \u003d 0; j \u003c total - i - 1; j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                if (tasks[j].getStart() \u003e tasks[j + 1].getStart()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    PreTask t \u003d tasks[j];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    tasks[j] \u003d tasks[j + 1];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                    tasks[j + 1] \u003d t;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            int time \u003d (Math.round(tasks[i].getStart()) + 20) % 24;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            if (time \u003e 21) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                //System.out.println(time);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            taskNames[(Math.round(tasks[i].getStart()) + 20) % 24] \u003d new Text(tasks[i].getTitle());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            //System.out.println(tasks[i].getStart());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * get size"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private int getSize() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        for (i \u003d 0; true; i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                tasks[i].getCate();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            } catch (NullPointerException np) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Get cate"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private String getCate(String s) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        switch (s) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Academic \";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"CCA      \";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Entertain\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Errands  \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            return \"Other    \";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * Set the color of each timeline to be different."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @param r"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    private Region setColor(Region r, int i) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        switch (cate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #39b9fd; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #3bd979; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #fc4429; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ffa741; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: #ded38c; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 10 0 0 10\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 10 10 0\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 10 10 10 10\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                r.setStyle(\"-fx-background-color: white; -fx-background-radius: 0 0 0 0\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                return r;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    public VBox getOneTimeline() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "        return oneTimeline;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 338
    }
  },
  {
    "path": "src/main/resources/view/DayListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"academic\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$academic\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"aName\" text\u003d\"\\$acaName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"cca\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cca\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"cName\" text\u003d\"\\$ccaName\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"entertainment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$entertainment\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"entName\" text\u003d\"\\$entName\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"errand\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$errand\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"errName\" text\u003d\"\\$errName\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"other\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$other\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "               \u003cLabel fx:id\u003d\"oName\" text\u003d\"\\$otherName\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003c/graphic\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 55
    }
  },
  {
    "path": "src/main/resources/view/DayListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    \u003cListView fx:id\u003d\"dayListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DefaultPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cSplitPane fx:id\u003d\"overallPane\" dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"430.0\" prefWidth\u003d\"860.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"upperPartAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.41238317757009346, 0.7114485981308412\" prefHeight\u003d\"242.0\" prefWidth\u003d\"858.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"calendarAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"350.0\" prefHeight\u003d\"212.0\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: grey;\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"reminderAnchorPane\" minHeight\u003d\"240.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"220.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"dayListPane\" minHeight\u003d\"240.0\" minWidth\u003d\"250.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"250.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"timelineAnchorPane\" minHeight\u003d\"190.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"190.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jingchen-z": 14,
      "cheahzk": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Tasketch App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4, 0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "          \u003c!--"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "          --\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jingchen-z"
        },
        "content": "          \u003cStackPane fx:id\u003d\"defaultBrowserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 11,
      "jingchen-z": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cLabel fx:id\u003d\"categories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$categories\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final TaskListPanelHandle taskListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String STARTDATE_FIELD_ID \u003d \"#startDate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String STARTTIME_FIELD_ID \u003d \"#startTime\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ENDDATE_FIELD_ID \u003d \"#endDate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String ENDTIME_FIELD_ID \u003d \"#endTime\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label startDateLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label startTimeLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label endDateLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label endTimeLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDateLabel \u003d getChildNode(STARTDATE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTimeLabel \u003d getChildNode(STARTTIME_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDateLabel \u003d getChildNode(ENDDATE_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTimeLabel \u003d getChildNode(ENDTIME_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startDateLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return startTimeLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endDateLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return endTimeLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return getName().equals(task.getName().fullName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getStartDate().equals(task.getStartDate().value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getStartTime().equals(task.getStartTime().value)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getEndDate().equals(task.getEndDate().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getEndTime().equals(task.getEndTime().value)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 getDescription().equals(task.getDescription().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 103
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedTaskCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskCardHandle getTaskCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                .filter(handle -\u003e handle.equals(getTask(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void rememberSelectedTaskCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code rememberSelectedTaskCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public boolean isSelectedTaskCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return lastRememberedSelectedTaskCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return !lastRememberedSelectedTaskCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 35,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected Supplier\u003cReadOnlyTaskBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTaskBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            JsonTaskBookStorage jsonTaskBookStorage \u003d new JsonTaskBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                jsonTaskBookStorage.saveTaskBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        userPrefs.setTaskBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook readStorageTaskBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            return new TaskBook(storage.readTaskBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return storage.getTaskBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTaskBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 13,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zeyang-Li"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Zeyang-Li": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2113;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ENDTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2113;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_CS2113;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STARTTIME_DESC_CS2113;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2113;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.storage.JsonTaskBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage taskBookStorage \u003d new JsonTaskBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS1, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        // Setup LogicManager with JsonTaskBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        JsonTaskBookStorage taskBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                new JsonTaskBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(taskBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2113 + STARTDATE_DESC_CS2113 + STARTTIME_DESC_CS2113"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "                + ENDDATE_DESC_CS2113 + ENDTIME_DESC_CS2113 + DESCRIPTION_DESC_CS2113;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(CS2113).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel.commitTaskBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     *      - {@code expectedModel}\u0027s task book was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static class JsonTaskBookIoExceptionThrowingStub extends JsonTaskBookStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        private JsonTaskBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        public void saveTaskBook(ReadOnlyTaskBook taskBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 37,
      "BrittonAlone": 1,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_NAME_CS2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_NAME_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTDATE_CS2113 \u003d \"11-11-11\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTDATE_CS2101 \u003d \"22-22-22\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTTIME_CS2113 \u003d \"11.11\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_STARTTIME_CS2101 \u003d \"22.22\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDDATE_CS2113 \u003d \"33-33-33\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDDATE_CS2101 \u003d \"44-44-44\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDTIME_CS2113 \u003d \"33.33\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_ENDTIME_CS2101 \u003d \"44.44\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2113 \u003d \"Do sequence diagram\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"Do user guide\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_TAG_CS2113 \u003d \"CS2113\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String VALID_TAG_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String NAME_DESC_CS2113 \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2113;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String NAME_DESC_CS2101 \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2113;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTDATE_DESC_CS2113 \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_CS2113;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTDATE_DESC_CS2101 \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_CS2101;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTTIME_DESC_CS2113 \u003d \" \" + PREFIX_STARTTIME + VALID_STARTTIME_CS2113;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String STARTTIME_DESC_CS2101 \u003d \" \" + PREFIX_STARTTIME + VALID_STARTTIME_CS2101;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDDATE_DESC_CS2113 \u003d \" \" + PREFIX_ENDDATE + VALID_ENDDATE_CS2113;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDDATE_DESC_CS2101 \u003d \" \" + PREFIX_ENDDATE + VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDTIME_DESC_CS2113 \u003d \" \" + PREFIX_ENDTIME + VALID_ENDTIME_CS2113;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String ENDTIME_DESC_CS2101 \u003d \" \" + PREFIX_ENDTIME + VALID_ENDTIME_CS2101;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2113 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2113;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TAG_DESC_CS2113 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2113;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String TAG_DESC_CS2101 \u003d \" \" + PREFIX_TAG + VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"\"; // blank not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_STARTDATE_DESC \u003d \" \" + PREFIX_STARTDATE + \"a\"; // \u0027a\u0027 not allowed in startDates"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_STARTTIME_DESC \u003d \" \" + PREFIX_STARTTIME + \"a\"; // \u0027a\u0027 not allowed in startTimes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_ENDDATE_DESC \u003d \" \" + PREFIX_ENDDATE + \"a\"; // \u0027a\u0027 not allowed in endDates"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_ENDTIME_DESC \u003d \" \" + PREFIX_ENDTIME + \"a\"; // \u0027a\u0027 not allowed in endTimes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION; // empty string not allowed for desc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * - the task book, filtered task list and selected task in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook expectedTaskBook \u003d new TaskBook(actualModel.getTaskBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task expectedSelectedTask \u003d actualModel.getSelectedTask();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedTaskBook, actualModel.getTaskBook());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            assertEquals(expectedSelectedTask, actualModel.getSelectedTask());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code model}\u0027s task book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredTaskList(new TaskContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s task book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.commitTaskBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 64,
      "BrittonAlone": 5,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    private String[] argument;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS1, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        assertCommandSuccess(new ListCommand(argument), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS1, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 6,
      "BrittonAlone": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Do CS2101\u0026\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_STARTDATE \u003d \"19-03-01\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#cs2101\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_NAME \u003d \"Do CS2101\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_STARTDATE \u003d \"03-01-19\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"important\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"cs2101\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStartDate((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseStartDate(INVALID_STARTDATE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_validValueWithoutWhitespace_returnsStartDate() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate expectedStartDate \u003d new StartDate(VALID_STARTDATE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedStartDate, ParserUtil.parseStartDate(VALID_STARTDATE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void parseStartDate_validValueWithWhitespace_returnsTrimmedStartDate() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String startDateWithWhitespace \u003d WHITESPACE + VALID_STARTDATE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        StartDate expectedStartDate \u003d new StartDate(VALID_STARTDATE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedStartDate, ParserUtil.parseStartDate(startDateWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 24,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class to help with building Taskbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " *     {@code TaskBook tb \u003d new TaskBookBuilder().withTask(\"Do CS2113T\", \"Finish CS2101\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TaskBook taskBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook \u003d new TaskBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder(TaskBook taskBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.taskBook \u003d taskBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBookBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        taskBook.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return taskBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Categories;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.EndTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.StartTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Revise CS2113T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_STARTDATE \u003d \"0315\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_STARTTIME \u003d \"1400\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_ENDDATE \u003d \"0315\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_ENDTIME \u003d \"1700\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Class diagram\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"c\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StartDate startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private EndDate endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private StartTime startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private EndTime endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private Categories category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d new StartDate(DEFAULT_STARTDATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d new StartTime(DEFAULT_STARTTIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d new EndDate(DEFAULT_ENDDATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d new EndTime(DEFAULT_ENDTIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        category \u003d new Categories(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startDate \u003d taskToCopy.getStartDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        startTime \u003d taskToCopy.getStartTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endDate \u003d taskToCopy.getEndDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        endTime \u003d taskToCopy.getEndTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        category \u003d taskToCopy.getCategories();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     * Sets the {@code category} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withCategory(Categories category) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BrittonAlone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code StartTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.startTime \u003d new StartTime(startTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndDate} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endDate \u003d new EndDate(endDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code EndTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.endTime \u003d new EndTime(endTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new Task(name, startDate, startTime, endDate, endTime, description, category, tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 125,
      "BrittonAlone": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDDATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_STARTDATE + task.getStartDate().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_STARTTIME + task.getStartTime().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_ENDDATE + task.getEndDate().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_ENDTIME + task.getEndTime().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 19,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2113;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_CS2113;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_CS2101;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDTIME_CS2113;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2113;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_CS2113;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTTIME_CS2113;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2101;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CS2113;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2113 \u003d new TaskBuilder().withName(\"CS2113\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(\"11-11-11\").withStartTime(\"11.11\").withEndDate(\"22-22-22\").withEndTime(\"22.22\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Do sequence diagram\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(\"CS2113\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2101 \u003d new TaskBuilder().withName(\"cs2101\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(\"33-33-33\").withStartTime(\"33.33\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(\"Do user guide\").withEndDate(\"44-44-44\").withEndTime(\"44.44\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2113T \u003d new TaskBuilder().withName(VALID_NAME_CS2113)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(VALID_STARTDATE_CS2113).withStartTime(VALID_STARTTIME_CS2113)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withEndDate(VALID_ENDDATE_CS2113).withEndTime(VALID_ENDTIME_CS2113)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2113)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(VALID_TAG_CS2113).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final Task CS2100 \u003d new TaskBuilder().withName(VALID_NAME_CS2101)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withStartDate(VALID_STARTDATE_CS2101).withStartTime(VALID_STARTTIME_CS2101)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withEndDate(VALID_ENDDATE_CS2101).withEndTime(VALID_ENDTIME_CS2101)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2101)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            .withTags(VALID_TAG_CS2101).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns an {@code TaskBook} with all the typical tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static TaskBook getTypicalTaskBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        TaskBook tb \u003d new TaskBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            tb.addTask(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return tb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cheahzk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2113, CS2101, CS2113T, CS2100));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 70
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_TASKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_TASKS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public static void setFilteredList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return task -\u003e task.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public class SampleDataTest extends TaskBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected TaskBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public void taskBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertListMatching(getTaskListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.ReadOnlyTaskBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyTaskBook\u003e taskBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(taskBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/TaskBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.model.TaskBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cheahzk"
        },
        "content": " * A system test class for TaskBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "public abstract class TaskBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected TaskBook getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return TypicalTasks.getTypicalTaskBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Displays all tasks in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void showAllTasks() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(getModel().getTaskBook().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Displays all tasks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    protected void showTasksWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getTaskBook().getTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*protected void selectTask(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Deletes all tasks in the task book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    /*protected void deleteAllTasks() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(0, getModel().getTaskBook().getTaskList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same task objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * and the task list panel displays the tasks in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(new TaskBook(expectedModel.getTaskBook()), testApp.readStorageTaskBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getTaskListPanel().rememberSelectedTaskCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(getTaskListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        getTaskListPanel().navigateToCard(getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        String selectedCardName \u003d getTaskListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the task list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "     * @see TaskListPanelHandle#isSelectedTaskCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        assertFalse(getTaskListPanel().isSelectedTaskCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cheahzk"
        },
        "content": "        //assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cheahzk": 42,
      "-": 245
    }
  }
]
