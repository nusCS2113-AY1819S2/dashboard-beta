[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d Student Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-M11-2/main[image:https://travis-ci.org/CS2113-AY1819S2-M11-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S2-M11-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S2-M11-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::images/Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d Welcome to Student Buddy."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* A sophisticated event planner for the tech-savvy NUS student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* A Command Line Interface (CLI) for quick input, and a pretty Graphical User Interface (GUI) for easy-to-read output."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Inbuilt calendar, task list and note-taking."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Fast and responsive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Works best on screens with a minimum resolution of 1280x800."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* This application was morphed from the AddressBook-Level4 project by the https://github.com/se-edu/[SE-EDU Initiative]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 12,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    implementation group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    archiveName \u003d \u0027StudentBuddy.jar\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        \u0027site-name\u0027: \u0027Student Buddy\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S2-M11-2/main/\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "-": 234,
      "nicholasleeeee": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Student Buddy was developed by our team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Nicholas Lee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::nicholasleeeee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "{empty}[https://github.com/nicholasleeeee[github]][\u003c\u003cnicholasleeeee#,portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Responsibilities: Security"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Khairul"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::khairulhazril.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "{empty}[http://github.com/khairulhazril[github]][\u003c\u003ckhairulhazril#,portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Responsibilities: Code Refining"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Kayden"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::shengkok.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "{empty}[http://github.com/Shengkok[github]][\u003c\u003cshengkok#,portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Responsibilities: Interface"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Justin"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::justin-ong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "{empty}[http://github.com/Justin-Ong/[github]][\u003c\u003cjustin-ong#,portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Responsibilities: UI Dev"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 48
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S2-M11-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Email us* : You can also reach us at `khairul [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d Student Buddy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-M11-2/main/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "By: `M11-02`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Student Buddy is a desktop application tailored for users who are comfortable with using a Command Line Interface (CLI), while retaining a Graphical User Interface (GUI) for ease of use. The use of a CLI for user input allows users to manage their tasks more efficiently than when using a conventional user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ". Open link:{repoURL}blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}blob/master/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}blob/master/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}blob/master/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}blob/master/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}blob/master/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "`Main` has only one class called link:{repoURL}blob/master/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*API* : link:{repoURL}blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter`, `CalendarPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}blob/master/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "link:{repoURL}blob/master/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ".  `Logic` uses the `TaskManagerParser` class to parse the user command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*API* : link:{repoURL}blob/master/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* stores the user\u0027s data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Task Manager`, which `Task` can reference. This would allow `Task Manager` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*API* : link:{repoURL}blob/master/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* can save the Task Manager data in json format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "// tag::loginfunction[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Login Feature"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The login mechanism is facilitated by `TaskManager`, `SignupCommand`, `LoginCommand`, `LogoutCommand`, `DeleteAccountCommand`, `LoginEvent`, `GenerateHash`, `JsonLoginStorage`. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The login feature is mainly supported by the `Command` class and `account` class. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "There are two types of accounts in login feature which are implemented in the `account` class: +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* A normal user account."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* An admin account."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "All username and hashed password are stored in a JSON file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::AccountClassDiagram.png[width\u003d\"350\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The class diagram above illustrates the `account` class. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "In `model` class, there are methods to check for: +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `loginStatus` (if the user is logged in) +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `adminStatus` (if the admin is logged in) +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `userExists` (if the username is already taken) +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `accountExists` (if there is already an account created)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "In this feature, there are 4 main commands. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The flow on how the commands are executed and their respective sequence diagrams will be further elaborated below: +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "1. Signup and Login Command +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "2. \u003c\u003cLogout Command\u003e\u003e +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "3. \u003c\u003cDeleteAcc Command\u003e\u003e +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d Signup and Login Command"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*`Signup Command` creates an account for the user and stores their username and password in a JSON file.* +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*`Login Command` logs in the account for the user by checking the username and password stored in the JSON file.* +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Given below is an example usage scenario of `signup`. The command word can be swapped to `login` for `Login Command`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 1. The user signs up and keys in username and password using the command `signup u/USERNAME p/PASSWORD`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 2. The `TaskManagerParser` recognises the command word as a signup from `SignupCommand` and calls `SignupCommand`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 3. `SignupCommandParser` will parse the arguments to `SignupCommand`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " `SignupCommand` will call the following commands which are linked to `LoginEvent`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`getLoginStatus` to check if the user is already logged in. +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`userExists` to check if there is already an account with the same username. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`accountExists` to check if an account has already been created. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "If the arguments passes all the commands, `newUser(user)` {`loginUser(user)` for `Login Command`} will be called to store"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "the username and hashed password in a User class."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "It will then pass the User object to `JsonLoginStorage`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 4. `JsonLoginStorage` retrieves the User object to read and write Json files with the correct Json properties."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 5. It will then return to `loginEvent` then to `SignupCommand` and returns the user a successful signup output."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The following sequence diagram below shows the flow of `signup` and `login` respectively from Step 1 to Step 5 above."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "[.left]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::SignUpSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::LoginSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "[.right]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d Logout Command"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*`Logout Command` logs the user out of their account.* +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Given below is an example usage scenario of `logout`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 1. The user logs out by keying in the command `logout`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 2. The `TaskManagerParser` recognises the command word as a logout from `LogoutCommand` and calls `LogoutCommand`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 3. `LogoutCommand` will call the following commands which is linked to `LoginEvent`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`getLoginStatus` to check if the user is already logged out. +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`getAdminStatus` to check if the admin is already logged out. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "If the arguments passes `getLoginStatus` and `getAdminStatus`, `logout` will be called in `LoginEvent`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 4. In `LoginEvent`, `getLoginStatus` and `getAdminStatus` will be set to false and will then"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "return to `LoginCommand` to return the user a successful logout output."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The sequence diagram below shows the flow of `logout` from Step 1 to Step 4 above."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::LogoutSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d DeleteAcc Command"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*`DeleteAcc` only accessible to admins. `DeleteAcc` deletes the entire account.* +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Given below is an example usage scenario of `DeleteAcc`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 1. The admin logs in by keying in username and password using the command `login u/admin p/admin`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 2. The admin keys in `DeleteAcc` to delete the account."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 3. The `TaskManagerParser` recognises the command word as delete account"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "from `DeleteAccountCommand` and calls `DeleteAccountCommand`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 4. `DeleteAccountCommand` will call the following command which is linked to `LoginEvent`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "`getAdminStatus` to check if an admin is logged in. +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "If the arguments passes `getAdminStatus`, `deleteAccount()` will be called in `LoginEvent`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 5. In `LoginEvent`, JsonLoginStorage\u0027s `deleteAccount()` will be called to delete the JSON file."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 6. `LoginEvent` will then call `reinitialise()` to create the Json file"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "without any username and password stored in it. `reinitialise()` is assisted by `JsonLoginStorage` and `writeJson()`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|Step 7. `LoginEvent` will return to `DeleteAccountCommand` and returns the user a successful login output."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The sequence diagram below shows the flow of `deleteacc` from Step 1 to Step 7 above."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "image::DeleteAccountSequenceDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `LoginEvent` and `JsonLoginStorage` works together"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 1 (current choice): `LoginEvent` and `JsonLoginStorage` are in separate classes.* +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: Follows OOP coding. The codes will look more organised and clean. +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: Coders will have to look at both files to code or debug as both calls each other frequently. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 2: `LoginEvent` and `JsonLoginStorage` are in the same class.* +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: Easy to read and debug, all codes are in one file and thus easier for other coders to modify. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: Does not follow OOP coding. The codes in the file will look messy."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `LoginEvent` fits into the code"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 1 (current choice): `LoginEvent` is implemented into the logic.* +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: The code will be efficient and effective. It will be neat and the flow will be well structured."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Single Responsibility Principle and Separation of Concerns is maintained in the code. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: Might be confusing as `LoginEvent` is used frequently."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Coders might need to fully understand how other classes work before looking at `LoginEvent`. +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 2: `LoginEvent` is implemented on its own.* +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: It would be easier for coders to visualise and debug. `LoginEvent` can still run the entire Taskmanager. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: There would be a lot of repeated and redundant codes."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Most of the functions in the `logic` component will be repeated. This will violate Single Responsibility Principle and Separation of Concerns."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the securing of password is implemented"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 1 (current choice): Create my own hashing function to secure password.* +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: Hashing is a one way function. With a proper hashing design, there is no way to reverse"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "the hashing process to reveal the original password. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: Need to code out my own hashing function. More logic and function have to be written."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The code will be more complex. +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Alternative 2: Use encryption library to secure password. Eg. MD5 hashing* +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Pros: Do not need to code much. Most of the function are one line. Easy to implement. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* Cons: Encryption is a two-way function. Encrypted strings can be decrypted with a proper key."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "The password will not be secure. MD5 is not suitable for sensitive information."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Collisions exist with the algorithm, and there have been successful attacks against it."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "// end::loginfunction[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// tag::notes[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Add Notes Feature"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "This feature allow users to add notes regarding miscellaneous matters."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The class diagram below illustrates the *Notes* class."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::ClassDiagramForNotes.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The add notes mechanism is facilitated by _AddNotesCommand_. A _Notes_ object is instantiated which contains of _Heading_, _Content_ and _Priority_."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Given below is an example usage scenario and how the add notes mechanism behaves at each step."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 1. The user enters in a note with its *associated parameters*. e.g `note h/popular c/buy pilot G-2 blue pens p/2`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 2. The _LogicManager_ calls _ParseCommand_ with that input."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 3. The _TaskManagerParser_ is called and returns a _AddNotesCommand_ object to _Logic Manager_."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 4. The _LogicManager_ will call _execute_ method on the _AddNotesCommand_ object."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 5. _ModelManager_ is then called and will check if the note already exists."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 6. If note already exists, _DuplicateNotesException_ will be thrown. This will return a string message \"This note already exists in the task list\"."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 7. Else, _addNotes(notes)_ method is called and note is added."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The sequence diagram below illustrates how the mechanism for adding notes function."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::AddNotesSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Aspect: Checking for *duplicate notes*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* **Alternative 1(current choice):** Implement a method to check new notes entered. If a new note added is exactly the same as exisitng notes in the Student Buddy, it will be classified as duplicate note and cannot be added."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Cons: May neglect duplicate notes that mean the same because the check is for the *exact same heading and content*. The following 2 examples shown below will be identified as different notes due to an additional *s* in example 2 +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "1. `h/popular c/buy ring file` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "2. `h/popular c/buy ring files`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* **Alternative 2:** Implement a method to check for similarity of notes. If similarity is *more than 90%*, note is classified as same note and cannot be added."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Pros: Can reduce the amount of duplicate notes that are added."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Cons: Difficult to implement and *cannot eliminate duplicate notes completely*."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Final decision: Alternative 1 was chosen due to the *significantly easier* implementation."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Delete Notes Feature"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "This feature allow users to delete notes that are no longer wanted."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The Notes mechanism is facilitated by _DeleteNotesCommand_ from the _Logic_ component. Upon executing the _DeleteNotesCommand_, the unwanted note will be removed from the memory of the Student Buddy."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Given below is an example usage scenario and how the `deletenote` mechanism behaves at each step."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 1. The user calls the _DeleteNotesCommand_ with the note’s displayed index. e.g `deletenote 1`."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 2. The _LogicManager_ calls _parseCommand_ with the user input."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 3. The _TaskManagerParser_ is called and it returns a _DeleteNotesCommand_ object to the _LogicManager_."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 4. The _LogicManager_ will call _execute()_ on the _DeleteNotesCommand_ object. If no note of the corresponding index is found, |it would return a string of message `MESSAGE_INVALID_NOTES_DISPLAYED_INDEX`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 5. The _Logic_ component then interacts with the `Model` component which then calls `TaskManager` component within it to execute |`deleteNotes(target)` to remove the note."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|Step 6. The command result would then return the message `MESSAGE_DELETE_NOTE_SUCCESS` in a string."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The following diagram illustrates how the `deletenote` operation works:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::DeleteNotesSequenceDiagram.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Aspect: Weighing *user experience* to *convenience* of users"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* **Alternative 1:** Implement a method to *strike off* notes that are completed so that users can keep track of what notes they have added in as well as the ones they finished."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Pros: Better user experience"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Cons: May cause incovenience as users have to delete away completed notes every few days so as to allow easier viewing of latest notes."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* **Alternative 2(current choice):** *Deleting* completed notes away."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Pros: Easy for users to manage completed notes."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Cons: No sense of achievement as users are unable to view the amount of work completed."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Final decision: Alternative 2 was chosen due to it being *more practical and convenient* to users."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// end::notes[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::task[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Task Feature"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Current Implementation"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The task list is created by refactoring the existing code in the https://github.com/se-edu/addressbook-level4[Address Book Level 4]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The class diagram below illustrates the *task* class."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "image::TaskClassDiagram.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::task[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::sorttask[]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Sort Task List Feature"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The sorting mechanism is facilitated by `TaskManager`, `Model` and `SortTaskList`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Given below is an example usage scenario."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 1. The user keys in `sort ATTRIBUTE`, the `SortCommandParser` will trim the command to get the attribute."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 2. If the attribute is valid, it will then create a new `SortCommand` and execute with the given attribute."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 3. `SortCommand` will then call `ModelManager#sortTask(toSortBy)`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 4. It will then call `TaskManager#sortTask(attribute)`."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Then we convert the relevant attributes of the tasks in the Task List to string to compare using `string#compareTo()`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 5. Then, we use `setTasks()` in `UniqueTaskList` to update the Task List."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "After returning the sorted Task List, the Task Manager is then committed."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The Sequence Diagram below illustrates how the sort mechanism functions. More specifically, sorting by module code."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How sort executes"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 1 (current choice):** Write a class separately for handling the sorting of the task list."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Easy to read and debug, Follows OOP coding and thus easier for other coders to modify."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Difficult to implement."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 2:** Write a method for each attribute in `TaskManager`."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Does not follow OOP coding."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::sorttask[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::overdue[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d [Proposed] Delete overdue"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Using the existing `daysRemaining` variable, upon entering `DeleteOverdue` in the command line, the command will iterate through all the tasks and check the value of `daysRemaining`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "If it is less than 0, the command will call the `DeleteCommand` to delete the overdue task."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How the delete overdue command executes"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 1 (current choice):** Write the command such that whenever there is an overdue task, it will call the `delete` command."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Easy to use as it does not require changing the existing code much."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Will need to iterate through all the tasks."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 2:** Create a new class to store all overdue tasks that updates itself whenever a task is overdue."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Faster as it does not require iterating through all tasks."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Requires more space to store all the overdue tasks"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::overdue[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d Calendar feature"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The Calendar extends the `Student Buddy` GUI with an easy to read interface for tracking task deadlines. It is composed of three classes, `CalendarPanel`, `CalendarCell` and `CalendarCellTask`. Furthermore, it uses the JavaFX files `CalendarPanel.fxml` and `CalendarCell.fxml` to format and structure the display."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "`CalendarPanel` is the base class, which builds and fills the calendar grid."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "`CalendarCell` represents an individual cell of the grid in `CalendarPanel`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "`CalendarCellTask` represents an individual task inside each `CalendarCell`."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "`CalendarPanel.fxml` is a `ScrollPane` containing a `GridPane`. The `GridPane` acts as the calendar grid."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "`CalendarCell.fxml` is a `VBox` containing a `Text`, and a `ScrollPane` containing another `VBox`. The `Text` is the date of a calendar cell, and the second `VBox` contains the list of tasks in a cell."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following class diagram illustrates the relationships between `CalendarPanel`, `CalendarCell` and `CalendarCellTask`:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::CalendarClassDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following steps show how the Calendar is built on startup:"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 1: The constructor of `CalendarPanel` is called, thereby creating a new instance of `CalendarPanel`."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 2: `buildCalendarPane(taskList)` is called, which contains function calls to `buildGrid()`, `createHeaderCells()`, `writeMonthHeader()`, `writeDayHeaders()`, and `createCalendarCells(taskList)`."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 3: `buildGrid()` populates the calendar grid with the correct number of rows and columns."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 4: `createHeaderCells()` fills the first two rows of the calendar with the month header cell and day header cells."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 5: `writeMonthHeader()` writes the current month of the user\u0027s system clock to the month header cell."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 6: `writeDayHeaders()` writes the days of the week to the day header cells, using the enumeration HEADERS."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "a|Step 7: `createCalendarCells(taskList)` fills in the remaining calendar cells with `CalendarCell` instances."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Step 7.1: `CalendarCell` calls `setDate(date)` and `setMonth(month)` to set the date and month of the cell."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Step 7.2: `getTasks(taskList)` is called, which uses the task list stored in the app to create a list of `CalendarCellTask` s applicable for the cell according to the date and month."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Step 7.3: `addTasksToCell()` sorts the list of `CalendarCellTask` s according to their priority, then adds them to the cell."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Step 7.4: `setAppearance()` sets the background and border of the cell."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 8: Done."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following sequence diagram illustrates the process outlined above:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::CalendarBuildSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Whenever the task list is updated, the function `createCalendarCells(taskList)` is called, which replaces the `CalendarCell` and `CalendarCellTask` instances in the `CalendarPanel`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "If the selected task is changed, or the month to be displayed changes (see \u003c\u003cMonth view change feature\u003e\u003e), the function `resetCalendar()` is called, which clears the calendar grid and resets the row and column constraints. Then `buildCalendarPane(taskList)` is called to rebuild the calendar."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the Calendar is built"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Alternative 1 (current choice):** Separate the calendar panel, calendar cells and tasks into their own classes."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Pros: Reduces complexity of CalendarPanel class, making it easier to understand how the calendar is built."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Alternative 2:** Separate every component of the Calendar into their own classes (e.g. into CalendarPane, CalendarGrid, HeaderCell, ContentCell, etc)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Pros: Follows the principles of Single Responsibility Principle and Separation of Concerns strictly."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Cons: Even more memory usage, may make the code difficult to read and understand for future maintainers if they are unused to code spanning several files."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Alternative 3:** Combine all Calendar related code into a single class."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Pros: No need to navigate between different classes."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Cons: The class will be very long and complex, making the code difficult for future maintainers to read, understand and change. Violates the principles of Single Responsibility Principle and Separation of Concerns."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Rationale for choice:**"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** It is the middle ground between alternatives 2 and 3, and thus strikes a balance between readability, maintainability and following Object-Oriented Programming principles. While it does not strictly follow the principles of OOP, it is easy to read the code and understand the processes involved, and is maintainable. This is important, as it is likely that future maintainters will be new Computer Science student undergraduates."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the calendar is updated in real time"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Alternative 1 (current choice):** Replace the previous `CalendarCell` and `CalendarCellTask` instances with with new instances when the task list changes."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Pros: Easy to read and to understand, simpler and easier to implement."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Cons: Potential performance issues. If the list of tasks is very large, rebuilding the Calendar at every step may result in degraded performance manifested as a loss of responsiveness to user commands."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Alternative 2:** Have `CalendarCell` and `CalendarCellTask` instances automatically update as the task list changes."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Pros: No need to rebuild the entire calendar when the task list changes, instead only updating the cells and tasks that are affected."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Cons: Adds another layer of abstraction, which can cause difficulty in understanding how the Calendar works."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* **Rationale for choice:**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** The choice of alternative 1 was made due to time constraints and lack of proper understanding of how to implement alternative 2. Ideally, alternative 2 will be implemented by future maintainers."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// tag::monthChange[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d Month view change feature"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The `month` command allows a user to change what month they are currently viewing on the calendar. This is facilitated using the `currMonth` parameter in `Model`."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Given below is an example usage scenario of `month`."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 1. The user types in `month` with its associated parameter, an integer between 1 and 12 inclusive."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 2. The `TaskManagerParser` recognises the command word and calls `MonthCommandParser`."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 3. `MonthCommandParser` will parse the arguments and call `MonthCommand`."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 4. `MonthCommand` will then return one the following results:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " `CommandException(MESSAGE_DUPLICATE_MONTH)` if the requested month and the current month are the same."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " `CommandException(MESSAGE_INVALID_MONTH)` if the requested month is invalid, for example \"aaa\" or \"0\"."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "If the arguments pass all the checks, the `currMonth` parameter in `Model` will be changed, which will then cause the calendar to be updated."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|Step 5. `MonthCommand` will then return a success message to the user."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following diagram illustrates the operation of the `month` command."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::MonthCommandSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// end::monthChange[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// tag::notesstorage[]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Retrieving of notes from storage [coming in V2.0]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Notes added are currently being stored in notes.json file."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Retrieving from notes.json file is still in progress."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// end::notesstorage[]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}blob/master/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "A project often depends on third-party libraries. For example, Student Buddy depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all tasks in the list."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}blob/master/src/main/java/seedu/address/logic/commands/FindNameCommand.java[`FindNameCommand#COMMAND_WORD`], link:{repoURL}blob/master/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** link:{repoURL}blob/master/src/main/java/seedu/address/logic/parser/TaskManagerParser.java[`TaskManagerParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Modify the switch statement in link:{repoURL}blob/master/src/main/java/seedu/address/logic/parser/TaskManagerParser.java[`TaskManagerParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from every task in the task manager, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from every task in the task manager."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** The link:{repoURL}blob/master/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}blob/master/src/main/java/seedu/address/model/TaskManager.java[`TaskManager`] API need to be updated."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}blob/master/src/main/java/seedu/address/model/TaskManager.java[`TaskManager`] and link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Task.java[`Task`] classes can be used to implement the tag removal logic. link:{repoURL}blob/master/src/main/java/seedu/address/model/TaskManager.java[`TaskManager`] allows you to update a task, and link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Task.java[`Task`] allows you to update the tags."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}blob/master/src/main/java/seedu/address/model/TaskManager.java[`TaskManager`]. Loop through each task, and remove the `tag` from each task."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}blob/master/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}blob/master/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `TaskManager#removeTag(Tag)`."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your task manager application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last task in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Use different colors for different tags inside task cards. For example, `ungraded` tags can be all in brown, and `graded` tags can be all in yellow."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** The tag labels are created inside link:{repoURL}blob/master/src/main/java/seedu/address/ui/TaskCard.java[the `TaskCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** You may wish to modify link:{repoURL}blob/master/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** You can modify the existing test methods for `TaskCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Modify link:{repoURL}blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** link:{repoURL}blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}blob/master/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Refer to link:{repoURL}blob/master/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Modify link:{repoURL}blob/master/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Modify link:{repoURL}blob/master/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** The system tests link:{repoURL}blob/master/src/test/java/systemtests/TaskManagerSystemTest.java[`TaskManagerSystemTest#assertCommandBoxShowsDefaultStyle() and TaskManagerSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Modify the link:{repoURL}blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of tasks in the task manager."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** link:{repoURL}blob/master/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** link:{repoURL}blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the task manager is updated."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Modify the constructor of link:{repoURL}blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of tasks when the application just started."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Use link:{repoURL}blob/master/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of tasks whenever there are new changes to the task manager."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** For tests, modify link:{repoURL}blob/master/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** For system tests, modify link:{repoURL}blob/master/src/test/java/systemtests/TaskManagerSystemTest.java[`TaskManagerSystemTest`] to also verify the new total number of tasks status bar."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the task manager to the cloud. However, the current implementation of the application constantly saves the task manager after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the task manager storage."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Add a new method `backupTaskManger(ReadOnlyTaskManager)`, so that the task manager can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Add the API method in link:{repoURL}blob/master/src/main/java/seedu/address/storage/TaskManagerStorage.java[`TaskManagerStorage`] interface."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Implement the logic in link:{repoURL}blob/master/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}blob/master/src/main/java/seedu/address/storage/JsonTaskManagerStorage.java[`JsonTaskManagerStorage`] class."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*Scenario:* As a software maintainer for `TaskManager`, after the former developer team has moved on, you are. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular task, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Edits the remark for a task specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* `remark 1 r/Need to contact John for further details.` +"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Edits the remark for the first task to `Need to contact John for further details.`"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Removes the remark for the first task."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 as a command"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Teach the application how to parse a `remark` command. The logic of `remark` will be added later."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}blob/master/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should throw an `Exception`."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/main/java/seedu/address/logic/parser/TaskManagerParser.java[`TaskManagerParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a new test method to link:{repoURL}blob/master/src/test/java/seedu/address/logic/parser/TaskManagerParserTest.java[`TaskManagerParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Need to contact John for further details.`"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/main/java/seedu/address/logic/parser/TaskManagerParser.java[`TaskManagerParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/test/java/seedu/address/logic/parser/TaskManagerParserTest.java[`TaskManagerParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remarks in `TaskCard`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Add a placeholder on all link:{repoURL}blob/master/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`]s to display a remark for each task later."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a `Label` with placeholder text inside link:{repoURL}blob/master/src/main/resources/view/TaskListCard.fxml[`TaskListCard.fxml`]."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add FXML annotation in link:{repoURL}blob/master/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/test/java/guitests/guihandles/TaskCardHandle.java[`TaskCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add a `Remark` class"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Practice proper encapsulation when adding the remark in the link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Task.java[`Task`] class. Instead of a `String`, follow the conventional class structure that the codebase uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add `Remark` to the model (you can copy from link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Name.java[`Name`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify `RemarkCommand` to take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Task` to support a `Remark` field"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Implement `Remark` in link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add `getRemark()` in link:{repoURL}blob/master/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the task will be created without a remark)."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete `data/StudentBuddy.json` so that the application will load the sample data when launched)."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to the `JsonAdaptedTask` class"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Modify link:{repoURL}blob/master/src/main/java/seedu/address/storage/JsonAdaptedTask.java[`JsonAdaptedTask`] to include a `Remark` field so that it will be saved when the application is exited."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Fix `invalidAndValidTaskManager.json`, `typicalTaskTaskManager.json`, `validTaskManager.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `TaskBuilder`"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Add a helper method to link:{repoURL}blob/master/src/test/java/seedu/address/testutil/TaskBuilder.java[`TaskBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/task/Task.java[`Task`]."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}blob/master/src/test/java/seedu/address/testutil/TaskBuilder.java[`TaskBuilder`]. This method will create a new `Remark` for the `Task` that it is currently building."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Try to use the method on any sample `Task` in link:{repoURL}blob/master/src/test/java/seedu/address/testutil/TypicalTasks.java[`TypicalTasks`]."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `TaskCard`"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Bind the remark label in link:{repoURL}blob/master/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`] with the actual `remark` field."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/main/java/seedu/address/ui/TaskCard.java[`TaskCard`]\u0027s constructor to bind the `Remark` field to the `Task` \u0027s remark."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ". Modify link:{repoURL}blob/master/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysTask(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Add in actual logic for the `remark` command."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a task."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution for a similar application."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Students who hava a need to manage a significant number of tasks"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* prefer desktop apps over other apps on other platforms"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*Value proposition*: Allow students with huge amount of workload to better manage their tasks and notes more effectively using our user-friendly Student Buddy."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* * *` |new user | see usage instructions |remember how to accomplish tasks in the program"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* * *` |user |add a new task |keep track of tasks and deadlines"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I no longer need"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* * *` |user |edit an task |keep tasks up to date"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* * *` |user |have an intuitive and easy-to-read calender |view upcoming tasks quickly and easily"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* * *` |user |have the calender update in real time as tasks are added or removed |instantly view changes made to the list of tasks"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|`* * *` |user |store miscellaneous notes |keep track of important events other than tasks"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|`* * *` |user |delete notes that are no longer wanted |view the relevant notes easily"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|`* * *` |user |secure my task manager via a username and password to keep my events safe |keep my events and due dates private and secure to minimize the chances of someone deleting them"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* * *` |user | have my password hashed | keep my password safe without anyone easily retrieving them through my computer"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* * *` |administrator | be able to delete an account  | assist the user by resetting their account if they forget their password"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |sort my tasks by the attributes |can view my tasks by urgency etc."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |view all the months of the year on the calendar | can see my tasks that are not on the current month"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |select a task to have it highlighted in the app for easy viewing | so that I can see where it is on the calendar with ease"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user | have admins to be able to access over my account | allow them to add or edit any tasks"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user | have just one task manager account | make things simple and minimal"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |have tasks on the calendar sorted in order of priority |easily see which tasks are the most urgent"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |have tasks on the calendar colour-coded in order of priority |easily see which tasks are the most urgent"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* *` |user |have the selected task highlighted on the calendar |easily view the selected task\u0027s deadline"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`* *` |user |find a task by name |locate details of event without having to go through the entire list"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |user |find tasks by due date, tags, etc. |still find an important task if I forget their name"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`* *` |administrator | be able to use commands like the user |assign task and deadlines to the user"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |change the theme of the GUI |allow me to customise the app\u0027s appearance to my liking"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|`*` |user |have the program automatically complete my inputs |save time by not having to write out the entire command or search query"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|`*` |user |change the colours and sizes of the text |make things easier to read"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|`*` |user |play mini games on the application |keep myself occupied while deciding which tasks to add and delete."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |find a task even if I mistype (e.g. incorrect capitalisation) |save time by not having to rewrite the query"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "(For all use cases below, the *System* is `Student Buddy` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Help"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests for help"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows all the commands with the purpose of the command"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Add task"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to add a new event with given fields"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy adds the event"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 1a. The given fields are invalid"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Use case: Add notes"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "1. User requests to add a new event with given fields"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "2. Student Buddy adds the event"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* 1a. The given fields are invalid"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Delete task"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1.  User requests to list tasks"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2.  Student Buddy shows a list of tasks"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "3.  User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "4.  Student Buddy deletes the task"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 3ai. Student Buddy shows an error message."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Use case: Delete notes"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "1.  User requests to delete a specific note in the notes list by its index."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "2.  Student Buddy deletes the note."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* 2a. The given index is invalid."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** 2ai. Student Buddy shows an error message."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Edit task"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to list tasks"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows a list of tasks"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "3. User requests to edit a specific task in the list with the given fields"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "4. Student Buddy edits the task"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 3a. The given index is invalid"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 3ai. Student Buddy returns an error"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 3b. The given fields are invalid"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 3bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by name"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by name"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by module"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by module"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by date"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by date"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by priority"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by priority"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Sort tasks"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to sort tasks by an attribute"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy sorts the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 1b. The given index is invalid"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 1ai. Student Buddy returns an error"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d Use case: Change month"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "1. User requests to change the month being displayed on the calendar"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "2. Student Buddy displays a different month on the calendar according to the user\u0027s input"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* 1a. The given month is invalid"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 1ai. Student Buddy returns an error"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* 1b. The given month is already being displayed"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** 1bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Signup"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to sign up an account"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "2. Student Buddy signs up user with an account"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The given username and password are invalid"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. The account exists"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "** 1bi. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Login"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to login into account"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "2. Student Buddy logs user in with account"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The given username and password are invalid"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. The user is logged in"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "** 1bi. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Logout"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to logout of account"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "2. Student Buddy logs user out of account"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. The user is logged out"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Deleteacc"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to delete account"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "2. Student Buddy deletes account"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is not logged in"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "** 1ai. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. User is not an admin"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "** 1bi. Student Buddy shows an error message"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added in V2.0}_"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ".  Should be able to hold up to 250 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[[private-task-information]] Private Task Information::"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "A task information that is not meant to be shared with others"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "A means of interacting with a computer program where the user issues commands to the program in the form of texts"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[[gui]] GUI::"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "A form of user interface that allows users to interact with electronic devices through graphical icons and visual indicators"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[[mss]] MSS::"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Main success scenario"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Deleting a task"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted task shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "   Expected: No task is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 205,
      "Shengkok": 153,
      "khairulhazril": 295,
      "-": 825,
      "nicholasleeeee": 171
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d Student Buddy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d :note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-M11-2/main/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "By: `M11-02`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Student Buddy is for tech-savvy students who *prefer to use a desktop app for managing tasks*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "More importantly, Student Buddy is *optimized for those who prefer to work with a keyboard rather than a mouse*, but still has a *graphical display* for easy viewing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Do you want to organise, prioritise and never miss a deadline again? Then this app is perfect for you!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Student Buddy works best with a screen resolution of at least 1280x800."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Here are the steps to get you started with the Student Buddy."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ".  Download the latest `TaskManager.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Student Buddy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds. It should look like this:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "image::StudentBuddy.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ".  Try the following example commands to get a feel for the app:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *`list`* : shows a list of all tasks in the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *`add n/Assignment m/CG2027 d/12-02 p/1`* : adds a task named `Assignment` of module `CG2023`, with submission date `12-02` and priority level `1` to Student Buddy."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *`delete`*`1` : deletes the 1st task shown in the current list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *`help`* : displays this guide inside the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/CS2113`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/CS2113 t/urgent` or as `n/CS2113`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/urgent`, `t/urgent t/math` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME d/DATE`, `d/DATE n/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Dates are in the format DD-MM."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "// tag::loginfunction[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Signing up for an account : `signup`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Creates an account for the user. To `signup`, there must be no existing account.* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Only one account can be created per user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Passwords should not have spaces and may only include the following special characters: +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "!#$%\u0026\u0027*+/\u003d?`{|}~^.@-"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Format: `signup u/USERNAME p/PASSWORD` +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `signup u/nicholas p/lee` +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Signed up: nicholas"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Logging into an account : `login`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Logs the user into their account. An account has to be created before logging in.* +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Format: `login u/USERNAME p/PASSWORD` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `login u/nicholas p/lee` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Logged in as nicholas"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Logging out of an account : `logout`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Logs user out of an account.* +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `logout` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Logged out of nicholas"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d\u003d\u003d Deleting an account : `deleteacc`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "*Deletes account in the system.* +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Only an admin is allowed to use this command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Format: `deleteacc`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "* `deleteacc` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "Account has been deleted!"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "// end::loginfunction[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`, `h`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Displays a list of commands +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `help` or `h`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Adding a task: `add`, `a`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Adds a task to Student Buddy. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `add n/NAME m/MODULE d/DATE p/PRIORITY [t/TAG]...` or `a n/NAME m/MODULE d/DATE p/PRIORITY [t/TAG]...`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "A task can have any number of tags (including 0)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `add n/Tutorial 3 m/CG1112 d/21-03 p/2 t/urgent` +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Adds a task with the name `Tutorial 3`, module code `CG1112`, date `21-03`, priority code `2`, with the tag `urgent`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `a n/Project Version 1 m/CS2113T d/11-03 p/1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Adds a task with the name `Project Version 1`, module code `CS2113T`, date `11-03` and priority code `2`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Listing all tasks : `list`, `l`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Shows a list of all tasks in Student Buddy. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `list` or `l`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Editing a task : `edit`, `e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Edits an existing task in Student Buddy. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Format: `edit INDEX [n/NAME] [m/MODULE] [d/DATE] [p/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "or `e INDEX [n/NAME] [m/MODULE] [d/DATE] [p/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* When editing tags, the existing tags of the task will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* `edit 1 n/Tutorial 4 d/21-03 t/urgent` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Edits the name and date of the 1st task to be `Tutorial 4` and `21-03` with the tag `urgent` respectively."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `edit 2 n/Project t/` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Edits the name of the 2nd task to be `Project` and clears all existing tags."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//tag::find[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by name: `findname`, `fn`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with names containing any of the given keywords. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findname KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The search is case insensitive. e.g `HOMEWORK` will match `homework`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113 Tutorial` will match `Tutorial CS2113`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Only full words will be matched e.g. `Assignments` will not match `Assignment`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Tasks matching at least one of the keywords will be returned (i.e. `OR` search). e.g. `CS2113 Assignment` will return `CS2113 Homework`, `Assignment 2`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findname Project Tutorial` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with names containing `Project` or `Tutorial`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fn Project Lab Report` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task having names `Project`, `Lab`, or `Report`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by module code: `findmodule`, `fm`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with module codes containing any of the given keywords. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findmodule KEYWORD [MORE_KEYWORDS]` or `fm KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The search is case insensitive. e.g `CS2113T` will match `cs2113t`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T CS2101` will match `CS2101 CS2113`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only the module code is searched."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only full words will be matched e.g. `CS2113T` will not match `CS2113`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findmodule CS2113T` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all tasks containing the module code `CS2113T`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fm CS2113T CS2101` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all tasks containing the module code `CS2113T` or `CS2101`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by date: `finddate`, `fd`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with dates containing any of the given keywords. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `finddate KEYWORD [MORE_KEYWORDS]` or `fd KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `03-03 21-03` will match `21-03 03-03`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `finddate 20-03` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with date 20-03."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fd 20-03 30-03` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with date 20-03 or 30-03."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by priority code: `findpriority`, `fp`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with priority code containing any of the given keywords. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findpriority KEYWORD [MORE_KEYWORDS]` or `fp KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `1 2` will match `2 1`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findpriority 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with priority code 1."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fp 1 3` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with priority code 1 or 3."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//end::find[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `delete`, `d`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Deletes the specified task from Student Buddy. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `delete INDEX` or `d INDEX`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Deletes the 2nd task in Student Buddy."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findname Project` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`d 1` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes the 1st task in the results of the `findname` command."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Selecting a task : `select`, `sl`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Selects the task identified by the index number used in the displayed task list. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `select INDEX` or `sl INDEX`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Selects the task and displays the task on the calendar."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Using `add`, `edit`, `delete`, `logout` or `month` will deselect the currently selected task."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Selects the 2nd task in Student Buddy."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findmodule CS2113` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`sl 1` +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Selects the 1st task in the results of the `findmodule` command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//tag::sort[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Sorting the task list : `sort`, `s`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Sorts the task list in Student Buddy according to an input parameter."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `sort PARAMETER` or `s PARAMETER`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Sorts the task list according to the `PARAMETER`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The parameter *must be one of the following* `name, module, date, priority`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* You can also use the initials of the parameter i.e `n`, `m`, `d` or `p`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `sort module` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list lexicographically by module code."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `s priority` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list in descending order by priority."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `s d` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list in chronological order by date"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// tag::notes[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Adding miscellaneous notes : `note`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Adds a note to Student Buddy."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Format: `note h/HEADING c/CONTENT p/PRIORITY`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "****"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Adds the note with the given parameters. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* _Priority_ can *only take numbers from 1 to 3* with 1 being the most urgent."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Notes with _Priority_ 1 will be displayed in *red* colour followed by 2 in *yellow* and 3 in *white*."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* `note h/Popular c/buy blue pens p/2` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Add a note with _heading_ Popular, _content_ buy blue pens and _priority_ 2."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The following are 2 diagrams that demostrate the example shown above. One of the diagram shows the state before the command is executed and the other shows the state after command is executed."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*Before:*"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::AddNotesBefore.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*After:*"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::AddNotesAfter.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d\u003d Deleting miscellaneous notes : `deletenote`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Deletes the specified note from Student Buddy. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Format: `deletenote INDEX`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Deletes the note at the specified _INDEX_."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The index refers to the _index_ number shown in the displayed notes list."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "****"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* `deletenote 2` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Deletes the 2nd note from the displayed notes list in Student Buddy."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "The following are 2 diagrams that demostrate the example shown above. One of the diagram shows the state before the command is executed and the other shows the state after command is executed."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*Before:*"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::DeleteNoteBefore.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*After:*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "image::DeleteNoteAfter.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// end::notes[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`, `u`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Restores Student Buddy to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `undo` or `u`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Undoable commands: those commands that modify Student Buddy\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "This reverses the `delete 1` command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "This reverses the `clear` command and the `delete 1` command."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`, `r`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `redo` or `r`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`r` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`r` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` , `c`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Clears all entries from Student Buddy. +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `clear` or `c`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Viewing tasks on a calendar"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Tasks displayed in the task list are automatically displayed on a calendar of the current month."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "In addition, the calendar comes with the following features:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Tasks are automatically colour-coded, with high, medium and low priority tasks appearing red, orange and blue, respectively."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Tasks are automatically listed in order of priority, from high to low."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* If the task list is modified with `add`, `delete` or `edit`, or it is filtered using `find`, the calendar will update accordingly."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Selecting a task will highlight it on the calendar for easy viewing."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Calendar cells are scrollable."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "A showcase of the calendar\u0027s features is displayed below:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "image::CalendarDemo.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d\u003d Changing the calendar month : `month`, `m`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Changes the month to be displayed by the calendar. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Format: `month MONTH` or `m MONTH`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "****"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* Changes the displayed month to the specified `MONTH`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* MONTH must be an integer between 1 and 12 inclusive."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* MONTH must not be the month already being displayed."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "****"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* `month 2` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Changes the month displayed to February."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* `m 11` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Changes the month displayed to November."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "Student Buddy\u0027s data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::deleteoverdue[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Deleting Overdue Tasks : `deleteoverdue`, `delod` `[coming in v2.0]`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all tasks that are overdue."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `deleteoverdue` or `delod`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`deleteoverdue` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all the overdue tasks in Student Buddy."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findname Project` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`delod` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all the task in the results of the `findname` command."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::deleteoverdue[]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// tag::notestorage[]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Retrieving of notes from storage: `[coming in v2.0]`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Student Buddy\u0027s notes will be stored inside *notes.json* file. Upon starting up Student Buddy, the notes will be retrieved from *notes.json* and displayed on the notes section of the GUI."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "// end::notestorage[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Student Buddy folder."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Add* `add n/NAME m/MODULE d/DATE p/PRIORITY [t/TAG]...` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "e.g. `add n/Tutorial 3 m/CG2023 d/21-02 p/3 t/urgent`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Add Note* `note note h/HEADING c/CONTENT p/PRIORITY` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "e.g. `note h/Popular c/buy blue pens p/2`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Delete Note* `deletenote INDEX` +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [m/MODULE] [d/DATE] [p/PRIORITY] [t/TAG]...` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "e.g. `edit 2 n/CG2027 Hw d/23-04`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Find Date* : `finddate KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `finddate 21-03`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Find Module* : `findmodule KEYWROD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `findmodule CS2113T`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Find Name* : `findname KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `findname Project`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Find Priority* : `findpriority KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `findpriority 1`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Login* : `login u/USERNAME p/PASSWORD` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `login u/nicholas p/abcdefg`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Logout* : `logout`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Month Change* : `month MONTH` +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "e.g. `month 11`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Sign-up* : `signup u/USERNAME p/PASSWORD` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g. `signup u/nicholas p/abcdefg`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Sort* : `sort KEYWORD` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "e.g `sort module`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 61,
      "Shengkok": 82,
      "khairulhazril": 163,
      "-": 172,
      "nicholasleeeee": 57
    }
  },
  {
    "path": "docs/team/justin-ong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d Justin Ong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003d\u003d PROJECT: Student Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "This portfolio serves to document my contributions to a team-based software engineering project for the module CS2113/T, Software Engineering and Object-Oriented Programming. My team comprised 4 members, including myself, and we were tasked with morphing or enhancing the https://github.com/se-edu/addressbook-level4[Addressbook Level 4 project] (AB4) by https://github.com/se-edu[SE-EDU] within *8 weeks*. We decided to morph AB4 into a task management app named *Student Buddy*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*Student Buddy* is a desktop application tailored to the needs of students at the National University of Singapore. Specifically, it is meant for students who are comfortable with using a Command Line Interface (CLI). The use of a CLI for user input allows users to input commands more efficiently than when using a conventional user interface, thereby allowing them to better manage their tasks and their time. The app does, however, retain a Graphical User Interface (GUI) for easy viewing of information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The project is written in Java, with JavaFX used to create the GUI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following list is a summary of my contributions to the project *Student Buddy*:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Major enhancement*: added a *calendar panel* to the GUI for *easy viewing of tasks and their deadlines*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** What it does: allows the user to view their tasks in a format that is *familiar* and *easy to read*. In addition, tasks are ordered and colour-coded by priority (high to low), allowing users to easily see which tasks are more urgent."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Justification: This feature improves the product significantly because a user is able to quickly and easily see what tasks are due and when, facilitating better time management."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Highlights: This enhancement piggybacks off of existing infrastructure, so future changes to underlying systems may cause the enhancement to break. It required an in-depth study of new concepts, as GUI modification was completely new to me before this project. I also wrote tests to ensure that the enhancement was working correctly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Minor enhancement*: added a `month` command to the app"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** What it does: allows the user to change the month displayed on the calendar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Code contributed*: https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dJustin-Ong[RepoSense]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "* *Other contributions*: +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "The following is a list of my other contributions to the project, besides the features I implemented. Relevant pull requests are listed beside each entry, if applicable."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Set up milestones in the team repo for tracking our progress on the project"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Set up tags for the team repo\u0027s issue tracker"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Deployed release v1.3.1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Enhancements to other features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Assisted in adding a due date display to the task card list in the GUI (https://github.com/CS2113-AY1819S2-M11-2/main/pull/94[#94])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Assisted in formatting and presentation of notes function in the GUI (https://github.com/CS2113-AY1819S2-M11-2/main/pull/119[#119])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Added functionality to select feature, causing selected tasks to be cleared upon modification of the task list (https://github.com/CS2113-AY1819S2-M11-2/main/pull/166[#166])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Assisted in fixing bugs and writing tests for other features (https://github.com/CS2113-AY1819S2-M11-2/main/pull/176[#176])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Adjusted the GUI as features were added and modified, whether by myself or teammates (https://github.com/CS2113-AY1819S2-M11-2/main/pull/94[#94], https://github.com/CS2113-AY1819S2-M11-2/main/pull/119[#119], https://github.com/CS2113-AY1819S2-M11-2/main/pull/166[#166])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Updated contents of the User and Developer Guides with my contributions, as well as cleaning up tone, grammar, formatting, etc (https://github.com/CS2113-AY1819S2-M11-2/main/pull/36[#36], https://github.com/CS2113-AY1819S2-M11-2/main/pull/84[#84], https://github.com/CS2113-AY1819S2-M11-2/main/pull/90[#90], https://github.com/CS2113-AY1819S2-M11-2/main/pull/108[#108], https://github.com/CS2113-AY1819S2-M11-2/main/pull/109[#109], https://github.com/CS2113-AY1819S2-M11-2/main/pull/119[#119], https://github.com/CS2113-AY1819S2-M11-2/main/pull/163[#163], https://github.com/CS2113-AY1819S2-M11-2/main/pull/167[#167], https://github.com/CS2113-AY1819S2-M11-2/main/pull/169[#169])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/cs2113-ay1819s2-t08-1/main/issues/89[1], https://github.com/cs2113-ay1819s2-t08-1/main/issues/99[2], https://github.com/cs2113-ay1819s2-t08-1/main/issues/95[3], https://github.com/cs2113-ay1819s2-t08-1/main/issues/91[4])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "*** Integrated https://coveralls.io/[Coveralls] to the team repo"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|_While the AB4 project came with a User Guide, our team had to modify it extensively to match our product. For my part, I wrote about the features of my calendar panel, and how users could use it. I also wrote about my month changing feature. Below is a sample of my work._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "|_The AB4 project also came with a Developer Guide, which we also modified to match our project. For my part, I wrote about the implementation of my calendar panel and the month changing feature. I also contributed towards cleaning up some grammar mistakes in the guide, as well as adjusting the tone and formatting to be more consistent. Below is a sample of my contributions._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendar]"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 34,
      "nicholasleeeee": 1,
      "-": 31
    }
  },
  {
    "path": "docs/team/khairulhazril.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "\u003d Khairul - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d PROJECT: Student Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "This portfolio serves to document my contributions in a team-based software engineering project for the module CS2113T."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The team comprises of 4 members ad we were tasked to develop a working application within 8 weeks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "We decided to morph the existing application into a task manager, called *Student Buddy*."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "To comply with the module requirements, the team is constrained to start from an existing code base – https://github.com/se-edu/addressbook-level4[Address Book Level 4] and the user must interact with the application via Command Line interface(CLI)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Student Buddy* is a desktop application created for students to assist them in managing their schedule."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to *Student Buddy*."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Major enhancement*: added *the ability to `sort` tasks*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** What it does: It allows the user to sort the tasks in the task list based on name, module code, date due or priority level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Justification: This feature improves significantly because it allows the user to organise the task list in a manner of their choosing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Highlights: It required an in-depth analysis and understanding on how the different components of the task manager is involved with each other."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Minor enhancement*: refactored the existing Address Book Level 4 and edited the code to make a basic task manager that was used as the base of Student Buddy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Minor enhancement*: created a `daysRemaining` function to find number of days remaining till the task is due and gave colour codes depending on how much days are left."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Minor enhancement*: created `findname`, `findmodule`, `finddate` and `findpriority` commands to be able to search not only by task name but by other variables."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* *Code contributed*: https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dKhairul[Reposense]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Set up the organization repository and its issue tracker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Managed releases `v1.2` and `v1.3` on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Enhancement to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Wrote tests for existing features to increase coverage by 10.48% (Pull Requests: https://github.com/CS2113-AY1819S2-M11-2/main/pull/110[110], https://github.com/CS2113-AY1819S2-M11-2/main/pull/171[171], https://github.com/CS2113-AY1819S2-M11-2/main/pull/173[#173])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Updated the content in the User and Developer Guides according to my contribution to the project (https://github.com/CS2113-AY1819S2-M11-2/main/pull/54[#54], https://github.com/CS2113-AY1819S2-M11-2/main/pull/79[#79])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Updated the existing images in the Developer Guide to fit the project (https://github.com/CS2113-AY1819S2-M11-2/main/pull/110/files[#110])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Wrote use cases and user stories"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/cs2113-ay1819s2-t08-2/main/issues/56[1], https://github.com/cs2113-ay1819s2-t08-2/main/issues/63[2], https://github.com/cs2113-ay1819s2-t08-2/main/issues/66[3])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users with the aim of providing clear and concise instructions at a level that is easy for the end-user to follow._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "(Start of extract from the User Guide)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//tag::find[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by name: `findname`, `fn`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with names containing any of the given keywords. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findname KEYWORD [MORE_KEYWORDS]` or `fn KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The search is case insensitive. e.g `HOMEWORK` will match `homework`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113 Tutorial` will match `Tutorial CS2113`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only full words will be matched e.g. `Assignments` will not match `Assignment`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Tasks matching at least one of the keywords will be returned (i.e. `OR` search). e.g. `CS2113 Assignment` will return `CS2113 Homework`, `Assignment 2`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findname Project Tutorial` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with names containing `Project` or `Tutorial`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fn Project Lab Report` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task having names `Project`, `Lab`, or `Report`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by module code: `findmodule`, `fm`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with module codes containing any of the given keywords. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findmodule KEYWORD [MORE_KEYWORDS]` or `fm KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The search is case insensitive. e.g `CS2113T` will match `cs2113t`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `CS2113T CS2101` will match `CS2101 CS2113`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only the module code is searched."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Only full words will be matched e.g. `CS2113T` will not match `CS2113`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findmodule CS2113T` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all tasks containing the module code `CS2113T`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fm CS2113T CS2101` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all tasks containing the module code `CS2113T` or `CS2101`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by date: `finddate`, `fd`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with dates containing any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `finddate KEYWORD [MORE_KEYWORDS]` or `fd KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `03-03 21-03` will match `21-03 03-03`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `finddate 20-03` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with date 20-03."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fd 20-03 30-03` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with date 20-03 or 30-03."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Locating tasks by priority code: `findpriority`, `fp`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Finds tasks with priority code containing any of the given keywords. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `findpriority KEYWORD [MORE_KEYWORDS]` or `fp KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The order of the keywords does not matter. e.g. `1 2` will match `2 1`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findpriority 1` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with priority code 1."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `fp 1 3` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Returns all task with priority code 1 or 3."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//end::find[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//tag::sort[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Sorting the task list : `sort`, `s`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list in Student Buddy according to an input parameter."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `sort PARAMETER` or `s PARAMETER`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* Sorts the task list according to the `PARAMETER`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* The parameter *must be one of the following* `name, module, date, priority`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* You can also use the initials of the parameter i.e `n`, `m`, `d` or `p`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `sort module` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list lexicographically by module code."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `s priority` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list in descending order by priority."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `s d` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Sorts the task list in chronological order by date"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::deleteoverdue[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Deleting Overdue Tasks : `deleteoverdue`, `delod` `[coming in v2.0]`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all tasks that are overdue."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Format: `deleteoverdue` or `delod`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`deleteoverdue` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all the overdue tasks in Student Buddy."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* `findname Project` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "`delod` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Deletes all the task in the results of the `findname` command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::deleteoverdue[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "(End of extract)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "(Start of extract from the Developer Guide)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::task[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Task Feature"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Current Implementation"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The task list is created by refactoring the existing code in the https://github.com/se-edu/addressbook-level4[Address Book Level 4]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The class diagram below illustrates the *task* class."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "image::TaskClassDiagram.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::task[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::sorttask[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Sort Task List Feature"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The sorting mechanism is facilitated by `TaskManager`, `Model` and `SortTaskList`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Given below is an example usage scenario."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 1. The user keys in `sort ATTRIBUTE`, the `SortCommandParser` will trim the command to get the attribute."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 2. If the attribute is valid, it will then create a new `SortCommand` and execute with the given attribute."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 3. `SortCommand` will then call `ModelManager#sortTask(toSortBy)`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 4. It will then call `TaskManager#sortTask(attribute)`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Then we convert the relevant attributes of the tasks in the Task List to string to compare using `string#compareTo()`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|Step 5. Then, we use `setTasks()` in `UniqueTaskList` to update the Task List."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "After returning the sorted Task List, the Task Manager is then committed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "The Sequence Diagram below illustrates how the sort mechanism functions. More specifically, sorting by module code."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How sort executes"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 1 (current choice):** Write a class separately for handling the sorting of the task list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Easy to read and debug, Follows OOP coding and thus easier for other coders to modify."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Difficult to implement."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 2:** Write a method for each attribute in `TaskManager`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Does not follow OOP coding."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::sorttask[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// tag::overdue[]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d [Proposed] Delete overdue"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Using the existing `daysRemaining` variable, upon entering `DeleteOverdue` in the command line, the command will iterate through all the tasks and check the value of `daysRemaining`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "If it is less than 0, the command will call the `DeleteCommand` to delete the overdue task."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How the delete overdue command executes"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 1 (current choice):** Write the command such that whenever there is an overdue task, it will call the `delete` command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Easy to use as it does not require changing the existing code much."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Will need to iterate through all the tasks."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* **Alternative 2:** Create a new class to store all overdue tasks that updates itself whenever a task is overdue."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Pros: Faster as it does not require iterating through all tasks."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** Cons: Requires more space to store all the overdue tasks"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// end::overdue[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by name"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by name"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by module"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by module"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by date"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by date"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Find task by priority"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to find a task by priority"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "2. Student Buddy shows the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 2b. The given index is invalid"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** 2bi. Student Buddy returns an error"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003d\u003d\u003d Use case: Sort tasks"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "1. User requests to sort tasks by an attribute"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "2. Student Buddy sorts the tasks according to user\u0027s input"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "* 1b. The given index is invalid"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "** 1ai. Student Buddy returns an error"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "(End of extract)"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 330,
      "nicholasleeeee": 1,
      "-": 33
    }
  },
  {
    "path": "docs/team/shengkok.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d PROJECT: Student Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003d\u003d Kayden - Project Portfolio"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "This portfolio serves to document my contributions in a team-based software engineering project CS2113T. My team comprises of 4 members and we were tasked to morph a *basic command line interface address book* within *8 weeks*. After some discussion, we decided that we will work towards a Task Manager named *Student Buddy*."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Note the following symbols and formatting used in the project portfolio:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* `command`: A grey highlight (called a mark-up) indicates that this is a command that can be inputted into the command line and executed by the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *important*: Bold mark-ups emphasize that this is a important word or phrase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* __method__: Italics mark-ups signify that this is a class or method name and one should take extra note as it will be useful in understanding the concepts or diagrams discussed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "Our project\u0027s ultimate aim is to *help students organise their tasks and notes more efficiently and effectively*. This is done through the following features. Student Buddy allows users to `add` and `delete` their tasks and miscellaneous notes; view tasks added easily via a calendar panel display; as well as incorporate a `signup` and `login` feature to strengthen the security of this application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*My role was to design and implement the `notes` feature* which allows user to `add` and `delete` miscellaneous notes as well as display them in a clear and concise manner. The following sections will highlight my enhancements in more detail, as well as illustrating the relevant sections that I have contributed to the user and developer guide."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "This section showcases the different aspects in which I have contributed to the project. These aspects include coding and the updating of user and developer guide."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Major enhancement*: added *the ability to `add notes` and `delete notes`*."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** What it does: allows the user to add in new notes to help keep track and manage notes. Unwanted notes or notes that are already completed can be removed by deleting the note."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Justification: This feature improves the product significantly because a user can now manage their miscellaneous activities other than school-related tasks which greatly enhances the usablility of Task Manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis and understanding of the design of Task Manager to know what are its restrictions and how it can be improved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Credits: All the team members."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Minor enhancement*: Added colour codes to depict the importance of a note according to `priority` levels 1 to 3. The highest priority 1 being red-orange followed by yellow for 2 and white for 3."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s2.github.io/dashboard-beta/#search\u003dLew%20Sheng%20Kok[Reposense]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Updated the GUI of the application by adding a panel to display notes: https://github.com/CS2113-AY1819S2-M11-2/main/pull/56[#56]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2113-AY1819S2-M11-2/main/pull/31[#31], https://github.com/CS2113-AY1819S2-M11-2/main/pull/3[#3]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Added notes section into user and developer guides which comprises of add notes and delete notes feature: https://github.com/CS2113-AY1819S2-M11-2/main/pull/56[#56], https://github.com/CS2113-AY1819S2-M11-2/main/pull/110[#110], https://github.com/CS2113-AY1819S2-M11-2/main/pull/123[#123], https://github.com/CS2113-AY1819S2-M11-2/main/pull/125[#125]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** PRs reviewed: https://github.com/CS2113-AY1819S2-M11-2/main/pull/36[#36], https://github.com/CS2113-AY1819S2-M11-2/main/pull/39[#39], https://github.com/CS2113-AY1819S2-M11-2/main/pull/122[#122]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2113-AY1819S2-T09-1/main/issues/189[1], https://github.com/CS2113-AY1819S2-T09-1/main/issues/182[2], https://github.com/CS2113-AY1819S2-T09-1/main/issues/176[3])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "** Project Management"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Created new branch v1.4"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*** Spearheaded the discussion of user stories under projects tab in Github: https://github.com/CS2113-AY1819S2-M11-2/main/projects/1[User_Stories]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|_We had to morph the original user guide for address book to adapt to Student Buddy. This includes all the morphed features as well as the additional features that we had implemented. The following is an extract from our Student Buddy User Guide, showing the instructions that I have added for the *notes* feature._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "{Start of extract}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnotes]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "{End of extract}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "|_We were also tasked to morph the original Developer Guide for address book. Inside the developer guide contains all the *technical information* such as how a feature is implemented, class diagrams as well as sequence diagrams. Given below are sections I contributed to the Developer Guide. They showcase my *ability to write technical documentation* as well as the *depth of my understanding* of this project._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "{Start of extract}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnotes]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnotesstorage]"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 41,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.storage.TaskManagerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManagerStorage taskManagerStorage \u003d new JsonTaskManagerStorage(userPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        storage \u003d new StorageManager(taskManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Optional\u003cReadOnlyTaskManager\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ReadOnlyTaskManager initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            addressBookOptional \u003d storage.readTaskManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaskManager\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleTaskManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            initialData \u003d new TaskManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TaskManager\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        logger.info(\"Starting TaskManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Priority Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 23,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1280;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTES_DISPLAYED_INDEX \u003d \"Invalid command format!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 1,
      "khairulhazril": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 15,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 9,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the TaskManager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see seedu.address.model.Model#getTaskManager()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of notes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see seedu.address.model.Model#selectedTaskProperty()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Current month of the calendar."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Current month according to system clock if not defined."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @see seedu.address.model.Model#currentMonthProperty()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    ReadOnlyProperty\u003cMonth\u003e currentMonthProperty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedTask(Task)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Selected notes in the filtered notes list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * null if no notes is selected."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @see seedu.address.model.Model#selectedNotesProperty()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets the selected note in the filtered notes list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedNotes(Notes)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void setSelectedNotes(Notes notes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns the current month of the model."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    Month getCurrentMonth();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 10,
      "Shengkok": 21,
      "khairulhazril": 18,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.parser.TaskManagerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final TaskManagerParser taskManagerParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private boolean taskManagerModified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerParser \u003d new TaskManagerParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // Set taskManagerModified to true whenever the models\u0027 task manager is modified."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.getTaskManager().addListener(observable -\u003e taskManagerModified \u003d true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerModified \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Command command \u003d taskManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (taskManagerModified) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            logger.info(\"Task list modified, saving to file.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                storage.saveTaskManager(model.getTaskManager());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return model.getTaskManager();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return model.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return model.selectedTaskProperty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.setSelectedTask(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return model.getFilteredNotesList(); }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.setSelectedNotes(notes); }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return model.selectedNotesProperty(); }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public Month getCurrentMonth() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return model.getMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return model.currentMonthProperty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 9,
      "Shengkok": 17,
      "khairulhazril": 21,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Adds a task to the task manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_NAME + \"Project Ver 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_MODULE + \"CS2113T \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_DATE + \"21-01 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_TAG + \"ungraded \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 24,
      "-": 44,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEADING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "* Adds a note to the task manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_HEADING + \"HEADING \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_CONTENT + \"CONTENT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_PRIORITY + \"PRIORITY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_HEADING + \"STATIONARY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_CONTENT + \"REMEMBER TO BUY BLUE PEN \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        + PREFIX_PRIORITY + \"3 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note already exists in the notes list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Notes wantAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public AddNotesCommand(Notes notes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        wantAdd \u003d notes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (model.hasNotes(wantAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.addNotes(wantAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.addJsonNotes(wantAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, wantAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            || (other instanceof seedu.address.logic.commands.AddNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u0026\u0026 wantAdd.equals(((AddNotesCommand) other).wantAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "Shengkok": 66,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Clears the task manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The task list has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.setTaskManager(new TaskManager());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 5,
      "-": 23,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAccountCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * DeleteAccountCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class DeleteAccountCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteacc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Account has been deleted!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_ADMIN_LOGIN \u003d \"You need to log in as an admin to use this command\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getAdminStatus()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ADMIN_LOGIN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username loginUsername \u003d model.getUsername();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.deleteAccount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loginUsername.toString()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the task manger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 10,
      "-": 48,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Deletes a note identified using it\u0027s displayed index from the task manger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class DeleteNotesCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletenote\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            + \": Deletes the note identified by the index number used in the displayed notes list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public DeleteNotesCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cNotes\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTES_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes notesToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.deleteNotes(notesToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS, notesToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                || (other instanceof DeleteNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNotesCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Shengkok": 56,
      "nicholasleeeee": 9,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Edits the details of an existing task in the task manager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_MODULE + \"CS2113T \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + PREFIX_DATE + \"21-01\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param index              of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Module updatedModule \u003d editTaskDescriptor.getModule().orElse(taskToEdit.getModule());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Due updatedDue \u003d editTaskDescriptor.getDue().orElse(taskToEdit.getDue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Task(updatedName, updatedModule, updatedDue, updatedPriority, updatedTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (taskToEdit.isSameTask(editedTask) || model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private Module module;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private Due due;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            setModule(toCopy.module);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            setDue(toCopy.due);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, module, due, priority, tags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return Optional.ofNullable(module);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void setModule(Module module) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public Optional\u003cDue\u003e getDue() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return Optional.ofNullable(due);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void setDue(Due due) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.due \u003d due;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    \u0026\u0026 getModule().equals(e.getModule())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    \u0026\u0026 getDue().equals(e.getDue())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 4,
      "khairulhazril": 89,
      "-": 140,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Student Buddy as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindDateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.DueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Finds and lists all tasks in task manager which has due dates containing any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finddate\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fd\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose due dates contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 24-03\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final DueContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindDateCommand(DueContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof FindDateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindDateCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 43,
      "-": 6,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Finds and lists all tasks in task manager whose module code contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findmodule\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose module code contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ModuleContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindModuleCommand(ModuleContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof FindModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindModuleCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 43,
      "-": 6,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindNameCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findname\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fn\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" tutorial project\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindNameCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof FindNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNameCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 43,
      "-": 6,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPriorityCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Finds and lists all task in task manager whose priority code contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindPriorityCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpriority\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose priority code contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final PriorityContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindPriorityCommand(PriorityContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof FindPriorityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPriorityCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 43,
      "-": 6,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Lists all tasks in the task manager to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 4,
      "-": 27,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Login command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"USERNAME: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                                             + PREFIX_USERNAME + \"PASSWORD: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                                             + PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged in as %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_LOGGED_USER \u003d \"You are already logged in!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_LOGGED_ADMIN \u003d \"You are logged in as admin.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_NO_ACCOUNT \u003d \"Please sign up!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"Please Login again! Invalid username or password \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                                               + \"Command Format: [login u/USERNAME p/PASSWORD]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private final User loginInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a LoginCommand to login user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public LoginCommand(User user) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginInfo \u003d user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Checks if user is already logged in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (model.getLoginStatus()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGGED_USER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Checks if admin is logged in"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (model.getAdminStatus()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGGED_ADMIN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Checks if user exists and logs into account"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.loginUser(loginInfo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Incorrect password or username"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loginInfo.getUsername().toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Logout Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logged out of %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_LOGIN \u003d \"You have already logged out. Please Login!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // User is already logged out"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Get username for printout statement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username loginUsername \u003d model.getUsername();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Clear user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.logout();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, loginUsername.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MonthCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Changes the displayed month of the calendar"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class MonthCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"month\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            + \": Changes the month displayed on the calendar.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            + \"Parameters: MONTH (must be an integer between 1 and 12 inclusive)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\d]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_MONTH_CHANGE_SUCCESS \u003d \"Month changed to %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MONTH \u003d \"The requested month is already being displayed\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_INVALID_MONTH \u003d \"Invalid month input!\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int MONTH_MIN \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int MONTH_MAX \u003d 12;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public MonthCommand(String month) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Month newMonth \u003d new Month(month);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (newMonth.equals(model.getMonth())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MONTH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (!isValidMonth(newMonth.toString())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setMonth(newMonth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        model.setSelectedTask(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MONTH_CHANGE_SUCCESS, newMonth.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns if a given string is a valid month."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            int month \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (month \u003e\u003d MONTH_MIN \u0026\u0026 month \u003c\u003d MONTH_MAX) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 68,
      "nicholasleeeee": 9,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Reverts the {@code model}\u0027s task manager to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!model.canRedoTaskManager()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.redoTaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 6,
      "-": 27,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Selects a task identified using it\u0027s displayed index from the task manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sl\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \": Selects the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_SELECT_TASK_SUCCESS \u003d \"Selected Task: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e filteredTaskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredTaskList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.setSelectedTask(filteredTaskList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_TASK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 8,
      "-": 48,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * SignUp Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class SignupCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"signup\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sign up for an Event Manager account. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_LOGGED \u003d \"You are logged in as %1$s!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Signed up: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_USER_EXISTS \u003d \"Please try another username!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_ACCOUNT_EXISTS \u003d \"Account has already been created!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid format! \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                                                      + \"Command Format: [signup u/USERNAME p/PASSWORD]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private final User signingUp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a SignupCommand to create a user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public SignupCommand(User user) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        signingUp \u003d user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (model.getLoginStatus()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LOGGED, model.getUsername().toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (model.userExists(signingUp)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_USER_EXISTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (model.accountExists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_EXISTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.newUser(signingUp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, signingUp.getUsername().toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Sorts the task list in the task manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \": Sorts the task list in the task manager.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Parameters: attribute\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task list sorted by %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \"Attribute should be one of the following: name, date, module or priority\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final String toSortBy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public SortCommand(String attribute) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(attribute);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        toSortBy \u003d attribute;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (toSortBy.equals(\"name\") || toSortBy.equals(\"module\") || toSortBy.equals(\"date\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || toSortBy.equals(\"priority\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            model.sortTask(toSortBy);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            model.commitTaskManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toSortBy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 toSortBy.equals(((SortCommand) other).toSortBy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 53,
      "-": 2,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Reverts the {@code model}\u0027s task manager to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.accountExists() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_ACCOUNT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!model.getLoginStatus() \u0026\u0026 !model.getAdminStatus()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_REQUIRED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!model.canUndoTaskManager()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.undoTaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 6,
      "-": 27,
      "nicholasleeeee": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MODULE, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRIORITY, PREFIX_MODULE, PREFIX_DATE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Module module \u003d ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Due due \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d new Task(name, module, due, priority, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 4,
      "khairulhazril": 20,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEADING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Heading;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Parses input arguments and creates a new AddNotesCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class AddNotesCommandParser implements Parser\u003cAddNotesCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNotesCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * and returns an AddNotesCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public AddNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HEADING, PREFIX_CONTENT, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_HEADING, PREFIX_CONTENT, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Heading heading \u003d ParserUtil.parseHeading(argMultimap.getValue(PREFIX_HEADING).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes notes \u003d new Notes(heading, content, priority);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new AddNotesCommand(notes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Prefix PREFIX_HEADING \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 2,
      "khairulhazril": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.DeleteNotesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class DeleteNotesCommandParser implements Parser\u003cDeleteNotesCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public DeleteNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return new DeleteNotesCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNotesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MODULE, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            editTaskDescriptor.setModule(ParserUtil.parseModule(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            editTaskDescriptor.setDue(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 17,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindDateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindDateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.DueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Parses input arguments and creates a new FindDateCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindDateCommandParser implements Parser\u003cFindDateCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindDateCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and returns an FindDateCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindDateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String[] dateKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new FindDateCommand(new DueContainsKeywordsPredicate(Arrays.asList(dateKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindModuleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Parses input arguments and creates a new FindModuleCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindModuleCommandParser implements Parser\u003cFindModuleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindModuleCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and returns an FindModuleCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String[] moduleKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new FindModuleCommand(new ModuleContainsKeywordsPredicate(Arrays.asList(moduleKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindNameCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Parses input arguments and creates a new FindNameCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindNameCommandParser implements Parser\u003cFindNameCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindNameCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and returns an FindNameCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 10,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPriorityCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindPriorityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Parses input arguments and creates a new FindPriorityCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindPriorityCommandParser implements Parser\u003cFindPriorityCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPriorityCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and returns an FindPriorityCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public FindPriorityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPriorityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String[] priorityKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(priorityKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateHash.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author nicholasleeeee-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.security.spec.InvalidKeySpecException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Generate Hash for User class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class GenerateHash {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_SIGNUP_ERROR \u003d \"Sign up error: Hashing error.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SALT \u003d \"nicholasSecretHash\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generate hash for password"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return hashedPassword"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String signUp(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String saltedPassword \u003d SALT + password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String hashedPassword \u003d generateHash(saltedPassword);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return hashedPassword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if password matches stored password"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param loginPassword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storedPassword"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if password matches"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Boolean login(String loginPassword, String storedPassword) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Boolean isAuthenticated;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String saltedPassword \u003d SALT + loginPassword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String hashedPassword \u003d generateHash(saltedPassword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hashedPassword.equals(storedPassword)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            isAuthenticated \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            isAuthenticated \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAuthenticated;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Generate hash"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return hash string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String generateHash(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder hash \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageDigest nic \u003d MessageDigest.getInstance(\"SHA-1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            byte[] hashedBytes \u003d nic.digest(input.getBytes());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            char[] digits \u003d {\u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027, \u0027e\u0027, \u0027f\u0027};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int index \u003d 0; index \u003c hashedBytes.length; ++index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                byte b \u003d hashedBytes[index];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                hash.append(digits[(b \u0026 0xf0) \u003e\u003e 4]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                hash.append(digits[b \u0026 0x0f]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchAlgorithmException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            new IncorrectCommand(String.format(COMMAND_SIGNUP_ERROR));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return hash.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "nicholasleeeee": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parsePassword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseUsername;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Login Command Parser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a LoginCommand parser to log the user in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param args username and password"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return LoginCommand object with a User class containing username and password"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!invalidPrefix(map, PREFIX_USERNAME, PREFIX_PASSWORD) || !map.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username username \u003d parseUsername(map.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Password password \u003d parsePassword(map.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new User(username, password);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new LoginCommand(user);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A check for valid prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param argumentMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param prefixes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if none of the values are empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static boolean invalidPrefix(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MonthCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Parses"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class MonthCommandParser implements Parser\u003cMonthCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindDateCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * and returns an FindDateCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public MonthCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MonthCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String date \u003d trimmedArgs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return new MonthCommand(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Heading;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Makes sure username is valid and in the right form"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return trimmed username"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the username is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimUsername \u003d username.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Username.isValidUsername(trimUsername)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Username(trimUsername);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Makes sure password is valid and in the right form"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return trimmed password"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimPassword \u003d password.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Password.isValidPassword(trimPassword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Password(trimPassword);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses a {@code String phone} into a {@code Module}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the given {@code module} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Module parseModule(String module) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedModule \u003d module.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Module.isValidModule(trimmedModule)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException(Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Module(trimmedModule);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses a {@code String address} into an {@code Priority}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses a {@code String email} into an {@code Due}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Due parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Due.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException(Due.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Due(trimmedDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Parses a {@code String heading} into an {@code Heading}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws ParseException if the given {@code heading} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static Heading parseHeading(String heading) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(heading);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String trimmedHeading \u003d heading.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!Heading.isValidHeading(trimmedHeading)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new ParseException(Heading.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new Heading(trimmedHeading);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "Shengkok": 34,
      "khairulhazril": 26,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.SignupCommand.MESSAGE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parsePassword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseUsername;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.SignupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * SignupCommand Parser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class SignupCommandParser implements Parser\u003cSignupCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a SignupCommand parser to create a user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param args username and password"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return SignupCommand object with a User class containing username and password"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public SignupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!invalidPrefix(map, PREFIX_USERNAME, PREFIX_PASSWORD) || !map.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username username \u003d parseUsername(map.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Password password \u003d parsePassword(map.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new User(username, password);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new SignupCommand(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A check for valid prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param argumentMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param prefixes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if all prefixes are valid"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static boolean invalidPrefix(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String sort \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (sort.equals(\"n\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            sort \u003d \"name\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (sort.equals(\"d\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            sort \u003d \"date\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (sort.equals(\"p\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            sort \u003d \"priority\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (sort.equals(\"m\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            sort \u003d \"module\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (sort.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new SortCommand(sort);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskManagerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteAccountCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.DeleteNotesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindDateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindPriorityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.commands.MonthCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.SignupCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskManagerParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author nicholasleeeee"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        case SignupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new SignupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        case DeleteAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new DeleteAccountCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindDateCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new FindDateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindNameCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new FindNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindModuleCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new FindModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindPriorityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case FindPriorityCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new FindPriorityCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case SortCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        case AddNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return new AddNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        case DeleteNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return new DeleteNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        case MonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        case MonthCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            return new MonthCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 5,
      "Shengkok": 7,
      "khairulhazril": 39,
      "-": 90,
      "nicholasleeeee": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LoginEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.security.spec.InvalidKeySpecException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.parser.GenerateHash;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.storage.JsonLoginStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Login Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LoginEvent {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private JsonLoginStorage loginStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private User user;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private boolean loginStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private boolean adminStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(LoginEvent.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Constructor to start user with stub username and password"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public LoginEvent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Path loginInfoPath \u003d Paths.get(\"account.json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Username username \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Password password \u003d new Password(\"admin\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        user \u003d new User(username, password);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginStatus \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        adminStatus \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            loginStorage \u003d new JsonLoginStorage(loginInfoPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        newUser(user);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Reinitialize LoginEvent"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void reinitialize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Path loginInfoPath \u003d Paths.get(\"account.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Username username \u003d new Username(\"admin\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        final Password password \u003d new Password(\"admin\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        user \u003d new User(username, password);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginStatus \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        adminStatus \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            loginStorage \u003d new JsonLoginStorage(loginInfoPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        newUser(user);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a new user in JSON file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void newUser(User user) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String loginUsername \u003d user.getUsername().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String loginPassword \u003d user.getPassword().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            String hashedPassword \u003d GenerateHash.signUp(loginPassword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            loginStorage.newUser(loginUsername, hashedPassword);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            logger.warning(\"Password cannot be hashed\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            logger.warning(\"account.json cannot be found in file path\" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            logger.warning(\"User storage is unable to read or write to Json file\" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Checks if user exists and logs into account"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void loginUser(User user) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String loginUsername \u003d user.getUsername().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String loginPassword \u003d user.getPassword().toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Map\u003cString, String\u003e accounts \u003d loginStorage.getAccounts();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (accounts.containsKey(loginUsername)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            boolean passwordAuthenticate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            String storedPassword \u003d accounts.get(loginUsername);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            passwordAuthenticate \u003d GenerateHash.login(loginPassword, storedPassword);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            if (passwordAuthenticate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                this.user \u003d user;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                loginStatus \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            if (loginUsername.equals(\"admin\") \u0026\u0026 loginPassword.equals(\"admin\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                adminStatus \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Returns true if the user exists in the JSON file"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean userExists(User user) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String loginUsername \u003d user.getUsername().toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Map\u003cString, String\u003e accounts \u003d loginStorage.getAccounts();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return accounts.containsKey(loginUsername);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Returns true if there is already an account in the JSON file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean accountExists() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Map\u003cString, String\u003e accounts \u003d loginStorage.getAccounts();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (accounts.size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Deletes account.Json file with accounts"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void deleteAccount() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            loginStorage.deleteAccount();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            logger.warning(\"Unable to delete account\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        reinitialize();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Retrieves username of user"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return user"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return user.getUsername();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Logs user out and resets variables"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginStatus \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        adminStatus \u003d false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Retrieves the account status of the user"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if user is logged in"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginStatus;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Retrieves the account status of the admin"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if the admin is logged in"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return adminStatus;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    Predicate\u003cNotes\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the user prefs\u0027 task manager file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setTaskManagerFilePath(Path taskManagerFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the TaskManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ReadOnlyTaskManager getTaskManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces task manager data with the data in {@code taskManager}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setTaskManager(ReadOnlyTaskManager taskManager);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task manager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task must exist in the task manager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code task} must not already exist in the task manager."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code target} must exist in the task manager."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sorts the model\u0027s task manager according the chosen attribute"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void sortTask(String attribute);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if the model has previous task manager states to restore."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    boolean canUndoTaskManager();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if the model has undone task manager states to restore."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    boolean canRedoTaskManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Restores the model\u0027s task manger to its previous state."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void undoTaskManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Restores the model\u0027s task manager to its previously undone state."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void redoTaskManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Saves the current task manager state for undo/redo."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void commitTaskManager();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ReadOnlyProperty\u003cTask\u003e selectedTaskProperty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the selected task in the filtered task list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Task getSelectedTask();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void setSelectedTask(Task task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //@@author nicholasleeeee"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login Information \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Returns true if the user is logged in."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    boolean getLoginStatus();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Returns true if the admin is logged in."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    boolean getAdminStatus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Return Username of logged in user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    Username getUsername();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *  User logs out of Task Manager."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void logout();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * User account to Task Manager."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void loginUser(User loginInfo);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *  Returns true if user exists."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    boolean userExists(User user);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A new user is registered in Task Manager."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void newUser(User user);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * There is already an account created."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    boolean accountExists();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Deletes the account."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Only admin can access this command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void deleteAccount();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCalendar\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns an unmodifiable view of the current month property"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    ReadOnlyProperty\u003cMonth\u003e currentMonthProperty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Sets the month to display on the calendar"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    void setMonth(Month month);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Retrieves the month value of the calendar"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    Month getMonth();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNotes\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if a note with the same identity as {@code notes} exists in the task manager."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    boolean hasNotes(Notes notes);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Adds the given note."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code notes} must not already exist in the task manager."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void addNotes(Notes notes);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Add Notes into Json file"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void addJsonNotes(Notes notes);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns an unmodifiable view of the filtered notes list"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Selected task in the filtered task list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets the selected task in the filtered task list."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void setSelectedNotes(Notes notes);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns the selected task in the filtered task list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * null if no task is selected."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    Notes getSelectedNotes();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The task must exist in the task manager."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void deleteNotes(Notes target);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 19,
      "Shengkok": 57,
      "khairulhazril": 53,
      "-": 90,
      "nicholasleeeee": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.exceptions.NotesNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents the in-memory model of the task manager data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final VersionedTaskManager versionedTaskManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final FilteredList\u003cNotes\u003e filteredNotes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private final LoginEvent loginEvent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final NotesEvent notesEvent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final SimpleObjectProperty\u003cNotes\u003e selectedNotes \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private final SimpleObjectProperty\u003cMonth\u003e currMonth \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Initializes a ModelManager with the given taskManager and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ModelManager(ReadOnlyTaskManager taskManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireAllNonNull(taskManager, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        logger.fine(\"Initializing with task manager: \" + taskManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager \u003d new VersionedTaskManager(taskManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTaskManager.getTaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        filteredTasks.addListener(this::ensureSelectedTaskIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(versionedTaskManager.getNotesList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginEvent \u003d new LoginEvent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesEvent \u003d new NotesEvent();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        currMonth.setValue(new Month(Integer.toString(YearMonth.now().getMonthValue()))); //set initial month state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this(new TaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //@@author nicholasleeeee"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login Information \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginEvent.getLoginStatus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginEvent.getAdminStatus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean userExists(User user) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginEvent.userExists(user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean accountExists() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginEvent.accountExists();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void deleteAccount() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginEvent.deleteAccount();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void newUser(User user) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginEvent.newUser(user);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void loginUser(User loginInfo) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(loginInfo);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginEvent.loginUser(loginInfo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return loginEvent.getUsername();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginEvent.logout();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return userPrefs.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userPrefs.setTaskManagerFilePath(taskManagerFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedTaskManager;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.resetData(taskManager);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedTaskManager.hasTask(task);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.removeTask(target);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.addTask(task);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.setTask(target, editedTask);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.sortTask(attribute);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return versionedTaskManager.hasNotes(notes);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        versionedTaskManager.addNotes(notes);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesEvent.newNotes(notes);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        versionedTaskManager.removeNotes(target);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code versionedTaskManager}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dFiltered Notes List Accessors\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code versionedTaskManager}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedTaskManager.canUndo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedTaskManager.canRedo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void undoTaskManager() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.undo();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void redoTaskManager() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.redo();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void commitTaskManager() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.commit();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Month \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return currMonth;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return currMonth.getValue();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void setMonth(Month month) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        currMonth.setValue(month);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return selectedTask;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Task getSelectedTask() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return selectedTask.getValue();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (task !\u003d null \u0026\u0026 !filteredTasks.contains(task)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        selectedTask.setValue(task);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Ensures {@code selectedTask} is a valid task in {@code filteredTasks}."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void ensureSelectedTaskIsValid(ListChangeListener.Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (selectedTask.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                // null is always a valid selected task, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            boolean wasSelectedTaskReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTask.getValue());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (wasSelectedTaskReplaced) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                // Update selectedTask to its new value."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTask.getValue());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                selectedTask.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            boolean wasSelectedTaskRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    .anyMatch(removedTask -\u003e selectedTask.getValue().isSameTask(removedTask));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (wasSelectedTaskRemoved) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                // Select the task that came before it in the list,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                // or clear the selection if there is no such task."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                selectedTask.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedTaskManager.equals(other.versionedTaskManager)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedTask.get(), other.selectedTask.get());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected Notes\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return selectedNotes;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return selectedNotes.getValue();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (notes !\u003d null \u0026\u0026 !filteredNotes.contains(notes)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new NotesNotFoundException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        selectedNotes.setValue(notes);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 15,
      "Shengkok": 70,
      "khairulhazril": 87,
      "-": 164,
      "nicholasleeeee": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/NotesEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.storage.JsonNotesStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * A notes event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesEvent {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private JsonNotesStorage notesStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Notes notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Logger logger \u003d LogsCenter.getLogger(NotesEvent.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Constructor to start user with stub username and password"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesEvent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        final Path notesPath \u003d Paths.get(\"notes.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            notesStorage \u003d new JsonNotesStorage(notesPath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Creates a new user in JSON file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @param notes"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void newNotes(Notes notes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String newheading \u003d notes.getHeading().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String newcontent \u003d notes.getContent().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            notesStorage.newNotes(newheading, newcontent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            logger.warning(\"User storage is unable to read or write to Json file\" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public interface ReadOnlyTaskManager extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns an unmodifiable view of the notes list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * This list will not contain any duplicate notes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    ObservableList\u003cNotes\u003e getNotesList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "Shengkok": 8,
      "khairulhazril": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.UniqueNotesList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.SortTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Wraps all data at the task-manager level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskManager implements ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final UniqueNotesList unotes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        unotes \u003d new UniqueNotesList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Creates an TaskManager using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManager(ReadOnlyTaskManager toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Resets the existing data of this {@code TaskManager} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void resetData(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Adds a task to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code target} must exist in the task manager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task manager."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Removes {@code key} from this {@code TaskManager}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code key} must exist in the task manager."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sorts the task list according to the attribute"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(attribute);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortTaskList sortTaskList \u003d new SortTaskList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ObservableList\u003cTask\u003e sortedList \u003d sortTaskList.sortTask(obtainModifiableObservableList(), attribute);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList updateTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        updateTaskList.setTasks(sortedList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks.setTasks(updateTaskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e obtainModifiableObservableList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tasks.obtainObservableList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof TaskManager // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 tasks.equals(((TaskManager) other).tasks));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dNotes\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the task manager."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return unotes.contains(notes);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Adds a note to the task manager."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The note must not already exist in the task manager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void addNotes(Notes n) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        unotes.add(n);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ObservableList\u003cNotes\u003e getNotesList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return unotes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Replaces the given note {@code target} in the list with {@code editedNotes}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code target} must exist in the task manager."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The task identity of {@code editedNotes} must not be the same as another existing note in the task manager."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setNotes(Notes target, Notes editedNotes) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(editedNotes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        unotes.setNotes(target, editedNotes);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Removes {@code key} from this {@code TaskManager}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code key} must exist in the task manager."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void removeNotes(Notes key) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        unotes.remove(key);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "Shengkok": 53,
      "khairulhazril": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Path taskManagerFilePath \u003d Paths.get(\"data\", \"StudentBuddy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        setTaskManagerFilePath(newUserPrefs.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return taskManagerFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(taskManagerFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.taskManagerFilePath \u003d taskManagerFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 taskManagerFilePath.equals(o.taskManagerFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return Objects.hash(guiSettings, taskManagerFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskManagerFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 11,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTaskManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * {@code TaskManager} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class VersionedTaskManager extends TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cReadOnlyTaskManager\u003e taskManagerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public VersionedTaskManager(ReadOnlyTaskManager initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerStateList.add(new TaskManager(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Saves a copy of the current {@code TaskManager} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerStateList.add(new TaskManager(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerStateList.subList(currentStatePointer + 1, taskManagerStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        resetData(taskManagerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        resetData(taskManagerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return currentStatePointer \u003c taskManagerStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!(other instanceof VersionedTaskManager)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager otherVersionedTaskManager \u003d (VersionedTaskManager) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return super.equals(otherVersionedTaskManager)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 taskManagerStateList.equals(otherVersionedTaskManager.taskManagerStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTaskManager.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 17,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Password in User Account"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            \"Password should be alphanumeric and it should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.@-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final String PASSWORD_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public final String enteredPassword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Constructs a password"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        enteredPassword \u003d password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test if password is valid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if password is valid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return test.matches(PASSWORD_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return enteredPassword;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Password"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                \u0026\u0026 enteredPassword.equals(((Password) other).enteredPassword));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return enteredPassword.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * User Account"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    // Makes sure username and password is valid and puts into User"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public User(Username username, Password password) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d (User) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return this.username.equals(user.getUsername()) \u0026\u0026 this.password.equals(user.getPassword());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Username in User account"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            \"Username should be alphanumeric and it should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String USERNAME_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public final String enteredUsername;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Constructs an username"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        enteredUsername \u003d username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test if username is valid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return true if username is valid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return test.matches(USERNAME_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return enteredUsername;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Username"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                \u0026\u0026 enteredUsername.equals(((Username) other).enteredUsername));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return enteredUsername.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Content.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Represents a Note\u0027s content in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \"Content should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public final String realContent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Constructs a {@code Content}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @param content A valid content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        realContent \u003d content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return realContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 realContent.equals(((Content) other).realContent)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return realContent.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Heading.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Represents a Note\u0027s heading in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeading(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class Heading {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \"Headings should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public final String realHeading;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Constructs a {@code Heading}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @param heading A valid heading."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Heading(String heading) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(heading);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        checkArgument(isValidHeading(heading), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        realHeading \u003d heading;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if a given string is a valid heading."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static boolean isValidHeading(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return realHeading;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                || (other instanceof Heading // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 realHeading.equals(((Heading) other).realHeading)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return realHeading.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Notes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Represents a Note in the task manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Heading heading;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Notes(Heading heading, Content content, Priority priority) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireAllNonNull(heading, content, priority);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.heading \u003d heading;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Heading getHeading() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return heading;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return priority; }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if both notes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * This defines a weaker notion of equality between two notes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean isSameNotes(Notes otherNotes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (otherNotes \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return otherNotes !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 otherNotes.getHeading().equals(getHeading())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 (otherNotes.getContent().equals(getContent()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if both notes have the same identity and data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * This defines a stronger notion of equality between two notes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!(other instanceof Notes)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes otherNotes \u003d (Notes) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return otherNotes.getHeading().equals(getHeading())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 otherNotes.getContent().equals(getContent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return Objects.hash(heading, content, priority);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        builder.append(\" Heading: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .append(getHeading())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .append(\" Content: \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .append(getContent())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/UniqueNotesList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.exceptions.DuplicateNotesException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.exceptions.NotesNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * A note is considered unique by comparing using {@code Notes#isSameNotes(Notes)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * notes uses Notes#isSameNotes(Notes) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * unique in terms of identity in the UniqueNotesList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * @see Notes#isSameNotes(Notes)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class UniqueNotesList implements Iterable\u003cNotes\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean contains(Notes toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNotes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The note must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void add(Notes toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Removes the equivalent note from the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The note must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void remove(Notes toRemove) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new NotesNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setNotes(Notes target, Notes editedNotes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireAllNonNull(target, editedNotes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new NotesNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!target.isSameNotes(editedNotes) \u0026\u0026 contains(editedNotes)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        internalList.set(index, editedNotes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setNotes(UniqueNotesList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void setTasks(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ObservableList\u003cNotes\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Iterator\u003cNotes\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                || (other instanceof UniqueNotesList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueNotesList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private boolean notesAreUnique(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                if (notes.get(i).isSameNotes(notes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Shengkok": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/exceptions/DuplicateNotesException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Signals that the operation will result in duplicate Notes (Notes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class DuplicateNotesException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public DuplicateNotesException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        super(\"Operation would result in duplicate notes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/exceptions/NotesNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Signals that the operation is unable to find the specified note."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Due.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a Task\u0027s date in the task manager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class Due {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \"Date must be valid and should only be of the format DD-MM, where D and M are numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    + \"DD must range from 01 to 31 and MM must range from 01 to 12\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{2}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int DAY_MIN \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int DAY_MAX_FEB \u003d 28;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int DAY_MAX_FEB_LEAP \u003d 29;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int DAY_MAX_30 \u003d 30;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int DAY_MAX_31 \u003d 31;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int MONTH_MIN \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final int MONTH_MAX \u003d 12;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Constructs an {@code Due}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Due(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            String[] data \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            int day \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            int month \u003d Integer.parseInt(data[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (month \u003c MONTH_MIN || month \u003e MONTH_MAX || day \u003c DAY_MIN) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                if ((year % 400 \u003d\u003d 0) || ((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    return day \u003c\u003d DAY_MAX_FEB_LEAP;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    return day \u003c\u003d DAY_MAX_FEB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            } else if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                return day \u003c\u003d DAY_MAX_31;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                return day \u003c\u003d DAY_MAX_30;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String dateAsString \u003d toString() + \"-\" + Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            date \u003d dateFormat.parse(dateAsString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the current day"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Date getCurrentDate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Date();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Finds the number of days till the task is due"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param currentDay"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param taskDay"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int daysDifference(Date currentDay, Date taskDay) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        long duration \u003d taskDay.getTime() - currentDay.getTime();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (duration / (24 * 60 * 60 * 1000) \u003c -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (duration \u003c 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return (int) ((duration / (24 * 60 * 60 * 1000)) + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @return number of days till task is due"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int daysRemaining() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        int duration \u003d daysDifference(getCurrentDate(), getDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof Due // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 value.equals(((Due) other).value)); // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/DueContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Due} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class DueContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public DueContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDue().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof DueContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 keywords.equals(((DueContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a Task\u0027s module code in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModule(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \"Module code should be of the format AA[A]XXXX[B], where A and B are alphabets and X is a number, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    + \"[A] is optional for 3 letter module codes and [B] is optional for module codes with a suffix\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z]{2,3}[\\\\d]{4}[a-zA-Z]{0,1}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Constructs a {@code Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param module A valid module code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Module(String module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        checkArgument(isValidModule(module), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        value \u003d module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static boolean isValidModule(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 value.equals(((Module) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/ModuleContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Module} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class ModuleContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ModuleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getModule().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof ModuleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 keywords.equals(((ModuleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a Task\u0027s name in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The first character of the task must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a Task\u0027s address in the task manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \"Priority Code should only contain one number ranging from 1 to 3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[123]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Constructs an {@code Priority}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param priority A valid priority code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if a given string is a valid priority code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public int toInt() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 5,
      "khairulhazril": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/PriorityContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class PriorityContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public PriorityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getPriority().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof PriorityContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 keywords.equals(((PriorityContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/SortTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Sorts the task list according to the attribute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class SortTaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param internalList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param attribute"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @return sorted internalList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e sortTask(ObservableList\u003cTask\u003e internalList, String attribute) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FXCollections.sort(internalList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            public int compare(Task self, Task other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                switch(attribute) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    case (\"name\"): {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                        return self.getName().toString().compareTo(other.getName().toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    case (\"module\"): {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                        return self.getModule().toString().compareTo(other.getModule().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    case (\"date\"): {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                        return self.getDue().getDate().compareTo(other.getDue().getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    case (\"priority\"): {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                        return Integer.parseInt(self.getPriority().toString())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                - Integer.parseInt(other.getPriority().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                        return 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a Task in the task manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Due due;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Task(Name name, Module module, Due due, Priority priority, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireAllNonNull(name, module, due, priority, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Due getDue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return due;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return due.toString().substring(3, 5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return due.toString().substring(0, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int getDaysRemaining() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return due.daysRemaining();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns true if both tasks are identical except for tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (otherTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u0026\u0026 otherTask.getModule().equals(getModule())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u0026\u0026 otherTask.getDue().equals(getDue())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns true if both tasks are identical"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 otherTask.getModule().equals(getModule())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 otherTask.getDue().equals(getDue())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return Objects.hash(name, module, due, priority, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(getModule())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(\" Due: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(getDue())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 15,
      "khairulhazril": 47,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ObservableList\u003cTask\u003e obtainObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Represents the calendar\u0027s month."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void setValue(Month month) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.month \u003d month.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public int toInt() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return Integer.parseInt(month);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u0026\u0026 month.equals(((Month) other).month)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return month.hashCode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains utility methods for populating {@code TaskManager} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String currMonth \u003d Integer.toString(YearMonth.now().getMonthValue());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (currMonth.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            currMonth \u003d \"0\" + currMonth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Revision\"), new Module(\"CG2023\"), new Due(\"06-\" + currMonth),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"examNextDay\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Oral Presentation\"), new Module(\"CS2101\"), new Due(\"12-\" + currMonth),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"2\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"classParticipation\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Tutorial 3\"), new Module(\"GES1003\"), new Due(\"28-\" + currMonth),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"ungraded\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Add Test Cases\"), new Module(\"CS2113T\"), new Due(\"14-\" + currMonth),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Project\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Product Demo\"), new Module(\"CS2113T\"), new Due(\"15-\" + currMonth),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"graded\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Final Reflections\"), new Module(\"CS2101\"), new Due(\"15-\" + currMonth),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Graded\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Rewatch Lecture 6\"), new Module(\"CG2023\"), new Due(\"17-\" + currMonth),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"2\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Ungraded\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Finals\"), new Module(\"CG2028\"), new Due(\"20-\" + currMonth),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"veryImportant\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Finals\"), new Module(\"GES1003\"), new Due(\"27-\" + currMonth),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"veryImportant\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Redo Tutorial 2\"), new Module(\"CG2028\"), new Due(\"01-\" + currMonth),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Practice\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Tutorial 4\"), new Module(\"CG2028\"), new Due(\"04-\" + currMonth),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Practice\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Rewatch Lecture 4\"), new Module(\"CS2113T\"), new Due(\"11-\" + currMonth),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Notes\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"PPP Submission\"), new Module(\"CS2101\"), new Due(\"15-\" + currMonth),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"2\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Impt\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Lab Report\"), new Module(\"CG2028\"), new Due(\"19-\" + currMonth),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"CheckThrough\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"PE\"), new Module(\"CS2113T\"), new Due(\"17-\" + currMonth),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Attend\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Watch Lecture 10\"), new Module(\"GES1003\"), new Due(\"28-\" + currMonth),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Ungraded\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new Task(new Name(\"Consultation\"), new Module(\"CG2023\"), new Due(\"30-\" + currMonth),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"Tutorial3\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Tutorial 1\"), new Module(\"CG2023\"), new Due(\"02-\" + currMonth),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"1hr\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Tutorial 2\"), new Module(\"CG2023\"), new Due(\"04-\" + currMonth),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"1hr\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            new Task(new Name(\"Tutorial 3\"), new Module(\"CG2023\"), new Due(\"06-\" + currMonth),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    new Priority(\"3\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    getTagSet(\"1hr\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static ReadOnlyTaskManager getSampleTaskManager() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager sampleTm \u003d new TaskManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            sampleTm.addTask(sampleTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return sampleTm;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 16,
      "khairulhazril": 65,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final String module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name, @JsonProperty(\"module\") String module,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                           @JsonProperty(\"date\") String date, @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        module \u003d source.getModule().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        date \u003d source.getDue().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Module.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Module.isValidModule(module)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Module modelModule \u003d new Module(module);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Due.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Due.isValidDate(date)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(Due.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Due modelDue \u003d new Due(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Task(modelName, modelModule, modelDue, modelPriority, modelTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 5,
      "khairulhazril": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLoginStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import com.google.common.reflect.TypeToken;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * To access the LoginEvent stored as a JSON file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class JsonLoginStorage implements LoginStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"Account has been deleted!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String MESSAGE_DELETE_FAILURE \u003d \"There has been an error deleting account.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private String loginFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private Map\u003cString, String\u003e accounts;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public JsonLoginStorage(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginFilePath \u003d \"./\" + filePath.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (Files.notExists(filePath)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            createLoginInfoFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        setAccount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *  Adds properties to the Json file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void newUser(String username, String password) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        JsonObject jsonObject \u003d getJsonObject();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        jsonObject.addProperty(username, password);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        writeJson(new Gson(), jsonObject);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        setAccount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Gets the accounts as maps"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return accounts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override public Map\u003cString, String\u003e getAccounts() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return accounts;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Sets up user account"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException if account cannot be created"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private void setAccount() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Type type \u003d new TypeToken\u003cMap\u003cString, String\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        accounts \u003d new Gson().fromJson(new FileReader(loginFilePath), type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Convert user accounts as JSON objects"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return JSON objects"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException if obeject cannot be retrieved"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private JsonObject getJsonObject() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        JsonParser parser \u003d new JsonParser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        JsonElement jsonElement \u003d parser.parse(new FileReader(loginFilePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return jsonElement.getAsJsonObject();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates user account account with JSON file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException if cannot be written to JSON file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private void createLoginInfoFile() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        JsonObject jsonObject \u003d new JsonObject();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        writeJson(new Gson(), jsonObject);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * To write and store to JSON file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param gson"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param jsonObject"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private void writeJson(Gson gson, JsonObject jsonObject) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String json \u003d gson.toJson(jsonObject);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        FileWriter file \u003d new FileWriter(loginFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        file.write(json);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Deletes the JSON file with accounts in it"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void deleteAccount() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        File file \u003d new File(loginFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        if (file.delete()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_SUCCESS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonNotesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import com.google.common.reflect.TypeToken;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Access JSON event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class JsonNotesStorage implements NotesStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private String notesFilePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Map\u003cString, String\u003e notes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public JsonNotesStorage(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesFilePath \u003d \"./\" + filePath.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (Files.notExists(filePath)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            createNotesFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *  Adds properties to the Json file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void newNotes(String heading, String content) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        JsonObject jsonObject \u003d getJsonObject();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        jsonObject.addProperty(heading, content);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        writeJson(new Gson(), jsonObject);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        setNotes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Gets the accounts as maps"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @return accounts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override public Map\u003cString, String\u003e getNotes() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets up user account"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws IOException if account cannot be created"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private void setNotes() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Type type \u003d new TypeToken\u003cMap\u003cString, String\u003e\u003e(){}.getType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notes \u003d new Gson().fromJson(new FileReader(notesFilePath), type);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Convert user accounts as JSON objects"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @return JSON objects"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws IOException if obeject cannot be retrieved"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private JsonObject getJsonObject() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        JsonParser parser \u003d new JsonParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        JsonElement jsonElement \u003d parser.parse(new FileReader(notesFilePath));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return jsonElement.getAsJsonObject();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Creates user login account with JSON file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws IOException if cannot be written to JSON file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private void createNotesFile() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        JsonObject jsonObject \u003d new JsonObject();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        writeJson(new Gson(), jsonObject);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * To write and store to JSON file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @param gson"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @param jsonObject"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private void writeJson(Gson gson, JsonObject jsonObject) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String json \u003d gson.toJson(jsonObject);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        FileWriter file \u003d new FileWriter(notesFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        file.write(json);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * An Immutable TaskManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "class JsonSerializableTaskManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Constructs a {@code JsonSerializableTaskManager} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public JsonSerializableTaskManager(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskManager} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTaskManager}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public JsonSerializableTaskManager(ReadOnlyTaskManager source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TaskManager} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (taskManager.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskManagerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A class to access TaskManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class JsonTaskManagerStorage implements TaskManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public JsonTaskManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return readTaskManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Similar to {@link #readTaskManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Optional\u003cJsonSerializableTaskManager\u003e jsonTaskManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                filePath, JsonSerializableTaskManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!jsonTaskManager.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return Optional.of(jsonTaskManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        saveTaskManager(taskManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Similar to {@link #saveTaskManager(ReadOnlyTaskManager)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(taskManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskManager(taskManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LoginStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Login Storage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public interface LoginStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Creates a new user account"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param username"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @param password"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException if account cannot be created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void newUser(String username, String password) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Retrieves the accounts in a map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @return map of accounts, JSON object with user account username and password"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws IOException if accounts cannot be retrieved from JSON file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    Map\u003cString, String\u003e getAccounts() throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Deletes the account in the JSON file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * @throws CommandException if the JSON file cannot be deleted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    void deleteAccount() throws CommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Notes storage"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public interface NotesStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    void newNotes(String heading, String content) throws IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    Map\u003cString, String\u003e getNotes() throws IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public interface Storage extends TaskManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Manages storage of TaskManager data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private TaskManagerStorage taskManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public StorageManager(TaskManagerStorage taskManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.taskManagerStorage \u003d taskManagerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return taskManagerStorage.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return readTaskManager(taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return taskManagerStorage.readTaskManager(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        saveTaskManager(taskManager, taskManagerStorage.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManagerStorage.saveTaskManager(taskManager, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskManagerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Represents a storage for {@link TaskManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public interface TaskManagerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Path getTaskManagerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns TaskManager data as a {@link ReadOnlyTaskManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see #getTaskManagerFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Optional\u003cReadOnlyTaskManager\u003e readTaskManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskManager} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @param taskManager cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see #saveTaskManager(ReadOnlyTaskManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarCell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.control.ScrollPane.ScrollBarPolicy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Individual cell for CalendarPanel."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class CalendarCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String FXML \u003d \"CalendarCell.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final BackgroundFill backgroundFill \u003d new BackgroundFill(Paint.valueOf(\"#FFFFFF\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final Background background \u003d new Background(backgroundFill);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final Border border \u003d new Border(new BorderStroke(Paint.valueOf(\"#0F0F0F\"), BorderStrokeStyle.SOLID,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            CornerRadii.EMPTY, BorderStroke.THIN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int CELL_WIDTH \u003d 110;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private String month;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Task selectedTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private ArrayList\u003cCalendarCellTask\u003e cellTasks \u003d new ArrayList\u003cCalendarCellTask\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Text cellDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private ScrollPane cellTasksPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private VBox cellContent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Creates a cell for CalendarPanel."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param date Date to be displayed on the cell"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param taskList List of tasks currently in Task Manager"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public CalendarCell(String date, String month, ObservableList\u003cTask\u003e taskList, Task selectedTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.selectedTask \u003d selectedTask;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setMonth(month);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        getTasks(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setAppearance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Adds the date to the cell"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void setDate(String date) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        cellDate.setText(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Sets the month parameter of the cell"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void setMonth(String month) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Compiles a list of tasks to be added to the cell"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param taskList List of tasks currently in Task Manager"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void getTasks(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            String currFullDate \u003d task.getDue().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            String currDateString \u003d currFullDate.substring(0, currFullDate.indexOf(\"-\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            String currMonthString \u003d currFullDate.substring(currFullDate.indexOf(\"-\") + 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            int currDate \u003d Integer.parseInt(currDateString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            int currMonth \u003d Integer.parseInt(currMonthString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (currDate \u003d\u003d Integer.parseInt(date) \u0026\u0026 currMonth \u003d\u003d Integer.parseInt(month)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                boolean selected \u003d task.isSameTask(selectedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                CalendarCellTask newTask \u003d new CalendarCellTask(task, selected);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                newTask.setWrappingWidth(CELL_WIDTH - 20); //add a bit of padding for better text wrapping"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                cellTasks.add(newTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        addTasksToCell();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Sets the background, border and scrollbars of the cell"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void setAppearance() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        getRoot().setBackground(background);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        getRoot().setBorder(border);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        cellTasksPane.setHbarPolicy(ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        cellTasksPane.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Adds tasks to the calendar cell, tasks sorted by priority in descending order"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void addTasksToCell() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        //sort tasks by priority"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        cellTasks.sort(CalendarCellTask::compareTo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (CalendarCellTask newTask : cellTasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            cellContent.getChildren().add(newTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 129,
      "khairulhazril": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarCellTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Individual text for filling CalendarCell"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class CalendarCellTask extends Text {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //Colours for priority, in order for highest to lowest. In order, red, orange, blue."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String[] PRIORITY_COLOURS \u003d new String[] { \"#FF2D00\", \"#FFA000\", \"#0000FF\" };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Creates a text object for CalendarCell"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param task task to display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public CalendarCellTask(Task task, boolean selected) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setPriority(task.getPriority().toInt());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setText(task.getModule().toString() + \": \" + task.getName().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setTextProperties(selected);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Sets the priority of the CalendarCellTask"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param priority Priority of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Retrieves the priority value of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @return Integer value of priority"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Sets the colour of the text based on the priority of the task. Highlights the task if it is selected."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void setTextProperties(boolean selected) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        setFill(Paint.valueOf(PRIORITY_COLOURS[priority - 1]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (selected) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            setUnderline(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            setFont(Font.font(Font.getDefault().getName(), FontWeight.BOLD, Font.getDefault().getSize()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Custom comparator to allow for sorting by priority"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param task CalendarCellTask object to compare current CalendarCellTask against"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @return 0 if equal, \u003c0 if current task\u0027s priority is lower, \u003e0 if current task\u0027s priority is higher"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public int compareTo(CalendarCellTask task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return Integer.compare(getPriority(), task.getPriority());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.RowConstraints;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Panel that displays a calendar in grid format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static Text monthLabel \u003d new Text();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int COLS \u003d 7; // 7 Days in a week"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int ROWS \u003d 8; // 6 Rows + Day Header + Month Header"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int ROW_HEIGHT \u003d 80;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int COL_WIDTH \u003d 110;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int HEADER_HEIGHT \u003d 20;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String[] DAYS \u003d new String[] { \"SUNDAY\", \"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        \"FRIDAY\", \"SATURDAY\" };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String[] MONTHS \u003d new String[] { \"JANUARY\", \"FEBRUARY\", \"MARCH\", \"APRIL\", \"MAY\", \"JUNE\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        \"JULY\", \"AUGUST\", \"SEPTEMBER\", \"OCTOBER\", \"NOVEMBER\", \"DECEMBER\" };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final BackgroundFill backgroundFill \u003d new BackgroundFill(Paint.valueOf(\"#FFFFFF\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            CornerRadii.EMPTY, Insets.EMPTY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final Background background \u003d new Background(backgroundFill);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final Border border \u003d new Border(new BorderStroke(Paint.valueOf(\"#0F0F0F\"), BorderStrokeStyle.SOLID,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            CornerRadii.EMPTY, BorderStroke.THIN));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //get current year and month and date as set by system clock"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static Month currMonth \u003d new Month(Integer.toString(yearMonth.getMonthValue()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), currMonth.toInt(), 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Task selectedTask;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private GridPane taskGridPane;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public CalendarPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                         ObservableValue\u003cMonth\u003e currMonth, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        buildCalendarPane(taskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskList.addListener((ListChangeListener\u003c? super Task\u003e) (observable) -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            ObservableList\u003cTask\u003e newTaskList \u003d logic.getFilteredTaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            createCalendarCells(newTaskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        selectedTask.addListener((ChangeListener\u003c? super Task\u003e) (observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected task,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (Objects.equals(oldValue, newValue)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            this.selectedTask \u003d newValue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            resetCalendar();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            buildCalendarPane(taskList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        currMonth.addListener((ChangeListener\u003c? super Month\u003e) (observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (Objects.equals(oldValue, newValue)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                this.currMonth \u003d newValue;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                resetCalendar();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                buildCalendarPane(taskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Builds calendar."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void buildCalendarPane(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        buildGrid();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        createHeaderCells();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        writeMonthHeader();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        writeDayHeaders();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        createCalendarCells(taskList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Assigns row/col dimension constraints to grid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void buildGrid() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        RowConstraints row;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        ColumnConstraints column;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        //create empty rows and columns"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int i \u003d 0; i \u003c COLS; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            column \u003d new ColumnConstraints(COL_WIDTH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            column.setHgrow(Priority.ALWAYS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            taskGridPane.getColumnConstraints().add(column);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int i \u003d 0; i \u003c ROWS; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (i \u003d\u003d 0 || i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                row \u003d new RowConstraints(HEADER_HEIGHT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                row \u003d new RowConstraints(ROW_HEIGHT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            taskGridPane.getRowConstraints().add(row);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Populates grid with header cells."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void createHeaderCells() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int col \u003d 0; col \u003c COLS; col++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            for (int row \u003d 0; row \u003c ROWS; row++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                if (col \u003d\u003d 0 \u0026\u0026 row \u003d\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    taskGridPane.add(new VBox(), col, row, COLS, 1); //month header"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                } else if (row \u003d\u003d 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                } else if (row \u003d\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    taskGridPane.add(new VBox(), col, row, 1, 1); //day headers"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Writes month to top row of grid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void writeMonthHeader() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String month \u003d MONTHS[Integer.parseInt(currMonth.toString()) - 1];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String year \u003d String.valueOf(calendarDate.getYear());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (Node node : taskGridPane.getChildren()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (GridPane.getRowIndex(node) \u003d\u003d 0 \u0026\u0026 GridPane.getColumnIndex(node) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                VBox box \u003d (VBox) node;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                monthLabel.setText(month + \" \" + year);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                monthLabel.setFont(Font.font(Font.getDefault().getName(), FontWeight.BOLD,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                        Font.getDefault().getSize() + 5));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                box.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                box.getChildren().add(monthLabel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                box.setBackground(background);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                box.setBorder(border);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Writes day headers to second-highest row of grid."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void writeDayHeaders() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int i \u003d 0; i \u003c COLS; i++) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            for (Node node : taskGridPane.getChildren()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                if (GridPane.getRowIndex(node) \u003d\u003d 1 \u0026\u0026 GridPane.getColumnIndex(node) \u003d\u003d i) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    VBox box \u003d (VBox) node;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    Text header \u003d new Text(DAYS[i]);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    box.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    box.getChildren().add(header);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    box.setBackground(background);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    box.setBorder(border);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                } else if (GridPane.getRowIndex(node) \u003e 1) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Populates grid with calendar cells to correspond to the appropriate date"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * @param taskList List of tasks currently being displayed"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void createCalendarCells(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) { //get previous month\u0027s dates to be displayed"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int row \u003d 2; row \u003c ROWS; row++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            for (int col \u003d 0; col \u003c COLS; col++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                String date \u003d String.valueOf(calendarDate.getDayOfMonth());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                String month \u003d String.valueOf(calendarDate.getMonthValue());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                taskGridPane.add(new CalendarCell(date, month, taskList, selectedTask).getRoot(), col, row);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns the calendar GridPane"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public GridPane getTaskGridPane() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return taskGridPane;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Clears the GridPane and removes all formatting"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void resetCalendar() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.calendarDate \u003d LocalDate.of(yearMonth.getYear(), this.currMonth.toInt(), 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskGridPane.getChildren().clear(); //completely reset the calendar for rebuild"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskGridPane.getRowConstraints().clear();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskGridPane.getColumnConstraints().clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 245
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private NotesListPanel notesListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private GridPane calendarPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private StackPane notesListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                logic.currentMonthProperty(), logic);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList(), logic.selectedTaskProperty(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                logic::setSelectedTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskManagerFilePath(), logic.getTaskManager());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesListPanel \u003d new NotesListPanel(logic.getFilteredNotesList(), logic.selectedNotesProperty(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                logic::setSelectedNotes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesListPanelPlaceholder.getChildren().add(notesListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesListPanel getNotesListPanel() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return notesListPanel; }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 12,
      "Shengkok": 12,
      "khairulhazril": 3,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private static final String FXML \u003d \"NotesListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TaskManager level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public final Notes notes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Label heading;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesCard(Notes notes, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        heading.setText(notes.getHeading().realHeading);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        content.setText(notes.getContent().realContent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        heading.setWrapText(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        content.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String priorities \u003d notes.getPriority().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        int importance \u003d Integer.valueOf(priorities);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (importance \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            id.setStyle(\"-fx-text-fill: linear-gradient(red,yellow)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            heading.setStyle(\"-fx-text-fill: linear-gradient(red,yellow)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            content.setStyle(\"-fx-text-fill: linear-gradient(red,yellow)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (importance \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            id.setStyle(\"-fx-text-fill: linear-gradient(yellow,white)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            heading.setStyle(\"-fx-text-fill: linear-gradient(yellow,white)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            content.setStyle(\"-fx-text-fill: linear-gradient(yellow,white)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        NotesCard card \u003d (NotesCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u0026\u0026 notes.equals(card.notes);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "Shengkok": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * Panel containing the list of notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private static final String FXML \u003d \"NotesListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private ListView\u003cNotes\u003e notesListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesListPanel(ObservableList\u003cNotes\u003e notesList, ObservableValue\u003cNotes\u003e selectedNotes,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                         Consumer\u003cNotes\u003e onSelectedNotesChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NotesListPanel.NotesListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        notesListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            logger.fine(\"Selection in notes list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            onSelectedNotesChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        selectedNotes.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            logger.fine(\"Selected notes changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            if (Objects.equals(notesListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                notesListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                int index \u003d notesListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                notesListView.scrollTo(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                notesListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    class NotesListViewCell extends ListCell\u003cNotes\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        protected void updateItem(Notes notes, boolean empty) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            super.updateItem(notes, empty);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            if (empty || notes \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                setGraphic(new NotesCard(notes, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyTaskManager addressBook) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 10,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String[] PRIORITYNAMES \u003d new String[] { \"High\", \"Medium\", \"Low\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TaskManager level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Label module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Label due;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Label daysLeft;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        module.setText(task.getModule().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        due.setText(task.getDue().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        priority.setText(PRIORITYNAMES[Integer.parseInt(task.getPriority().value) - 1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (task.getDaysRemaining() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            daysLeft.setText(\"Task is overdue!!!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (task.getDaysRemaining() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            daysLeft.setText(\"Task is due today!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            daysLeft.setText(\"Days Left: \" + Integer.toString(task.getDaysRemaining()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        task.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        int daysRemaining \u003d task.getDaysRemaining();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (daysRemaining \u003c 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            id.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            name.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            module.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            due.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            priority.setStyle(\"-fx-text-fill: grey\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            daysLeft.setStyle(\"-fx-text-fill: red\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (daysRemaining \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            id.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            name.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            module.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            due.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            priority.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            daysLeft.setStyle(\"-fx-text-fill: orange\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        } else if (daysRemaining \u003c\u003d 7) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            id.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            name.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            module.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            due.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            priority.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            daysLeft.setStyle(\"-fx-text-fill: lightgreen\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 9,
      "khairulhazril": 48,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private ListView\u003cTask\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList, ObservableValue\u003cTask\u003e selectedTask,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                         Consumer\u003cTask\u003e onSelectedTaskChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        personListView.setItems(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            logger.fine(\"Selection in task list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            onSelectedTaskChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        selectedTask.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            logger.fine(\"Selected task changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected task,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 7,
      "khairulhazril": 13,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 20,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 16,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/CalendarCell.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003cVBox fx:id\u003d\"calendarCell\" alignment\u003d\"TOP_RIGHT\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    \u003cText fx:id\u003d\"cellDate\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"cellTasksPane\" cache\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        \u003cVBox fx:id\u003d\"cellContent\" alignment\u003d\"CENTER_LEFT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 12
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003cScrollPane xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" vbarPolicy\u003d\"AS_NEEDED\" hbarPolicy\u003d\"AS_NEEDED\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    \u003cGridPane fx:id\u003d\"taskGridPane\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 347
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "         title\u003d\"Student Buddy\" minWidth\u003d\"1280\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"230\" prefWidth\u003d\"230\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    \u003cGridPane fx:id\u003d\"calendarPlaceholder\" minWidth \u003d \"805\" prefWidth\u003d\"805\" \u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    \u003cVBox fx:id\u003d\"notesList\" minWidth\u003d\"200\" prefWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"notesListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 13,
      "Shengkok": 7,
      "-": 57
    }
  },
  {
    "path": "src/main/resources/view/NotesListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                \u003cLabel fx:id\u003d\"heading\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 30
    }
  },
  {
    "path": "src/main/resources/view/NotesListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    \u003cListView fx:id\u003d\"notesListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \u003cLabel fx:id\u003d\"module\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$module\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \u003cLabel fx:id\u003d\"due\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$due\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            \u003cLabel fx:id\u003d\"daysLeft\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 6,
      "-": 24
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    \u003clink href\u003d\"DarkTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskManagerTest/duplicateTaskTaskManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Tutorial\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CG2027\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"01-01\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        \"friends\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Tutorial\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CG2027\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "      \"date\": \"01-01\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "      \"priority\": \"1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskManagerTest/invalidTaskTaskManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Project\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CS2101\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableTaskManagerTest/typicalTasksTaskManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"_comment\": \"TaskManager save file which contains the same Task values as in TypicalTasks#getTypicalTaskManager()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"tasks\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Slides\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CS2113\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"03-03\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        \"ungraded\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Lab\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CG2023\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"21-01\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"2\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        \"graded\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Lecture\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CG2027\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"05-03\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 30
    }
  },
  {
    "path": "src/test/data/JsonTaskManagerStorageTest/invalidAndValidTaskTaskManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Task\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CS2113\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"01-01\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Person With Invalid Module Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"C2113S\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"01-01\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 16
    }
  },
  {
    "path": "src/test/data/JsonTaskManagerStorageTest/invalidTaskTaskManager.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  \"persons\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"module\": \"CS2113\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"date\": \"01-01\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "      \"priority\": \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 10
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "  \"addressBookFilePath\": \"StudentBuddy.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "  \"addressBookFilePath\": \"StudentBuddy.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.ui.CalendarPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Provides a handle for {@code CalendarPanelHandle} containing the grid of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * {@code CalendarContentCell}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class CalendarPanelHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String CALENDAR_PANEL_ID \u003d \"#calendarView\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int COLS \u003d 7; // 7 Days in a week"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final int ROWS \u003d 8; // 6 Rows + Day Header + Month Header"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public CalendarPanelHandle(CalendarPanel calendarPanel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        this.calendarPanel \u003d calendarPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns presence of calendar grid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public boolean isWindowPresent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return (calendarPanel.getRoot() instanceof ScrollPane \u0026\u0026 calendarPanel.getTaskGridPane() !\u003d null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public boolean isGridPresent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return (calendarPanel.getTaskGridPane().getRowCount() \u003d\u003d ROWS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                \u0026\u0026 calendarPanel.getTaskGridPane().getColumnCount() \u003d\u003d COLS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private final TaskListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //private final CalendarPanelHandle calendarPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        personListPanel \u003d new TaskListPanelHandle(getChildNode(TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        //calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_PANEL_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    //public CalendarPanelHandle getCalendarPanel() { return calendarPanel; }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Provides a handle to a task card in the task list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String PRIORITY_FIELD_ID \u003d \"#priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String MODULE_FIELD_ID \u003d \"#module\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Label priorityLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Label moduleLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        priorityLabel \u003d getChildNode(PRIORITY_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        moduleLabel \u003d getChildNode(MODULE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return priorityLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String getModule() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return moduleLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns true if this handle contains {@code task}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public boolean equals(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return getName().equals(task.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 getPriority().equals(task.getPriority().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 getModule().equals(task.getModule().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 getDate().equals(task.getDue().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(task.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 23,
      "-": 61
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TaskListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": " * Provides a handle for {@code TaskListPanel} containing the list of {@code TaskCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static final String TASK_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Optional\u003cTask\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskListPanelHandle(ListView\u003cTask\u003e taskListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        super(taskListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns a handle to the selected {@code TaskCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e selectedTaskList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (selectedTaskList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new AssertionError(\"Task list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedTaskList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Navigates the listview to display {@code task}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void navigateToCard(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        if (!getRootNode().getItems().contains(task)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new IllegalArgumentException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            getRootNode().scrollTo(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Selects the {@code TaskCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the task card handle of a task associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public TaskCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .map(TaskCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Task getPerson(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Remembers the selected {@code TaskCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns true if the selected {@code TaskCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 14,
      "khairulhazril": 17,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    protected Supplier\u003cReadOnlyTaskManager\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyTaskManager\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            JsonTaskManagerStorage jsonAddressBookStorage \u003d new JsonTaskManagerStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                jsonAddressBookStorage.saveTaskManager(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userPrefs.setTaskManagerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManager readStorageAddressBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return new TaskManager(storage.readTaskManager().get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            throw new AssertionError(\"Data is not in the TaskManager format.\", dce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return storage.getTaskManagerFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model copy \u003d new ModelManager((model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        //ModelHelper.setFilteredList(copy, model.getFilteredTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 19,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonTaskManagerStorage addressBookStorage \u003d new JsonTaskManagerStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // Setup LogicManager with JsonTaskManagerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonTaskManagerStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonTaskManagerIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(PROJECT).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        logic.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static class JsonTaskManagerIoExceptionThrowingStub extends JsonTaskManagerStorage {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private JsonTaskManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public void saveTaskManager(ReadOnlyTaskManager taskManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 51,
      "-": 161
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskInList \u003d model.getTaskManager().getTaskList().get(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 26,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.testutil.NotesBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class AddNotesCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        new AddNotesCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void execute_notesAccepted() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        ModelStubAcceptingNotesAdded modelStub \u003d new ModelStubAcceptingNotesAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes validNotes \u003d new NotesBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        CommandResult commandResult \u003d new AddNotesCommand(validNotes).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertEquals(String.format(AddNotesCommand.MESSAGE_SUCCESS, validNotes), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertEquals(Arrays.asList(validNotes), modelStub.notesAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void execute_duplicateNotes_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes validNotes \u003d new NotesBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        AddNotesCommand addnotesCommand \u003d new AddNotesCommand(validNotes);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithNotes(validNotes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        thrown.expectMessage(AddNotesCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        addnotesCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes market \u003d new NotesBuilder().withHeading(\"Market\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes popular \u003d new NotesBuilder().withHeading(\"Popular\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        AddNotesCommand addMarketCommand \u003d new AddNotesCommand(market);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        AddNotesCommand addPopularCommand \u003d new AddNotesCommand(popular);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(addMarketCommand.equals(addMarketCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        AddNotesCommand addMarketCopy \u003d new AddNotesCommand(market);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(addMarketCommand.equals(addMarketCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(addPopularCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(addPopularCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(addMarketCommand.equals(addPopularCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void sortTask(String attribute) { }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void loginUser(User loginInfo) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * A Model stub that contains a single note."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private class ModelStubWithNotes extends ModelStub {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        private final Notes notes;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        ModelStubWithNotes(Notes notes) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            requireNonNull(notes);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            this.notes \u003d notes;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            requireNonNull(notes);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return this.notes.isSameNotes(notes);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * A Model stub that always accept the note being added."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private class ModelStubAcceptingNotesAdded extends ModelStub {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        final ArrayList\u003cNotes\u003e notesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            requireNonNull(notes);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return notesAdded.stream().anyMatch(notes::isSameNotes);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            requireNonNull(notes);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            notesAdded.add(notes);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "           // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            return new TaskManager();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 346,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_emptyTaskManager_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_nonEmptyTaskManager_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTaskManager(new TaskManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 18,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEADING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_USERNAME \u003d \"Wonder Woman\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PASSWORD \u003d \"Why-1s-Zeu5-my-f4ther\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_HEADING_MARKET \u003d \"Market\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_CONTENT_MARKET \u003d \"Buy eggs\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_PRIORITY_MARKET \u003d \"2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_HEADING_POPULAR \u003d \"Popular\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_CONTENT_POPULAR \u003d \"Buy blue pens\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String VALID_PRIORITY_POPULAR \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_NAME_PROJECT \u003d \"Project\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_NAME_TUTORIAL \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_MODULE_PROJECT \u003d \"CS2113\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_MODULE_TUTORIAL \u003d \"CG2023\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_DATE_PROJECT \u003d \"03-03\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_DATE_TUTORIAL \u003d \"16-02\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_PRIORITY_PROJECT \u003d \"1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_PRIORITY_TUTORIAL \u003d \"2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_TAG_GRADED \u003d \"graded\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String VALID_TAG_UNGRADED \u003d \"ungraded\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERNAME_DESC \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String HEADING_DESC_MARKET \u003d \" \" + PREFIX_HEADING + VALID_HEADING_MARKET;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String CONTENT_DESC_MARKET \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_MARKET;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String PRIORITY_DESC_MARKET \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_MARKET;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String HEADING_DESC_POPULAR \u003d \" \" + PREFIX_HEADING + VALID_HEADING_POPULAR;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String CONTENT_DESC_POPULAR \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_POPULAR;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String PRIORITY_DESC_POPULAR \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_POPULAR;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String NAME_DESC_PROJECT \u003d \" \" + PREFIX_NAME + VALID_NAME_PROJECT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_NAME + VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MODULE_DESC_PROJECT \u003d \" \" + PREFIX_MODULE + VALID_MODULE_PROJECT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String MODULE_DESC_TUTORIAL \u003d \" \" + PREFIX_MODULE + VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DATE_DESC_PROJECT \u003d \" \" + PREFIX_DATE + VALID_DATE_PROJECT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DATE_DESC_TUTORIAL \u003d \" \" + PREFIX_DATE + VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String PRIORITY_DESC_PROJECT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String PRIORITY_DESC_TUTORIAL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String TAG_DESC_GRADED \u003d \" \" + PREFIX_TAG + VALID_TAG_UNGRADED;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String TAG_DESC_UNGRADED \u003d \" \" + PREFIX_TAG + VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_USERNAME_DESC \u003d \" \" + PREFIX_USERNAME + \"N!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + \"no space\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String INVALID_HEADING_DESC \u003d \" \" + PREFIX_HEADING + \"Jordan\u0027s 21st\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String INVALID_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + \"Buy cake and presents!!!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; //\u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String INVALID_MODULE_DESC \u003d \" \" + PREFIX_MODULE + \"CS21a3\"; //Module must be in the form AAXXXX"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"01-20\"; //Month must between 1 to 12"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY; //Empty string not allowed for priority"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; //\u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_PROJECT;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TUTORIAL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DESC_PROJECT \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_PROJECT)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withPhone(VALID_MODULE_PROJECT).withEmail(VALID_DATE_PROJECT).withAddress(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DESC_TUTORIAL \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_TUTORIAL)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withPhone(VALID_MODULE_TUTORIAL).withEmail(VALID_DATE_TUTORIAL).withAddress(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_GRADED, VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * - the address book, filtered task list and selected task in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager expectedTaskManager \u003d new TaskManager(actualModel.getTaskManager());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task expectedSelectedTask \u003d actualModel.getSelectedTask();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            assertEquals(expectedTaskManager, actualModel.getTaskManager());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            assertEquals(expectedSelectedTask, actualModel.getSelectedTask());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code model}\u0027s task manager."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s task manager."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.commitTaskManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * - the address book, filtered notes list and selected notes in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static void assertNotesCommandFailure(Command command, Model actualModel,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                                                 CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        TaskManager expectedTaskManager \u003d new TaskManager(actualModel.getTaskManager());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        List\u003cNotes\u003e expectedFilteredNotesList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredNotesList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes expectedSelectedNotes \u003d actualModel.getSelectedNotes();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            assertEquals(expectedTaskManager, actualModel.getTaskManager());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            assertEquals(expectedFilteredNotesList, actualModel.getFilteredNotesList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            assertEquals(expectedSelectedNotes, actualModel.getSelectedNotes());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "Shengkok": 45,
      "khairulhazril": 57,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAccountCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class DeleteAccountCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User admin \u003d new AccountBuilder().setUsername(\"admin\").setPassword(\"admin\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.loginUser(admin);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void successfulDeleteAccount() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        CommandResult commandResult \u003d new DeleteAccountCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(String.format(DeleteAccountCommand.MESSAGE_SUCCESS), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedDeleteAccount_notAdmin() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubUserNotAdmin modelStubUser \u003d new ModelStubUserNotAdmin();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(DeleteAccountCommand.MESSAGE_ADMIN_LOGIN);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        deleteAccountCommand.execute(modelStubUser, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedDeleteAccount_notLogged() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubUserNotLogged modelStubUser \u003d new ModelStubUserNotLogged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        DeleteAccountCommand deleteAccountCommand \u003d new DeleteAccountCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(DeleteAccountCommand.MESSAGE_ADMIN_LOGIN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        deleteAccountCommand.execute(modelStubUser, commandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void sortTask(String attribute) { }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User loginInfo) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A Model stub account logged in as admin"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubUser extends ModelStub {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A Model stub account not logged in as admin"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubUserNotAdmin extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * A Model stub account not logged in"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubUserNotLogged extends ModelStub {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 381
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskManager().getTaskList().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // delete -\u003e first task deleted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // undo -\u003e reverts taskmanager back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // redo -\u003e same first task deleted again"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 1. Deletes a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // redo -\u003e deletes same second task in unfiltered task list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 71,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskManager(model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskBuilder personInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d personInList.withName(VALID_NAME_TUTORIAL).withModule(VALID_MODULE_TUTORIAL)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_TUTORIAL)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withPhone(VALID_MODULE_TUTORIAL).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskManager(model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TUTORIAL).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskManager(model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // edit task in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskInList \u003d model.getTaskManager().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskManager().getTaskList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TUTORIAL).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskManager(model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // edit -\u003e first task edited"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // redo -\u003e same first task edited again"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 1. Edits a {@code Task} from a filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited task in the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the task object regardless of indexing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TaskManager(model.getTaskManager()), new UserPrefs());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task taskToEdit \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // edit -\u003e edits second task in unfiltered task list / first task in filtered task list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all persons"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertNotEquals(model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), taskToEdit);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // redo -\u003e edits same second task in unfiltered task list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_PROJECT);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_PROJECT);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_PROJECT)));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_TUTORIAL)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 116,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_PROJECT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(DESC_PROJECT.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(DESC_PROJECT.equals(DESC_PROJECT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(DESC_TUTORIAL));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor editedAmy \u003d new EditTaskDescriptorBuilder(DESC_PROJECT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_PROJECT).withPhone(VALID_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_PROJECT).withEmail(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_PROJECT).withAddress(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_PROJECT).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(DESC_PROJECT.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindDateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.DueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindDateCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindDateCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DueContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new DueContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DueContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new DueContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand findFirstCommand \u003d new FindDateCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand findSecondCommand \u003d new FindDateCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand findFirstCommandCopy \u003d new FindDateCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        DueContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand command \u003d new FindDateCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //DueContainsKeywordsPredicate predicate \u003d preparePredicate(\"Lab Tutorial\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //FindDateCommand command \u003d new FindDateCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertEquals(Arrays.asList(05-03), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses {@code userInput} into a {@code DueContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private DueContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new DueContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 81,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindModuleCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModuleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new ModuleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModuleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new ModuleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand findFirstCommand \u003d new FindModuleCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand findSecondCommand \u003d new FindModuleCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand findFirstCommandCopy \u003d new FindModuleCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModuleContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand command \u003d new FindModuleCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //DueContainsKeywordsPredicate predicate \u003d preparePredicate(\"Lab Tutorial\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //FindDateCommand command \u003d new FindDateCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertEquals(Arrays.asList(05-03), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses {@code userInput} into a {@code ModuleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private ModuleContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new ModuleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 81,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindNameCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindNameCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindNameCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand findFirstCommand \u003d new FindNameCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand findSecondCommand \u003d new FindNameCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand findFirstCommandCopy \u003d new FindNameCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_zeroKeywords_noTasksFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand command \u003d new FindNameCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Lab Tutorial\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    FindNamenCommand command \u003d new FindNameCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertEquals(Arrays.asList(LECTURE), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 23,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindPriorityCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPriorityCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindPriorityCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        PriorityContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        PriorityContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new PriorityContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand findFirstCommand \u003d new FindPriorityCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand findSecondCommand \u003d new FindPriorityCommand(secondPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand findFirstCommandCopy \u003d new FindPriorityCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        PriorityContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand command \u003d new FindPriorityCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //DueContainsKeywordsPredicate predicate \u003d preparePredicate(\"Lab Tutorial\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //FindDateCommand command \u003d new FindDateCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //assertEquals(Arrays.asList(05-03), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses {@code userInput} into a {@code ModuleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private PriorityContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new PriorityContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 81,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 6,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final CommandHistory EMPTY_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void nullUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        new LoginCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void successfulLogin() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        modelStubTestUser \u003d new ModelStubTestUser(user);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(user).execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, user.getUsername().toString()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(EMPTY_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedLogin_noUser() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User logginUser \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTakeUser;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        modelStubTakeUser \u003d new ModelStubTestUser(logginUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand(user);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(LoginCommand.MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginCommand.execute(modelStubTakeUser, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedLogin_alreadyLogged() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubUser modelStubUser;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        modelStubUser \u003d new ModelStubUser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand(user);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(String.format(LoginCommand.MESSAGE_LOGGED_USER, user.getUsername().toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        loginCommand.execute(modelStubUser, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub for failing methods from model"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User loginInfo) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model stub to test login"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubTestUser extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private User user;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isLogged \u003d false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isNotAdmin \u003d false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser(User user) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            this.user \u003d user;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return user.getUsername().equals(this.user.getUsername());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User user) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLogged \u003d user.equals(this.user);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isLogged;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isNotAdmin;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubUser extends ModelStub {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isLogged;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isCreated;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isAdmin;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubUser() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLogged \u003d true;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isCreated \u003d true;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isAdmin \u003d false;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isCreated;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isLogged;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isAdmin;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isCreated;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 387
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LogoutCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LogoutCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedLogout() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        LogoutCommand command \u003d new LogoutCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(LogoutCommand.MESSAGE_LOGIN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void successfulLogout() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        expectedModel.newUser(user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        expectedModel.loginUser(user);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        expectedModel.logout();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertCommandSuccess(new LogoutCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                String.format(LogoutCommand.MESSAGE_SUCCESS, user.getUsername().toString()), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MonthCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static org.junit.Assert.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.logic.commands.MonthCommand.MESSAGE_DUPLICATE_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.logic.commands.MonthCommand.MESSAGE_INVALID_MONTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.logic.commands.MonthCommand.MESSAGE_MONTH_CHANGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class MonthCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private int currMonth \u003d YearMonth.now().getMonthValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 12; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            if (i !\u003d currMonth) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                Month oldMonth \u003d model.getMonth();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                CommandResult expectedCommandResult \u003d new CommandResult(String.format(MESSAGE_MONTH_CHANGE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                        Integer.toString(i)), false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                MonthCommand newMonthCommand \u003d new MonthCommand(Integer.toString(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                assertCommandSuccess(newMonthCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                assertNotSame(oldMonth, model.getMonth());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                assertEquals(Integer.toString(i), model.getMonth().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void duplicate_month() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        MonthCommand sameMonth \u003d new MonthCommand(Integer.toString(currMonth));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertCommandFailure(sameMonth, model, commandHistory, MESSAGE_DUPLICATE_MONTH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void invalid_input() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        MonthCommand zeroMonth \u003d new MonthCommand(\"0\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        MonthCommand thirteenMonth \u003d new MonthCommand(\"13\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        MonthCommand stringMonth \u003d new MonthCommand(\"aaa\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertCommandFailure(zeroMonth, model, commandHistory, MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertCommandFailure(thirteenMonth, model, commandHistory, MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertCommandFailure(stringMonth, model, commandHistory, MESSAGE_INVALID_MONTH);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 57,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.undoTaskManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.undoTaskManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.redoTaskManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 22,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTaskManager().getTaskList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and checks that the model\u0027s selected task is set to the task at {@code index} in the filtered task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_TASK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.setSelectedTask(model.getFilteredTaskList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 26,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SignupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class SignupCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final CommandHistory emptyCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void nullAccount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        new SignupCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void successfulSignup() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User currentUser \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser \u003d new ModelStubTestUser(currentUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        CommandResult commandResult \u003d new SignupCommand(user).execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(String.format(SignupCommand.MESSAGE_SUCCESS, user.getUsername().toString()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(emptyCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedSignup_userExists() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser \u003d new ModelStubTestUser(user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        SignupCommand signupCommand \u003d new SignupCommand(user);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(SignupCommand.MESSAGE_USER_EXISTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        signupCommand.execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void failedSignup_loggedIn() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser \u003d new ModelStubTestUser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        SignupCommand failcommand \u003d new SignupCommand(user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        thrown.expectMessage(String.format(SignupCommand.MESSAGE_LOGGED, user.getUsername().toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        failcommand.execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub for failing methods from model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User user) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\"); }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\"); }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub to test signup"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubTestUser extends ModelStub {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private User user;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isLoggedIn;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //private boolean isAdminLoggedIn;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean accountExist \u003d false;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser(User user) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            this.user \u003d user;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLoggedIn \u003d false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            //isAdminLoggedIn \u003d false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLoggedIn \u003d true;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return user.getUsername().equals(this.user.getUsername());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return accountExist;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isLoggedIn;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // public boolean getAdminStatus() { return isAdminLoggedIn; }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 355
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.SortCommand.MESSAGE_INVALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_sortName_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String method \u003d \"name\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(method);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(sortCommand.MESSAGE_SUCCESS, method);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.sortTask(method);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(sortCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task1 \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task2 \u003d model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task3 \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2027\", task1.getModule().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2023\", task2.getModule().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CS2113\", task3.getModule().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_sortDate_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String method \u003d \"date\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(method);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(sortCommand.MESSAGE_SUCCESS, method);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.sortTask(method);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(sortCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task1 \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task2 \u003d model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task3 \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2023\", task1.getModule().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CS2113\", task2.getModule().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2027\", task3.getModule().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_sortPriority_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String method \u003d \"priority\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(method);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(sortCommand.MESSAGE_SUCCESS, method);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.sortTask(method);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(sortCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task1 \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task2 \u003d model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task3 \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CS2113\", task1.getModule().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2023\", task2.getModule().toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2027\", task3.getModule().toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void execute_sortModule_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String method \u003d \"module\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(method);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(sortCommand.MESSAGE_SUCCESS, method);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.sortTask(method);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.commitTaskManager();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandSuccess(sortCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task1 \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task2 \u003d model.getFilteredTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task3 \u003d model.getFilteredTaskList().get(INDEX_THIRD_TASK.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2023\", task1.getModule().toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CG2027\", task2.getModule().toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(\"CS2113\", task3.getModule().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void invalid_input() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(\"help\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertCommandFailure(sortCommand, model, commandHistory, MESSAGE_INVALID);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 117,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTaskManager(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.newUser(user);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        model.loginUser(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedModel.undoTaskManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 17,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNGRADED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TUTORIAL).withTags(VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PROJECT + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TUTORIAL + MODULE_DESC_PROJECT + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_PROJECT + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(TUTORIAL).withTags(VALID_TAG_UNGRADED, VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + TAG_DESC_GRADED, new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(PROJECT).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PROJECT + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_PROJECT, new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + VALID_MODULE_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + VALID_DATE_TUTORIAL"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + VALID_PRIORITY_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TUTORIAL + VALID_MODULE_TUTORIAL + VALID_DATE_TUTORIAL"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + VALID_PRIORITY_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED + TAG_DESC_GRADED, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + INVALID_MODULE_DESC + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED + TAG_DESC_GRADED, Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED + TAG_DESC_GRADED, Due.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + INVALID_PRIORITY_DESC + TAG_DESC_UNGRADED + TAG_DESC_GRADED, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + PRIORITY_DESC_TUTORIAL + INVALID_TAG_DESC + VALID_TAG_UNGRADED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MODULE_DESC_TUTORIAL + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + INVALID_PRIORITY_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 4,
      "khairulhazril": 65,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddNotesCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_MARKET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_POPULAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEADING_DESC_MARKET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEADING_DESC_POPULAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HEADING_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_MARKET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_POPULAR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_MARKET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEADING_MARKET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MARKET;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.MARKET;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.AddNotesCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Heading;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.testutil.NotesBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class AddNotesCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private AddNotesCommandParser parser \u003d new AddNotesCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes expectedNotes \u003d new NotesBuilder(MARKET).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + HEADING_DESC_MARKET + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, new AddNotesCommand(expectedNotes));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseSuccess(parser, HEADING_DESC_POPULAR + HEADING_DESC_MARKET + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, new AddNotesCommand(expectedNotes));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseSuccess(parser, HEADING_DESC_MARKET + CONTENT_DESC_MARKET + PRIORITY_DESC_POPULAR"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, new AddNotesCommand(expectedNotes));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseSuccess(parser, HEADING_DESC_MARKET + CONTENT_DESC_POPULAR + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, new AddNotesCommand(expectedNotes));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, VALID_HEADING_MARKET + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, HEADING_DESC_MARKET + VALID_CONTENT_MARKET"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, HEADING_DESC_MARKET + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + VALID_PRIORITY_MARKET, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, VALID_HEADING_MARKET + VALID_CONTENT_MARKET"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + VALID_PRIORITY_TUTORIAL, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, INVALID_HEADING_DESC + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, Heading.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, HEADING_DESC_MARKET + INVALID_CONTENT_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + PRIORITY_DESC_MARKET, Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, HEADING_DESC_MARKET + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, INVALID_HEADING_DESC + CONTENT_DESC_MARKET"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + INVALID_PRIORITY_DESC, Heading.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, \"z\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 2,
      "khairulhazril": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteNotesCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.logic.commands.DeleteNotesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class DeleteNotesCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private DeleteNotesCommandParser parser \u003d new DeleteNotesCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteNotesCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertParseFailure(parser, \"z\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                DeleteNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_PROJECT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PROJECT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNGRADED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_PROJECT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_PROJECT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_PROJECT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC, Module.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Due.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS); //invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC + DATE_DESC_PROJECT, Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_DESC_TUTORIAL + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GRADED + TAG_DESC_UNGRADED + TAG_EMPTY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GRADED + TAG_EMPTY + TAG_DESC_UNGRADED,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_GRADED + TAG_DESC_UNGRADED,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATE_DESC + VALID_PRIORITY_PROJECT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + VALID_MODULE_PROJECT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_DESC_TUTORIAL + TAG_DESC_UNGRADED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + DATE_DESC_PROJECT + PRIORITY_DESC_PROJECT + NAME_DESC_PROJECT + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withName(VALID_NAME_PROJECT)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withPhone(VALID_MODULE_TUTORIAL).withEmail(VALID_DATE_PROJECT).withAddress(VALID_PRIORITY_PROJECT)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_GRADED, VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_DESC_TUTORIAL + DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_MODULE_TUTORIAL)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withEmail(VALID_DATE_PROJECT).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withName(VALID_NAME_PROJECT).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_MODULE_PROJECT).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withEmail(VALID_DATE_PROJECT).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withAddress(VALID_PRIORITY_PROJECT).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_DESC_PROJECT + PRIORITY_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + TAG_DESC_GRADED + MODULE_DESC_PROJECT + PRIORITY_DESC_PROJECT + DATE_DESC_PROJECT + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + MODULE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + DATE_DESC_TUTORIAL + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_MODULE_TUTORIAL)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withEmail(VALID_DATE_TUTORIAL).withAddress(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_UNGRADED, VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MODULE_DESC + MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withPhone(VALID_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_TUTORIAL + INVALID_MODULE_DESC + PRIORITY_DESC_TUTORIAL"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPhone(VALID_MODULE_TUTORIAL).withEmail(VALID_DATE_TUTORIAL)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withAddress(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 85,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindDateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindDateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.DueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindDateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private FindDateCommandParser parser \u003d new FindDateCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand expectedFindDateCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new FindDateCommand(new DueContainsKeywordsPredicate(Arrays.asList(\"01-04\", \"21-04\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"01-04 21-04\", expectedFindDateCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \" \\n 01-04 \\n \\t 21-04  \\t\", expectedFindDateCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindModuleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindModuleCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private FindModuleCommandParser parser \u003d new FindModuleCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand expectedFindModuleCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new FindModuleCommand(new ModuleContainsKeywordsPredicate(Arrays.asList(\"CS2113T\", \"CS2101\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"CS2113T CS2101\", expectedFindModuleCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS2113T \\n \\t CS2101  \\t\", expectedFindModuleCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindNameCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindNameCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private FindNameCommandParser parser \u003d new FindNameCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand expectedFindNameCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new FindNameCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindNameCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindNameCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindPriorityCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindPriorityCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class FindPriorityCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private FindPriorityCommandParser parser \u003d new FindPriorityCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindPriorityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand expectedFindPriorityCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new FindPriorityCommand(new PriorityContainsKeywordsPredicate(Arrays.asList(\"01-04\", \"21-04\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"01-04 21-04\", expectedFindPriorityCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \" \\n 01-04 \\n \\t 21-04  \\t\", expectedFindPriorityCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final CommandHistory emptyCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private LoginCommandParser parserTest \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parseSuccess() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        modelStubTestUser \u003d new ModelStubTestUser(user);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(user).execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, user.getUsername().toString()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(emptyCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        // Parses correct username and password but wrong command id"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username username \u003d new Username(VALID_USERNAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Password password \u003d new Password(VALID_PASSWORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User currentUser \u003d new User(username, password);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseSuccess(parserTest, PREAMBLE_WHITESPACE + USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                new LoginCommand(currentUser));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseSuccess(parserTest, USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                new LoginCommand(currentUser));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for wrong username or password prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parse_missingField_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_FORMAT, LoginCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, USERNAME_DESC + VALID_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, VALID_USERNAME + PASSWORD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, VALID_USERNAME + VALID_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for invalid username or password"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parse_invalidDetails_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, INVALID_USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, USERNAME_DESC + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, INVALID_USERNAME_DESC + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, PREAMBLE_NON_EMPTY + USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                String.format(MESSAGE_INVALID_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub for failing methods from model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager taskManager) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User loginInfo) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model stub to test login"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubTestUser extends ModelStub {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private User user;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isLogged \u003d false;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isNotAdmin \u003d false;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser(User user) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            this.user \u003d user;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User user) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLogged \u003d user.equals(this.user);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isLogged;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isNotAdmin;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 371
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String INVALID_MODULE \u003d \"@\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String INVALID_DATE \u003d \"00-01\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#grade\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_NAME \u003d \"Test\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_MODULE \u003d \"CS1010\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_DATE \u003d \"01-01\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"graded\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"midterm\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseModule_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModule(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseModule_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseModule(INVALID_MODULE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseModule_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Module expectedModule \u003d new Module(VALID_MODULE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedModule, ParserUtil.parseModule(VALID_MODULE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseModule_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_MODULE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Module expectedModule \u003d new Module(VALID_MODULE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedModule, ParserUtil.parseModule(phoneWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Due expectedDue \u003d new Due(VALID_DATE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedDue, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Due expectedDue \u003d new Due(VALID_DATE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedDue, ParserUtil.parseDate(emailWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 49,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SignupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.SignupCommand.MESSAGE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.SignupCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class SignupCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private static final CommandHistory emptyCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private SignupCommandParser parserTest \u003d new SignupCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parseSuccess() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User user \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User currentUser \u003d new AccountBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser modelStubTestUser \u003d new ModelStubTestUser(currentUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        CommandResult commandResult \u003d new SignupCommand(user).execute(modelStubTestUser, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(String.format(SignupCommand.MESSAGE_SUCCESS, user.getUsername().toString()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertEquals(emptyCommandHistory, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //Parses correct username and password but wrong command id"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Username username \u003d new Username(VALID_USERNAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        Password password \u003d new Password(VALID_PASSWORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User currentUser \u003d new User(username, password);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseSuccess(parserTest, PREAMBLE_WHITESPACE + USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "               new SignupCommand(currentUser));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseSuccess(parserTest, USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "               new SignupCommand(currentUser));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parse_missingField_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_FORMAT, SignupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, USERNAME_DESC + VALID_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, VALID_USERNAME + PASSWORD_DESC, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, VALID_USERNAME + VALID_PASSWORD, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void parse_invalidDetails_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, INVALID_USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, USERNAME_DESC + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, INVALID_USERNAME_DESC + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertParseFailure(parserTest, PREAMBLE_NON_EMPTY + USERNAME_DESC + PASSWORD_DESC,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "                String.format(MESSAGE_INVALID_FORMAT, SignupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub for failing methods from model"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteAccount() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getAdminStatus() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void loginUser(User user) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void logout() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addJsonNotes(Notes notes) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cNotes\u003e selectedNotesProperty() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedNotes(Notes notes) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Notes getSelectedNotes() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManager(ReadOnlyTaskManager newData) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Path getTaskManagerFilePath() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTaskManagerFilePath(Path taskManagerFilePath) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyTaskManager getTaskManager() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\"); }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void sortTask(String attribute) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canUndoTaskManager() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean canRedoTaskManager() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void undoTaskManager() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void redoTaskManager() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void commitTaskManager() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cTask\u003e selectedTaskProperty() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Task getSelectedTask() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setSelectedTask(Task task) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public ReadOnlyProperty\u003cMonth\u003e currentMonthProperty() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\"); }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void setMonth(Month month) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Month getMonth() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Model Stub to test signup"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private class ModelStubTestUser extends ModelStub {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private User user;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean isLoggedIn;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        //private boolean isAdminLoggedIn;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        private boolean accountExist \u003d false;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        ModelStubTestUser(User user) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            this.user \u003d user;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            isLoggedIn \u003d false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            //isAdminLoggedIn \u003d false;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean userExists(User user) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return user.getUsername().equals(this.user.getUsername());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean accountExists() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return accountExist;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public void newUser(User user) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            requireNonNull(user);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public boolean getLoginStatus() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return isLoggedIn;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            return new Username(\"user\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 380
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskManagerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindDateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindModuleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindNameCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.FindPriorityCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.DueContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.ModuleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.PriorityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskManagerParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final TaskManagerParser parser \u003d new TaskManagerParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseCommand_finddate() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"03-03\", \"21-01\", \"08-05\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindDateCommand command \u003d (FindDateCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindDateCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new FindDateCommand(new DueContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseCommand_findname() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"Project\", \"Test\", \"Tutorial\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindNameCommand command \u003d (FindNameCommand) parser.parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindNameCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new FindNameCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseCommand_findmodule() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"CS2113T\", \"CS2101\", \"CG2028\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindModuleCommand command \u003d (FindModuleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindModuleCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new FindModuleCommand(new ModuleContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void parseCommand_findpriority() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"2\", \"1\", \"3\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        FindPriorityCommand command \u003d (FindPriorityCommand) parser.parseCommand("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                FindPriorityCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new FindPriorityCommand(new PriorityContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 54,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new TaskManager(), new TaskManager(modelManager.getTaskManager()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setTaskManagerFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setTaskManagerFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(path, modelManager.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.hasTask(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(modelManager.hasTask(SLIDES));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(modelManager.hasTask(SLIDES));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setSelectedTask(SLIDES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.deleteTask(SLIDES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(TUTORIAL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Arrays.asList(SLIDES, TUTORIAL), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setSelectedTask(TUTORIAL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.deleteTask(TUTORIAL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(SLIDES, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setSelectedTask(SLIDES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task updatedAlice \u003d new TaskBuilder(SLIDES).withDate(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setTask(SLIDES, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.getFilteredTaskList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setSelectedTask(SLIDES);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.singletonList(SLIDES), modelManager.getFilteredTaskList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.setSelectedTask(SLIDES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(SLIDES, modelManager.getSelectedTask());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager taskManager \u003d new TaskManagerBuilder().withTask(SLIDES).withTask(LAB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager differentTaskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager \u003d new ModelManager(taskManager, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(taskManager, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different taskManager -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTaskManager, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String[] keywords \u003d SLIDES.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskManager, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        differentUserPrefs.setTaskManagerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(taskManager, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 52,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(Collections.emptyList(), taskManager.getTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager newData \u003d getTypicalTaskManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(newData, taskManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withName(\"Slides\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withPriority(\"1\").withDate(\"03-03\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withModule(\"CS2113\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withTags(\"ungraded\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(SLIDES, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManagerStub newData \u003d new TaskManagerStub(newTasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.hasTask(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(taskManager.hasTask(SLIDES));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(taskManager.hasTask(SLIDES));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withName(\"Slides\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withPriority(\"1\").withDate(\"03-03\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withModule(\"CS2113\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withTags(\"ungraded\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(taskManager.hasTask(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.getTaskList().remove(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addListener(listener);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.removeListener(listener);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addTask(SLIDES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * A stub ReadOnlyTaskManager whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static class TaskManagerStub implements ReadOnlyTaskManager {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        private final ObservableList\u003cNotes\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManagerStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        public ObservableList\u003cNotes\u003e getNotesList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 8,
      "khairulhazril": 44,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskManagerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTaskManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskManagerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class VersionedTaskManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ReadOnlyTaskManager taskManagerWithProject \u003d new TaskManagerBuilder().withTask(PROJECT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ReadOnlyTaskManager taskManagerWithTutorial \u003d new TaskManagerBuilder().withTask(TUTORIAL).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ReadOnlyTaskManager taskManagerWithLecture \u003d new TaskManagerBuilder().withTask(LECTURE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ReadOnlyTaskManager emptyTaskManager \u003d new TaskManagerBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedTaskManager \u003d prepareTaskManagerList(emptyTaskManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedTaskManager.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedTaskManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(emptyTaskManager),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Arrays.asList(emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                taskManagerWithTutorial,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(emptyTaskManager),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList(emptyTaskManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList(emptyTaskManager);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(emptyTaskManager),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                taskManagerWithProject,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(taskManagerWithTutorial));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Arrays.asList(taskManagerWithProject, taskManagerWithTutorial));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList(emptyTaskManager);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertThrows(VersionedTaskManager.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertThrows(VersionedTaskManager.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Arrays.asList(emptyTaskManager, taskManagerWithProject),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                taskManagerWithTutorial,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTaskManagerListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(emptyTaskManager),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                taskManagerWithProject,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                Collections.singletonList(taskManagerWithTutorial));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList(emptyTaskManager);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertThrows(VersionedTaskManager.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                emptyTaskManager, taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertThrows(VersionedTaskManager.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                prepareTaskManagerList(taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager copy \u003d prepareTaskManagerList(taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager differentAddressBookList \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                prepareTaskManagerList(taskManagerWithTutorial, taskManagerWithLecture);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager differentCurrentStatePointer \u003d prepareTaskManagerList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                taskManagerWithProject, taskManagerWithTutorial);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void assertTaskManagerListStatus(VersionedTaskManager versionedAddressBook,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                             List\u003cReadOnlyTaskManager\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                             ReadOnlyTaskManager expectedCurrentState,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                                             List\u003cReadOnlyTaskManager\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(new TaskManager(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (ReadOnlyTaskManager expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            assertEquals(expectedAddressBook, new TaskManager(versionedAddressBook));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (ReadOnlyTaskManager expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            assertEquals(expectedAddressBook, new TaskManager(versionedAddressBook));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Creates and returns a {@code VersionedTaskManager} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * {@code VersionedTaskManager#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private VersionedTaskManager prepareTaskManagerList(ReadOnlyTaskManager... addressBookStates) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        VersionedTaskManager versionedAddressBook \u003d new VersionedTaskManager(addressBookStates[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTaskManager versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 300
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for password constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for null password"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void invalidPassword_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String invalidPassword \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidPassword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     *  Test cases for null, invalid and valid password"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\\\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Password.isValidPassword(\"nicholas lee\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Password.isValidPassword(\"nicholas97\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Password.isValidPassword(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.@-\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Password.isValidPassword(\"nicholas97!#$%\u0026\u0027*+/\u003d?`{|}~^.@-\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/UserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.KAYDEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.NICHOLAS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Same account details -\u003e return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User nicholasAccount \u003d new AccountBuilder(NICHOLAS).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(NICHOLAS.equals(nicholasAccount));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Same object -\u003e return true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(NICHOLAS.equals(NICHOLAS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Null information -\u003e return false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(NICHOLAS.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Invalid parameters -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(NICHOLAS.equals(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Different user -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(NICHOLAS.equals(KAYDEN));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Different username -\u003e return false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        User editedNicholas \u003d new AccountBuilder(NICHOLAS).setUsername(VALID_USERNAME).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(NICHOLAS.equals(editedNicholas));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         * Different account -\u003e return false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        editedNicholas \u003d new AccountBuilder(NICHOLAS).setPassword(VALID_PASSWORD).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(NICHOLAS.equals(editedNicholas));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/account/UsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for username constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void null_throwNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test for blank username"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void invalidUsername_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        String invalidUsername \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUsername));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Test cases for null, invalid and valid usernames"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Username.isValidUsername(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Username.isValidUsername(\"*\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertFalse(Username.isValidUsername(\"_n_\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Username.isValidUsername(\"Nicholas Lee\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Username.isValidUsername(\"nicholas lee\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Username.isValidUsername(\"n\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Username.isValidUsername(\"9773 3403\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        assertTrue(Username.isValidUsername(\"Nicholas The Great\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/MonthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class MonthTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Month(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Month month1 \u003d new Month(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Month month2 \u003d new Month(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(month1, month2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void outputTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        String testString \u003d \"11\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        int testInt \u003d Integer.parseInt(testString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Month month1 \u003d new Month(testString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(month1.toString(), testString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(month1.toInt(), testInt);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void setValueTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Month month1 \u003d new Month(\"2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Month month2 \u003d new Month(\"12\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertNotEquals(month1.toString(), month2.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertNotEquals(month1.toInt(), month2.toInt());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        month1.setValue(month2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(month1.toString(), month2.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(month1.toInt(), month2.toInt());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/notes/ContentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class ContentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Content(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void constructor_invalidContent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String invalidContent \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void isValidContent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // negative testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Content.isValidContent(\"  \")); //spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Content.isValidContent(\"-\")); // only non-alphanumeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Content.isValidContent(\"Visit Jordan_Liew\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // positive testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Content.isValidContent(\"buy some eggs\")); // small letters only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Content.isValidContent(\"BUY SOME EGGS\")); // Capital letters only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Content.isValidContent(\"45634\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Content.isValidContent(\"Meet friends for dinner at Bedok 85\")); // Alphanumeric"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Content.isValidContent(\"Buy eggs chicken beef pork papaya milk pokka green tea ribena \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                + \"and all the infinity stones\")); //long content"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/notes/HeadingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class HeadingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Heading(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void constructor_invalidHeading_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        String invalidHeading \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Heading(invalidHeading));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void isValidHeading() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Heading.isValidHeading(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // negative testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Heading.isValidHeading(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Heading.isValidHeading(\"  \")); //spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Heading.isValidHeading(\"-\")); // only non-alphanumeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(Heading.isValidHeading(\"Go Sheng-Shiong\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // positive testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"visit the florist\")); // small letters only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"VISIT THE FLORIST\")); // Capital letters only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"767453\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(Heading.isValidHeading(\"Cindy 58th birthday\")); // Alphanumeric"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/notes/NotesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.BUSINESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.ERRAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.LEISURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.MEETUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.testutil.NotesBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void isSameNotes() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(MEETUP.isSameNotes(MEETUP));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(MEETUP.isSameNotes(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(LEISURE.equals(LEISURE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        //new variable assigned with same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes samenote \u003d new NotesBuilder(BUSINESS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(BUSINESS.equals(samenote));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(ERRAND.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(LEISURE.equals(99));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different objects"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(BUSINESS.equals(MEETUP));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different heading"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        Notes othernotes \u003d new NotesBuilder().withHeading(\"visiting\").withContent(\"meet friends for dinner\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .withPriority(\"3\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(MEETUP.equals(othernotes));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        // different content"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        othernotes \u003d new NotesBuilder().withHeading(\"leisure\").withContent(\"Watch Power Rangers\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "                .withPriority(\"1\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertFalse(LEISURE.equals(othernotes));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        //different priority"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        othernotes \u003d new NotesBuilder().withHeading(\"Errand\").withContent(\"Buy apples home\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        assertTrue(ERRAND.equals(othernotes));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class DueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Due(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Due(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Due.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"0110\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"01-30\")); // month greater than 12"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"01-00\")); // month less than 01"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"32-01\")); // date greater than 31 for month with 31 days"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"31-04\")); // date greater than 30 for month with 30 days"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"30-02\")); // date greater than 28 for Feb"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Due.isValidDate(\"00-10\")); // date less than 01"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Due.isValidDate(\"01-01\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Due.isValidDate(\"31-01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Due.isValidDate(\"30-04\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Due.isValidDate(\"28-02\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Module(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Module(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Module.isValidModule(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Module.isValidModule(\"2113CS\")); // numbers before alphabet"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Module.isValidModule(\"C2113\")); // missing one alphabet"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Module.isValidModule(\"CS211\")); // missing one number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Module.isValidModule(\"CS2113\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Module.isValidModule(\"CS2101\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Lab\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Tutorial\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Lab Project\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // Keywords match module, date and priority, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2113\", \"01-01\", \"1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice\").withModule(\"CS2113\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withDate(\"01-01\").withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 13,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"4\")); // greater than 3"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"0\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 10,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        task.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(SLIDES.isSameTask(SLIDES));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.isSameTask(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withModule(VALID_MODULE_TUTORIAL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withDate(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withDate(VALID_DATE_TUTORIAL).withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(SLIDES.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        // same name, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withModule(VALID_MODULE_TUTORIAL).withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(SLIDES.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withPriority(VALID_PRIORITY_TUTORIAL).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(SLIDES.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(SLIDES).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(SLIDES.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(SLIDES.equals(SLIDES));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(TUTORIAL));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withModule(VALID_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withDate(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        editedAlice \u003d new TaskBuilder(SLIDES).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(SLIDES.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 7,
      "khairulhazril": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertFalse(uniqueTaskList.contains(SLIDES));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(uniqueTaskList.contains(SLIDES));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withName(\"Slides\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withPriority(\"1\").withDate(\"03-03\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withModule(\"CS2113\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                .withTags(\"ungraded\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(null, SLIDES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, SLIDES);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, SLIDES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedUniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(SLIDES).withPriority(VALID_PRIORITY_TUTORIAL).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, TUTORIAL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTask(SLIDES, TUTORIAL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.remove(SLIDES);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.remove(SLIDES);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.add(SLIDES);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(TUTORIAL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(SLIDES, SLIDES);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 4,
      "khairulhazril": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_NAME \u003d LAB.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_PHONE \u003d LAB.getModule().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_EMAIL \u003d LAB.getDue().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final String VALID_ADDRESS \u003d LAB.getPriority().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d LAB.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(LAB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(LAB, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonAdaptedTask(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d Module.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Module.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d Due.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Due.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 3,
      "khairulhazril": 31,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class JsonSerializableTaskManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskManagerTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTaskManager.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTaskManager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTaskManager.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    JsonSerializableTaskManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    JsonSerializableTaskManager.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    TaskManager taskManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    TaskManager typicalTasksTaskManager \u003d TypicalTasks.getTypicalTaskManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertEquals(taskManagerFromFile, typicalTasksTaskManager);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonSerializableTaskManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                JsonSerializableTaskManager.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonSerializableTaskManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                JsonSerializableTaskManager.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        thrown.expectMessage(JsonSerializableTaskManager.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTaskManagerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PRESENTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SEMINAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class JsonTaskManagerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTaskManagerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskManager\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new JsonTaskManagerStorage(Paths.get(filePath)).readTaskManager(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        readAddressBook(\"notJsonFormatTaskManager.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        readAddressBook(\"invalidTaskTaskManager.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        readAddressBook(\"invalidAndValidTaskTaskManager.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTaskManager.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager original \u003d getTypicalTaskManager();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonTaskManagerStorage jsonAddressBookStorage \u003d new JsonTaskManagerStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        jsonAddressBookStorage.saveTaskManager(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ReadOnlyTaskManager readBack \u003d jsonAddressBookStorage.readTaskManager(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(original, new TaskManager(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        original.addTask(PRESENTATION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        original.removeTask(SLIDES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        jsonAddressBookStorage.saveTaskManager(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readTaskManager(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(original, new TaskManager(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        original.addTask(SEMINAR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        jsonAddressBookStorage.saveTaskManager(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readTaskManager().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(original, new TaskManager(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void saveAddressBook(ReadOnlyTaskManager addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            new JsonTaskManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "                    .saveTaskManager(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        saveAddressBook(new TaskManager(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 31,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        userPrefs.setTaskManagerFilePath(Paths.get(\"data/StudentBuddy.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonTaskManagerStorage addressBookStorage \u003d new JsonTaskManagerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         * {@link JsonTaskManagerStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskManagerStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager original \u003d getTypicalTaskManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        storageManager.saveTaskManager(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ReadOnlyTaskManager retrieved \u003d storageManager.readTaskManager().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(original, new TaskManager(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertNotNull(storageManager.getTaskManagerFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 11,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Password;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " *  Test utility to build account objects for testing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String SET_USERNAME \u003d \"user\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final String SET_PASSWORD \u003d \"pass\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public AccountBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        username \u003d new Username(SET_USERNAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        password \u003d new Password(SET_PASSWORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Starts AccountBuilder with getData"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public AccountBuilder(User getData) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        username \u003d getData.getUsername();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        password \u003d getData.getPassword();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Sets the username of the account built"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public AccountBuilder setUsername(String username) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Sets the password of the account built"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public AccountBuilder setPassword(String password) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     * Builds the stub account"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "        return new User(username, password);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private EditCommand.EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder(EditCommand.EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setModule(task.getModule());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setDue(task.getDue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Module} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setModule(new Module(phone));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Due} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setDue(new Due(email));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setPriority(new Priority(address));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 5,
      "khairulhazril": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NotesBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Content;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Heading;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * A utility class to help with building Notes objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class NotesBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Buy eggs for dinner just like always\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String DEFAULT_HEADING \u003d \"Going to the market\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Heading heading;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        heading \u003d new Heading(DEFAULT_HEADING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Initializes the TodoBuilder with the data of {@code todoToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesBuilder(Notes notes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        content \u003d notes.getContent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        heading \u003d notes.getHeading();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        priority \u003d notes.getPriority();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets the {@code Content} of the {@code Todo} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesBuilder withContent(String content) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.content \u003d new Content(content);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets the {@code Title} of the {@code Todo} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesBuilder withHeading(String heading) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.heading \u003d new Heading(heading);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Sets the Priority of the code we are building"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public NotesBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public Notes build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new Notes(heading, content, priority);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static String getPersonDetails(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        sb.append(PREFIX_MODULE + task.getModule().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        sb.append(PREFIX_DATE + task.getDue().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        task.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.getModule().ifPresent(phone -\u003e sb.append(PREFIX_MODULE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.getDue().ifPresent(email -\u003e sb.append(PREFIX_DATE).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        descriptor.getPriority().ifPresent(address -\u003e sb.append(PREFIX_PRIORITY).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 20,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Project\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DEFAULT_MODULE \u003d \"CS2113\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"03-03\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Due due;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        module \u003d new Module(DEFAULT_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        due \u003d new Due(DEFAULT_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        module \u003d taskToCopy.getModule();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        due \u003d taskToCopy.getDue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Name} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder withPriority(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.priority \u003d new Priority(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Module} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder withModule(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.module \u003d new Module(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Sets the {@code Due} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskBuilder withDate(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.due \u003d new Due(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new Task(name, module, due, priority, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 5,
      "khairulhazril": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskManagerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * {@code TaskManager ab \u003d new TaskManagerBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TaskManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManagerBuilder(TaskManager taskManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        this.taskManager \u003d taskManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Adds a new {@code Task} to the {@code TaskManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManagerBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TaskManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static Task getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 7,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAccounts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "//@@author nicholasleeeee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "import seedu.address.model.account.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " * Test utility containing accounts to be used in tests"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final User NICHOLAS \u003d new AccountBuilder().setUsername(\"Nicholas Lee\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            .setPassword(\"L!ke5-BlAckpink\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final User JUSTIN \u003d new AccountBuilder().setUsername(\"Justin Ong\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            .setPassword(\"loves-to-read-books\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final User KAYDEN \u003d new AccountBuilder().setUsername(\"Sheng Kok\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            .setPassword(\"Likes_perfumes\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final User KHAIRUL \u003d new AccountBuilder().setUsername(\"Khairul\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            .setPassword(\"lives-near-school\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "    public static final User XIAOMING \u003d new AccountBuilder().setUsername(VALID_USERNAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "            .setPassword(VALID_PASSWORD).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasleeeee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasleeeee": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_MARKET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_POPULAR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEADING_MARKET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEADING_POPULAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_MARKET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_POPULAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " * A utility class containing a list of notes used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Shengkok"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "public class TypicalNotes {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes MEETUP \u003d new NotesBuilder().withHeading(\"Meetup\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(\"meet friends for dinner\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withPriority(\"3\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes ERRAND \u003d new NotesBuilder().withHeading(\"Errand\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(\"Buy apples home\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withPriority(\"2\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes BUSINESS \u003d new NotesBuilder().withHeading(\"Business\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(\"Sell off ST Engineering stocks once it hits 4\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withPriority(\"1\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes LEISURE \u003d new NotesBuilder().withHeading(\"leisure\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(\"Watch Avengers endgame\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withPriority(\"1\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes MARKET \u003d new NotesBuilder().withHeading(VALID_HEADING_MARKET)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(VALID_CONTENT_MARKET).withPriority(VALID_PRIORITY_MARKET).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static final Notes POPULAR \u003d new NotesBuilder().withHeading(VALID_HEADING_POPULAR)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            .withContent(VALID_CONTENT_POPULAR).withPriority(VALID_PRIORITY_POPULAR).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    private TypicalNotes() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     * Returns an {@code TaskManager} with all the typical notes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static TaskManager getTypicalTaskManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        TaskManager tm \u003d new TaskManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        for (Notes notes : getTypicalNotes()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "            tm.addNotes(notes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return tm;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    public static List\u003cNotes\u003e getTypicalNotes() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEETUP, ERRAND, BUSINESS, LEISURE, POPULAR, MARKET));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Shengkok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Shengkok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Shengkok": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNGRADED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task SLIDES \u003d new TaskBuilder().withName(\"Slides\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withPriority(\"1\").withDate(\"03-03\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withModule(\"CS2113\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withTags(\"ungraded\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task LAB \u003d new TaskBuilder().withName(\"Lab\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withPriority(\"2\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withDate(\"21-01\").withModule(\"CG2023\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withTags(\"graded\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task LECTURE \u003d new TaskBuilder().withName(\"LECTURE\").withModule(\"CG2027\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withDate(\"05-03\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task PRESENTATION \u003d new TaskBuilder().withName(\"Presentation\").withModule(\"CS2101\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withDate(\"03-10\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task SEMINAR \u003d new TaskBuilder().withName(\"Seminar\").withModule(\"PL8001\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withDate(\"20-07\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task PROJECT \u003d new TaskBuilder().withName(VALID_NAME_PROJECT).withModule(VALID_MODULE_PROJECT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withDate(VALID_DATE_PROJECT).withPriority(VALID_PRIORITY_PROJECT).withTags(VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final Task TUTORIAL \u003d new TaskBuilder().withName(VALID_NAME_TUTORIAL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withModule(VALID_MODULE_TUTORIAL).withDate(VALID_DATE_TUTORIAL).withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            .withTags(VALID_TAG_GRADED, VALID_TAG_UNGRADED).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Lab\"; // A keyword that matches LAB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private TypicalTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Returns an {@code TaskManager} with all the typical tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static TaskManager getTypicalTaskManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        TaskManager tm \u003d new TaskManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            tm.addTask(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return tm;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SLIDES, LAB, LECTURE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import guitests.guihandles.CalendarPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.util.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class CalendarPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private CalendarPanelHandle calendarPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Verifies that creating the calendarPanel works"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void initTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        initUi(createBackingList(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertTrue(calendarPanelHandle.isWindowPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void gridTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        initUi(createBackingList(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertTrue(calendarPanelHandle.isGridPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    @Test(timeout \u003d 1000)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public void timingTest() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        initUi(createBackingList(250));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * {@code CalendarPanel}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            Module module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            Due due \u003d new Due(\"01-03\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            Priority priority \u003d new Priority(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            Task task \u003d new Task(name, module, due, priority, Collections.emptySet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            backingList.add(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code TaskListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        SimpleObjectProperty\u003cMonth\u003e testMonth \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        testMonth.setValue(new Month(Integer.toString(YearMonth.now().getMonthValue())));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        CalendarPanel calendarPanel \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                new CalendarPanel(backingList, selectedTask, testMonth, logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        uiPartRule.setUiPart(calendarPanel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        calendarPanelHandle \u003d new CalendarPanelHandle(calendarPanel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": " * A GUI unit test class for TaskManager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.storage.JsonTaskManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        JsonTaskManagerStorage jsonAddressBookStorage \u003d new JsonTaskManagerStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, taskManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        guiRobot.interact(() -\u003e taskManager.addTask(SLIDES));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 5,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Task taskWithNoTags \u003d new TaskBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    TaskCard personCard \u003d new TaskCard(taskWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertCardDisplay(personCard, taskWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Task taskWithTags \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    personCard \u003d new TaskCard(taskWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertCardDisplay(personCard, taskWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        TaskCard taskCard \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same task, same index -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        TaskCard copy \u003d new TaskCard(task, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertTrue(taskCard.equals(copy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertTrue(taskCard.equals(taskCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(taskCard.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(taskCard.equals(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // different task, same index -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        Task differentTask \u003d new TaskBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // same task, different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertFalse(taskCard.equals(new TaskCard(task, 1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Asserts that {@code taskCard} displays the details of {@code expectedTask} correctly and matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private void assertCardDisplay(TaskCard taskCard, Task expectedTask, int expectedId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        TaskCardHandle taskCardHandle \u003d new TaskCardHandle(taskCard.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertEquals(expectedId + \". \", taskCardHandle.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        // verify task details are displayed correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertCardDisplaysPerson(expectedTask, taskCardHandle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 18,
      "khairulhazril": 24,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TaskListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "public class TaskListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private static final ObservableList\u003cTask\u003e TYPICAL_TASKS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            FXCollections.observableList(getTypicalTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private final SimpleObjectProperty\u003cTask\u003e selectedTask \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    private TaskListPanelHandle taskListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    for (int i \u003d 0; i \u003c TYPICAL_TASKS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    personListPanelHandle.navigateToCard(TYPICAL_TASKS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Task expectedTask \u003d TYPICAL_TASKS.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    TaskCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertCardDisplaysPerson(expectedTask, actualCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    initUi(TYPICAL_TASKS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Task secondTask \u003d TYPICAL_TASKS.get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    guiRobot.interact(() -\u003e selectedTask.set(secondTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    TaskCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    TaskCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code TaskListPanel} requires lesser than"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        }, \"Creation and deletion of task cards exceeded time limit\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * {@code TaskListPanel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private ObservableList\u003cTask\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        ObservableList\u003cTask\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Module module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Due due \u003d new Due(\"01-03\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Priority priority \u003d new Priority(\"1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            Task task \u003d new Task(name, module, due, priority, Collections.emptySet());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "            backingList.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code TaskListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code TaskListPanel}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    private void initUi(ObservableList\u003cTask\u003e backingList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        TaskListPanel taskListPanel \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                new TaskListPanel(backingList, selectedTask, selectedTask::set);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        uiPartRule.setUiPart(taskListPanel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        taskListPanelHandle \u003d new TaskListPanelHandle(getChildNode(taskListPanel.getRoot(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "                TaskListPanelHandle.TASK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 19,
      "khairulhazril": 38,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 14,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import guitests.guihandles.TaskCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedCard.getPriority(), actualCard.getPriority());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedCard.getModule(), actualCard.getModule());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedTask}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static void assertCardDisplaysPerson(Task expectedTask, TaskCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedTask.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedTask.getModule().value, actualCard.getModule());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedTask.getDue().value, actualCard.getDate());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedTask.getPriority().value, actualCard.getPriority());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        assertEquals(expectedTask.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            taskListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "            assertCardDisplaysPerson(tasks[i], taskListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "     * Asserts the size of the list in {@code taskListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "        int numberOfPeople \u003d taskListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 15,
      "khairulhazril": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.SLIDES;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.LECTURE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.PRESENTATION;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.SEMINAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class AddCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ----------------------- Perform add operations on the shown unfiltered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a task without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task toAdd \u003d PROJECT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_PROJECT + \"  \" + MODULE_DESC_PROJECT + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + DATE_DESC_PROJECT + \"   \" + PRIORITY_DESC_PROJECT + \"   \" + TAG_DESC_GRADED + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: undo adding Project to the list -\u003e Project deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: redo adding Project to the list -\u003e Project added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        model.addTask(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a task with all fields same as another task in the task manager except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d new TaskBuilder(PROJECT).withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_TUTORIAL + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + PRIORITY_DESC_PROJECT + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a task with all fields same as another task in the task manager except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d new TaskBuilder(PROJECT).withModule(VALID_MODULE_TUTORIAL).withDate(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add to empty task manager -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(SLIDES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a task with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d TUTORIAL;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_GRADED + MODULE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + NAME_DESC_TUTORIAL + TAG_DESC_UNGRADED + DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a task, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(PRESENTATION);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ------------------------- Perform add operation on the shown filtered list ----------------------------- */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filters the task list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(SEMINAR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ----------------------- Perform add operation while a task card is selected -------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: selects first card in the task list, add a task -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(LECTURE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ---------------------------------- Perform invalid add operations -------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a duplicate task -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(PRESENTATION);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a duplicate task except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d new TaskBuilder(PRESENTATION).withModule(VALID_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a duplicate task except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d new TaskBuilder(PRESENTATION).withDate(VALID_DATE_TUTORIAL).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a duplicate task except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        toAdd \u003d new TaskBuilder(PRESENTATION).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: add a duplicate task except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(PRESENTATION) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + MODULE_DESC_PROJECT + DATE_DESC_PROJECT + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + DATE_DESC_PROJECT + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + INVALID_MODULE_DESC + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Due.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_PROJECT + MODULE_DESC_PROJECT + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + PRIORITY_DESC_PROJECT"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * 4. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(Task toAdd) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(Task)}. Executes {@code command}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * instead."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(Task)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Task toAdd) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel.addTask(toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Task)} except asserts that"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * 2. {@code Storage} and {@code TaskListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(String, Task)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 7,
      "khairulhazril": 246
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class ClearCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: selects first card in task list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filters the task list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 101
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "///**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 57
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class DeleteCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* ---------------- Performing delete operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: delete the first task in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TASK.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Task deletedTask \u003d removePerson(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: delete the last task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: undo deleting the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: redo deleting the last task in the list -\u003e last task deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: delete the middle task in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* ----------------- Performing delete operation while a filtered list is being shown --------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: filtered task list, delete index within bounds of address book and task list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: filtered task list, delete index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    int invalidIndex \u003d getModel().getTaskManager().getTaskList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* -------------------- Performing delete operation while a task card is selected ----------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: delete the selected task -\u003e task list panel selects the task before the deleted task */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    deletedTask \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* -------------------------------- Performing invalid delete operation ----------------------------------- */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    getModel().getTaskManager().getTaskList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(command, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Removes the {@code Task} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @return the removed task"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private Task removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task targetTask \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        model.deleteTask(targetTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return targetTask;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Deletes the task at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task deletedTask \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TASK_SUCCESS, deletedTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * url and selected card are expected to update accordingly depending on the card at"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 194
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_PROJECT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.MODULE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_PROJECT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PROJECT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_PROJECT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Due;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.task.Module;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class EditCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ---------------- Performing edit operation while an unfiltered list is being shown --------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + \"  \" + MODULE_DESC_TUTORIAL + \" \" + DATE_DESC_TUTORIAL + \"  \" + PRIORITY_DESC_TUTORIAL + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + TAG_DESC_UNGRADED + \" \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task editedTask \u003d new TaskBuilder(TUTORIAL).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: undo editing the last task in the list -\u003e last task restored */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: redo editing the last task in the list -\u003e last task edited again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        model.setTask(getModel().getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, TUTORIAL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(getModel().getTaskManager().getTaskList().contains(TUTORIAL));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertNotEquals(getModel().getFilteredTaskList().get(index.getZeroBased()), TUTORIAL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_PROJECT + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        editedTask \u003d new TaskBuilder(TUTORIAL).withName(VALID_NAME_PROJECT).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * -\u003e edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_PROJECT"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        editedTask \u003d new TaskBuilder(TUTORIAL).withModule(VALID_MODULE_PROJECT).withDate(VALID_DATE_PROJECT).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        editedTask \u003d new TaskBuilder(taskToEdit).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ----------------- Performing edit operation while a filtered list is being shown ----------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filtered task list, edit index within bounds of address book and task list -\u003e edited */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(index.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        taskToEdit \u003d getModel().getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        editedTask \u003d new TaskBuilder(taskToEdit).withName(VALID_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, editedTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filtered task list, edit index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * -\u003e rejected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        int invalidIndex \u003d getModel().getTaskManager().getTaskList().size();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* --------------------- Performing edit operation while a task card is selected -------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: selects first card in the task list, edit a task -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * browser url changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        selectPerson(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_PROJECT + MODULE_DESC_PROJECT"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_PROJECT"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + PRIORITY_DESC_PROJECT + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // browser\u0027s url is updated to reflect the new task\u0027s name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, index, PROJECT, index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* -------------------------------- Performing invalid edit operation ------------------------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + INVALID_MODULE_DESC, Module.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + INVALID_DATE_DESC, Due.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(PersonUtil.getAddCommand(TUTORIAL));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(getModel().getTaskManager().getTaskList().contains(TUTORIAL));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        index \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(getModel().getFilteredTaskList().get(index.getZeroBased()).equals(TUTORIAL));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL + PRIORITY_DESC_PROJECT + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_PROJECT"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: edit a task with new values same as another task\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TUTORIAL + MODULE_DESC_TUTORIAL"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        + DATE_DESC_PROJECT + PRIORITY_DESC_TUTORIAL + TAG_DESC_GRADED + TAG_DESC_UNGRADED;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Performs the same verification as {@code assertCommandSuccess(String, Index, Task, Index)} except that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Task, Index)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Task editedTask) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, toEdit, editedTask, null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * \u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Asserts that the model related components are updated to reflect the task at index {@code toEdit} being"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * updated to values specified {@code editedTask}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Index toEdit, Task editedTask,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel.setTask(expectedModel.getFilteredTaskList().get(toEdit.getZeroBased()), editedTask);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 306
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.LAB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class FindCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void find() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, LAB); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: repeat previous find command where task list is displaying the persons we are finding"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task where task list is not displaying the task we are finding -\u003e 1 task found */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" LECTURE\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, LECTURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Lab\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, LAB);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 task found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(getModel().getTaskManager().getTaskList().contains(LAB));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task in address book, keyword is same as name but of different case -\u003e 1 task found */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find phone number of task in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + LAB.getModule().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find address of task in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + LAB.getPriority().value;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find email of task in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + LAB.getDue().value;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find tags of task in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(LAB.getTags());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find while a task is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertFalse(getTaskListPanel().getHandleToSelectedCard().getName().equals(LAB.getName().fullName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" Lab\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, LAB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: find task in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        ModelHelper.setFilteredList(expectedModel, LAB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * box displays {@code Messages#MESSAGE_TASKS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                MESSAGE_TASKS_LISTED_OVERVIEW, expectedModel.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * These verifications are done by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * error style."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 1,
      "khairulhazril": 193
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "///**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class HelpCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        getTaskListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "////        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "////        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "////        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "////        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 105
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "///**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static final Predicate\u003cTask\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public static void setFilteredList(Model model, List\u003cTask\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Optional\u003cPredicate\u003cTask\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        model.updateFilteredTaskList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public static void setFilteredList(Model model, Task... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns a predicate that evaluates to true if this {@code Task} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static Predicate\u003cTask\u003e getPredicateMatching(Task other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        return task -\u003e task.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 37
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class SampleDataTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected TaskManager getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Task[] expectedList \u003d SampleDataUtil.getSampleTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertListMatching(getTaskListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 2,
      "khairulhazril": 49
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_TASK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.testutil.TypicalTasks.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class SelectCommandSystemTest extends TaskManagerSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ----------------------- Perform select operations on the shown unfiltered list ------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: select the first card in the task list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: select the last card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: select the middle card in the task list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ----------------------- Perform select operations on the shown filtered list --------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filtered task list, select index within bounds of address book but out of bounds of task list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        int invalidIndex \u003d getModel().getTaskManager().getTaskList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: filtered task list, select index within bounds of address book and task list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* ---------------------------------- Perform invalid select operations ----------------------------------- */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        invalidIndex \u003d getModel().getFilteredTaskList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code expectedSelectedCardIndex} of the selected task.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        MESSAGE_SELECT_TASK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        int preExecutionSelectedCardIndex \u003d getTaskListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 4. {@code Storage} and {@code TaskListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * {@code TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    * @see TaskManagerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 155
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.ReadOnlyTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "///**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public TestApp setupApplication(Supplier\u003cReadOnlyTaskManager\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 74
    }
  },
  {
    "path": "src/test/java/systemtests/TaskManagerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//import guitests.guihandles.TaskListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.TaskManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "///**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * A system test class for TaskManager, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "// */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//public abstract class TaskManagerSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected TaskManager getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return TypicalTasks.getTypicalTaskManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//    public TaskListPanelHandle getTaskListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        return mainWindowHandle.getTaskListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Displays all persons in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void showAllPersons() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(getModel().getTaskManager().getTaskList().size(), getModel().getFilteredTaskList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertTrue(getModel().getFilteredTaskList().size() \u003c getModel().getTaskManager().getTaskList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Selects the task at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertEquals(index.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(0, getModel().getTaskManager().getTaskList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code expectedResultMessage}, the storage contains the same task objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * and the task list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(new TaskManager(expectedModel.getTaskManager()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertListMatching(getTaskListPanel(), expectedModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * Calls {@code BrowserPanelHandle}, {@code TaskListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        getTaskListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertFalse(getTaskListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the browser\u0027s url is changed to display the details of the task in the task list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * @see TaskListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        getTaskListPanel().navigateToCard(getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        String selectedCardName \u003d getTaskListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertEquals(expectedSelectedCardIndex.getZeroBased(), getTaskListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the browser\u0027s url and the selected card in the task list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//     * @see TaskListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertFalse(getTaskListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String timestamp \u003d new Due(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Justin-Ong"
        },
        "content": "//        assertListMatching(getTaskListPanel(), getModel().getFilteredTaskList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Justin-Ong": 15,
      "khairulhazril": 272
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.priority.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khairulhazril"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "khairulhazril": 2,
      "-": 4
    }
  }
]
