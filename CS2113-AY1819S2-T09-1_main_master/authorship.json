[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d PlanWithEase"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S2-T09-1/main[image:https://img.shields.io/travis/CS2113-AY1819S2-T09-1/main/master.svg?logo\u003dtravis-ci\u0026logoColor\u003dFFDC00\u0026cacheSeconds\u003d0[Travis CI Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "https://ci.appveyor.com/project/Creastery/main[image:https://img.shields.io/appveyor/ci/Creastery/main/master.svg?logo\u003dappveyor\u0026logoColor\u003d39CCCC\u0026cacheSeconds\u003d0[AppVeyor CI Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S2-T09-1/main?branch\u003dmaster[image:https://img.shields.io/coveralls/github/CS2113-AY1819S2-T09-1/main.svg?logo\u003dreverbnation\u0026logoColor\u003dFF851B\u0026cacheSeconds\u003d0[Coveralls Code Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "https://www.codacy.com/app/cs2113-ay1819s2-t09-1/main[image:https://img.shields.io/codacy/grade/fb54572137f043de9b9913f791b4017f.svg?logo\u003dcodacy\u0026logoColor\u003dwhite\u0026cacheSeconds\u003d0[Codacy Code Quality Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "https://app.netlify.com/sites/cs2113-ay1819s2-t09-1/deploys[image:https://img.shields.io/badge/dynamic/json.svg?url\u003dhttps://api.netlify.com/api/v1/sites/cs2113-ay1819s2-t09-1.netlify.com/deploys\u0026query\u003d$%5B0%5D.state\u0026label\u003ddeploy\u0026color\u003dblue\u0026logo\u003dnetlify\u0026cacheSeconds\u003d0[Netlify Deploy Previews Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "link:https://github.com/cs2113-ay1819s2-t09-1/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg?logo\u003dgithub\u0026logoColor\u003dwhite[MIT License]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "image::images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* PlanWithEase (PWE) is a degree planner desktop application. It has a GUI but most of the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "interactions happen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "using a CLI"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "(Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* PWE is designed to help students in National University of Singapore(NUS) Information Security freshmen in creating a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " comprehensive degree plan according to the degree requirements."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* PWE is optimized for those who prefer using a CLI. The commands used to interact with PWE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "are designed to be simple and intuitive, so even those who are unfamiliar with CLI can use PWE with ease."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* PWE allows users to:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** plan their module quickly and more conveniently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** automate checking of module pre-requisites to avoid module conflicts. _(coming soon)_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** provide an informed decision so that the user are able to decide which module to take at which semester."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Original source: https://github.com/se-edu/addressbook-level4[AddressBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Level 4 project] created by https://github.com/se-edu/[SE-EDU initiative]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TestFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Modified icon from https://fontawesome.com[Font Awesome]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d Licence : link:https://github.com/cs2113-ay1819s2-t09-1/main/blob/master/LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Creastery": 8,
      "lycjackie": 17,
      "-": 23
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"githubId\": \"truegitnovice\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"displayName\": \"AHN...GYU\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"authorNames\": [\"truegitnovice\", \"Ahn TaeGyu\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"githubId\": \"WendyBaiYunwei\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"displayName\": \"BAI...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"authorNames\": [\"WendyBaiYunwei\", \"Bai Yunwei\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"githubId\": \"lycjackie\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"displayName\": \"LEE...HOY\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"authorNames\": [\"lycjackie\", \"Jackie Lee\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"githubId\": \"Creastery\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"displayName\": \"NGO...LIN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"authorNames\": [\"Creastery\", \"Ngo Wei Lin\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"githubId\": \"chyeo\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"displayName\": \"YEO...ONG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \"authorNames\": [\"chyeo\", \"CH YEO\", \"Yeo Cheng Hong\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.2\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.8\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.8\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.8\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    archiveName \u003d \u0027PWE.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    dependsOn(\u0027copyStylesheets\u0027)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u0027site-name\u0027: \u0027PlanWithEase\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2113-ay1819s2-t09-1/main\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    dependsOn(\u0027asciidoctor\u0027)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Creastery"
        },
        "content": "task buildJar(type: GradleBuild) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    tasks \u003d [\u0027clean\u0027, \u0027deployOfflineDocs\u0027, \u0027shadowJar\u0027]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Creastery"
        },
        "content": "compileJava {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    options.warnings \u003d true"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    options.deprecation \u003d true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    options.compilerArgs +\u003d [ \"-Xlint:cast,deprecation,divzero,rawtypes,unchecked\" ]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Creastery": 21,
      "lycjackie": 2,
      "-": 222
    }
  },
  {
    "path": "copyright.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Copyright by Font Awesome - https://fontawesome.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "- plan_with_ease_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 2,
      "-": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "PlanWithEase was developed by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "https://github.com/cs2113-ay1819s2-t09-1[CS2113-AY1819S2-T09-1] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "We are a team based in the https://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Ngo Wei Lin"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "image::creastery.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "{empty}[https://github.com/creastery[github]] [\u003c\u003ccreastery#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d\u003d Bai Yunwei"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "image::wendybaiyunwei.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "{empty}[https://github.com/wendybaiyunwei[github]] [\u003c\u003cwendybaiyunwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d Lee Yu Choy"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "image::lycjackie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "{empty}[https://github.com/lycjackie[github]] [\u003c\u003clycjackie#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Ahn TaeGyu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "image::truegitnovice.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "{empty}[https://github.com/truegitnovice[github]] [\u003c\u003ctruegitnovice#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Responsibilities: Documentation + UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Yeo Cheng Hong"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "image::chyeo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "{empty}[https://github.com/chyeo[github]] [\u003c\u003cchyeo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Creastery": 9,
      "WendyBaiYunwei": 4,
      "truegitnovice": 3,
      "chyeo": 3,
      "lycjackie": 6,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2113-ay1819s2-t09-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d PlanWithEase - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ":repoURL: https://github.com/cs2113-ay1819s2-t09-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "By: `Team T09-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ". *JDK `9`*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Only JDK 9 is officially supported"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "image::SDforDeleteModule.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ModuleListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "image::DeleteModuleSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModule\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Module` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Module` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th module in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new module. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Step 4. The user now decides that adding the module was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the module being deleted)."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Creastery"
        },
        "content": "// tag::corequisites[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Module co-requisites"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Module co-requisites are stored internally as `Set\u003cCode\u003e` within `Module`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Creastery"
        },
        "content": "A `Set\u003cCode\u003e` is used instead of a `List\u003cCode\u003e` to ensure uniqueness and prevents duplicate pre-requisites"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Creastery"
        },
        "content": "module codes."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Notice that `Code` is used in place of `Module`. This is to prevent storage of duplicated information when"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Creastery"
        },
        "content": "serializing `UniqueModuleList`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`AddCommand` handles invalid cases by preventing adding a co-requisite module code that does not exists in the module"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Creastery"
        },
        "content": "list. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`EditCommand` handles invalid cases by ensuring that:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* the edited co-requisite module code is not equivalent to the `Code` of the edited module +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* the edited co-requisite module `Code` exists in the module listing"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Creastery"
        },
        "content": "When a module is deleted, it is cascaded down to other modules, and is removed from other modules\u0027 co-requisites."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How should deletion of a module be cascaded down to other modules"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* **Alternative 1 (current choice):** Delete module code from other modules\u0027 corequisites in `AddressBook` class"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Pros: Implementing the cascading effect in `AddressBook#removeModule()` protects tampering of `AddressBook` data"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Cons: Requires extra overhead to obtain an immutable list of modules to update and modify existing modules in the"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`UniqueModuleList`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* **Alternative 2:** Delete module code from other modules\u0027 corequisites in `DeleteCommand` class"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Pros: Convenient to implement."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Cons: Deleting a module via `AddressBook#removeModule()` does not have any cascading effect on other modules\u0027"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Creastery"
        },
        "content": "corequisites. The user will have to delete the invalid co-requisite manually afterwards."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** Cons: Can only interact with a filtered list of modules, and as such, the displayed list of modules need to be"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Creastery"
        },
        "content": "refreshed to display the full listing just to be able to iterate and delete modules co-requisites accordingly."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Creastery"
        },
        "content": "// end::corequisites[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chyeo"
        },
        "content": "// tag::requirement-add[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Requirement Add command"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chyeo"
        },
        "content": "The `requirement_add` command in PWE is used to add module code(s) to a requirement category."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chyeo"
        },
        "content": "The `requirement_add` command requires the `RequirementAddCommandParser` class to parse the user input provided. The  parsed data will then be passed to  `RequirmentAddCommand` class. Currently, the details that are required by the user is the name of the requirement category and module code(s)."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chyeo"
        },
        "content": "`RequirementAddCommandParser` will throw an error if the user input does not match the command format."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chyeo"
        },
        "content": "When `RequirementAddCommand` receives the parsed data, it will perform the following checks:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- Check if the requirement category exists in PWE though `getRequirementCategory`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- Check if the module codes provided exists in PWE through `model.hasModuleCode`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- Check if the modules codes have already been added to this requirement category through `RequirementCategory.hasModuleCode`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chyeo"
        },
        "content": "`RequirementAddCommand` will throw an error any of the above check fails."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chyeo"
        },
        "content": "After passing the checks `RequirementAddCommand` updates the context in `ModelManager` through `setRequirementCategory`."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chyeo"
        },
        "content": "In addition to adding module code(s) to a requirement category, the `RequirementAddCommand` class also does the following:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- Saves the current database state through `commitAddressBook` (for undo/redo functions)."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Choice of what is added to the requirement category"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- **Alternative 1 (current choice):** Storing module codes only"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  ** Pros: Requires less storage, easy to maintain"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  ** Cons: Requires extra overhead to obtain additional information related to the module when needed"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chyeo"
        },
        "content": "- **Alternative 2:** Storing all information related to the module"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  ** Pros: All information related to the module are easily obtainable"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  ** Cons: Information stored is duplicated, additional storage space is needed"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  ** Cons: Hard to maintain information, if a module information is updated have to update data in the requirement category"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chyeo"
        },
        "content": "//end::requirement-add[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "// tag::planner-list[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Planner List Feature"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Planner list feature aims to help users to be able to locate any degree planner(s) based on certain condition(s) in our"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "application easily. We support the listing of degree planners based on year and semester. This enable a user to be able"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "to list any degree planner(s) with partial information."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "When a user invokes the `planner_list` command. (e.g. planner_list y/YEAR s/SEMESTER), the following steps"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "are taken by the program."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1. Extract out the text related to `planner_list` command"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2. Parse the text related to each `PREFIX` individually."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3. Return a composite predicate for all attributes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".PlannerList component interactions"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "image::PlannerListComponentSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Planner List is able to:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* list degree planner(s) by year"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "i.e. `planner_list y/YEAR`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "returns degree planner(s) having its year matches the year given"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* list degree planner(s) by semester"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "i.e. `planner_list s/SEMESTER`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "returns degree planner(s) having its semester matches the semester given"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* include `year` and `semester` attributes in one `planner_list` command and list degree planner(s)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "i.e. `planner_list y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "returns module having its year or semester matches the given year and semester"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to parse multiple attributes"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "- Alternative 1 (current choice): Parse the text related to each `PREFIX` individually"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Pros: User is able to have more flexible search"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Cons: More time and work needed for developer to implement"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "- Alternative 2: Parse the text related to each `PREFIX` at one go"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Cons: Additional overhead needed"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "// end::planner-list[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d  Find Feature"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "The find feature aims to help users to be able to locate any module in our application easily. We support"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "the finding of module\u0027s name, code and credits. This enable our users to be able to find for any modules with partial"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " information."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "When a user invokes the `find` command. (e.g. find name/Programming code/CS1231), the following steps are taken by"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "the program."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "1. Extract out the text related to `find` command"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "2. Parse the text related to each `PREFIX` individually."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "3. Return a composite predicate for all attributes."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Step 1 is performed by the `AddressBookParser` class, and no special actions is needed for the `find` feature."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Step 3 is performed by `FindCommandParser#getKeywordsPredicate`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "The `FindCommandParser` parses the strings of arguments provided by the user to retrieve a composite `Predicate`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "which is used by `FindCommand`. A `ParseException` is thrown when if the input provided by the user does not conform"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "to the expected format."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "The sequence diagram below shows the interaction within the `Logic` components."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".Find component interactions"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "image::FindCommandSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to parse composite predicates"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Currently we have use choice 1 mainly because of time constrains. When there is sufficient time, Alternative 2 would"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "be more preferred because it provide our user with a more robust find command."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "- Alternative 1 (current choice): Do an implicit boolean `OR` for every predicate."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[cols\u003d\"30%,\u003c70%\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|*Pros*| Very easy implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|*Cons*| User will not be able to do a very accurate search. e.g. Unable to find a module\u0027s name with Presentation"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Skill."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "- Alternative 2: Implement an algorithm that can parse complex boolean expression."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[cols\u003d\"30%,\u003c70%\"]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "| *Pros* | User will have very flexible searching terms"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "| *Cons* | Developer will take a very long time to implement."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* National University of Singapore (NUS) Information Security freshmen"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* does not plan to undertake special programs such as NOC, BComp Dissertation, Co-Op programme, etc."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* has a need to plan modules to be taken during University life"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* prefers typing over other means of input"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* Helps information security freshman plan their modules quickly and more conveniently."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* Automatically check module pre-requisites to avoid module conflicts."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* Provide an informed decision so that information security freshmen are able to decide which module to take at which semester."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |add modules  |keep a list of modules that I want to take"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |delete modules  |remove modules that I am not interested in taking"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |edit modules |edit the modules\u0027 details if there are any changes"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |list all modules |have an overview of all the modules that are added"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |find modules that are already added |know if I have previously added them"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |mark modules that are exempted |keep track of exempted modules"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |add modules into my degree planner |know which modules to bid/take in future"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |move my modules to other academic semester in my degree planner |update my plan if there are any"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "changes"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |mark those modules that are exempted in the module plan |keep track of exempted modules"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |list my degree planner |have an overview of my current plan"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |add module codes into different degree requirement categories |classify the modules according to their"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "categories"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |remove module codes from the degree requirement categories |remove them if I made a mistake"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |move modules codes from a degree requirement categories to another |easily move them around"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* * *` |user |see all the degree requirement categories |get an overview of what modules fall under what categories"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`*  *` |user |undo my previous command |easily revert back if a command was entered wrongly"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`*  *` |user |redo my previous command |reverse my undo command if I have changed my opinion"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`* *` |user |choose to overload/underload modules in a semester |manage my workload better"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`*` |user |generate my own module plan |easily plan which modules to take during university life"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`*`|user |export my data from the application|reuse the existing data on other devices"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|`*` |user |import existing data into application| utilise existing data that was previously created"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "(For all use cases below, the *System* is the PlanWithEase `Application` and the *Actor* is the `user`, unless"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "specified otherwise)"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Add a module to Application"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1. User requests to add a module"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2. Application adds the module into the module list"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1b. The module already exists in the module list."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1b1. Application shows an error message that module specified by user already exists in module list."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module from Application"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Creastery"
        },
        "content": "1.  User requests to list modules"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to delete a specific module in the module list"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application deletes the module in the module list"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Edit module from Application"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  User requests to list modules"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to edit a specific module in the module list"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application update the module in the module list"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3b. The module already exists in the module list."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3b1. Application shows an error message that module specified by user already exists in module list."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Find a module in Application"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Guarantee(s):*"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Modules will be listed if the input from the user is valid and can be matches the existing entries in the module list. +"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1. User requests to find modules with their keyword of choice."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2. Application shows a list of modules matched the keyword."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** 1a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "+"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: List all modules in Application"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  Student requests to list all modules in the module list"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of all modules in the module list"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* None"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Clear all modules in Application"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  Student requests to clear all modules in the module list"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application clear all modules in the module list"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* None"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Add a module to degree planner"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1. User requests to add a module into the Application\u0027s degree planner"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2. Application adds the module into the degree planner"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1b. The module already exists in the degree planner."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1b1. Application shows an error message that module specified by user already exists in degree planner."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module from degree planner"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  User requests to list modules in the Application\u0027s degree planner"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules in the degree planner"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to delete a specific module in the degree planner"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application deletes the module in the degree planner"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Move module in degree planner"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  User requests to list modules in the Application\u0027s degree planner"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules in the degree planner"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to move a specific module to another academic semester in the degree planner"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application update the degree planner"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: List all degree planners"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  Student requests to list all the Application\u0027s degree planners"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of all the degree planners"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: List a specific degree planner"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  Student requests to list a specific Application\u0027s degree planner"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of the specific degree planner"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Add a module to degree requirement category"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1. User requests to add a module into the Application\u0027s degree requirement category"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2. Application adds the module into the degree requirement category"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1a. The given input is invalid."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 1b. The module already exists in the  degree requirement category."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 1b1. Application shows an error message that module specified by user already exists in  degree requirement category."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module from degree requirement category"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  User requests to list modules in the Application\u0027s degree requirement category"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules in the degree requirement category"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to delete a specific module in the degree requirement category"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application deletes the module in the degree requirement category"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message that given input is invalid."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: Move module in degree requirement category"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  User requests to list modules in the Application\u0027s degree requirement category"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of modules in the degree requirement category"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "3.  User requests to move a specific module to another academic semester in the degree requirement category"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "4.  Application update the degree requirement category"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3a1. Application shows an error message."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Use case: List all degree requirement categories"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "1.  Student requests to list all the Application\u0027s degree requirement categories"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "2.  Application shows a list of all the degree requirement categories"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* None"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` installed."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should work without requiring an installer."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should work without requiring an Internet connection."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should work should be able to hold up to 100 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  For a user with above average typing speed for regular English text (i.e. not code, not system admin commands), he/she should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The module and degree requirement information should be stored on the local filesystem and are able to be persisted across different runs of the application."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should have good user documentation, which details all aspects of the application to assist new users in learning how to use the application."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application should have good developer documentation to allow new developers to understand the design of the application easily."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  The application\u0027s functionalities should be easily testable."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[[overload-module]] Overload::"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Taking above the workload of 22MC per academic semester"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[[underload-module]] Underload::"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Taking below the workload of 18MC per academic semester"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[[degree-planner]] Degree planner::"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "A planner that allows user to decide what modules to take during a specific academic semester"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "[[degree-requirement-catergory]] Degree requirement category::"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "A category that allows classifying of modules based on the University Requirement"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Deleting a module"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Creastery"
        },
        "content": ". Deleting a module while all modules are listed"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. Prerequisites: List all modules using the `list` command. Multiple modules in the list."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "   Expected: First module is deleted from the list. Details of the deleted module shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "   Expected: No module is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Creastery": 63,
      "truegitnovice": 308,
      "chyeo": 36,
      "lycjackie": 80,
      "-": 706
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d PlanWithEase - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S2-T09-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "By: `Team T09-1`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "PlanWithEase (PWE) is an application designed to help National University of Singapore (NUS) Information Security freshmen in creating a comprehensive degree plan according to the degree requirements."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "PWE is optimized for those who prefer using a Command Line Interface (CLI). The commands used to interact with PWE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "are designed to be simple and intuitive, so even those who are unfamiliar with CLI can use PWE with ease."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "PWE also comes with a clean Graphical User Interface (GUI) that presents information in an organized manner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Interested in using PWE to plan your degree easily? Jump to \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".  Ensure you have Java version `9` installed in your Computer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".  Download the latest `PWE.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for PlanWithEase."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".  Below are some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* *`list`* : lists all modules"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* **`add`**`name/Programming Methodology code/CS1010` : adds a module named `Programming Methodology` with code `CS1010` into module list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* **`delete`**`3` : deletes the 3rd module shown in the current list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* *`exit`* : exits the application"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. e.g. in `add name/NAME`, `NAME` is a parameter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "which can be used as `add name/Programming Methodology`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Items in square brackets are optional parameters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "** e.g. `name/NAME [tag/TAG]` can be used as:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `name/Database Systems tag/sql` (with optional `tag` parameter)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `name/Database Systems` (without optional `tag` parameter)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* Items with `…`​ after them are parameters that can be used multiple times (including zero times)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "** e.g. `[tag/TAG]…` can be used as:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `{nbsp}` (i.e. 0 times)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `tag/programming` (i.e. 1 time)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `tag/programming tag/algorithms`, etc.  (i.e. many times)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "** e.g. `[name/NAME NAME…]` can be used as:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `{nbsp}` (i.e. 0 times)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `name/Programming` (i.e. 1 time)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. `name/Programming Methodology`, etc.  (i.e. many times)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Prefixed-parameters can be arranged in any order"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": ".. e.g. if the command specifies `name/NAME code/CODE`, entering `code/CODE name/NAME` is also acceptable."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Adding a module: `add`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Adds a module to the module list. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Format: `add name/NAME code/CODE credits/CREDITS [tag/TAG]… [coreq/COREQUISITE]…`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `NAME` indicates the name of the module (e.g. `Programming Methodology`)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `CODE` indicates the module code (e.g. `CS1010`)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `CREDITS` indicates the modular credits assigned to the module (e.g. `004`)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `TAG` indicates the extra information to associate the module with (e.g. `programming`, `loops`)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `COREQUISITE` indicates the module code that is a co-requisite of the module to be added."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`NAME` should only contain alphanumeric characters and spaces, and it should not be blank. +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`CODE` should begin with two alphabets, followed by four digits, and may optionally end with an alphabet. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "In addition, `CODE` should not be be blank. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`CREDITS` should only contain numbers between 0 and 999. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "If the amount of modular credits is not 3 digit long (e.g. 4), prepend the value with `0` (i.e. 004) +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`TAG` should only contain alphanumeric characters, and it should not be blank. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "`COREQUISITE` follows the same format as `CODE`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `add name/Programming Methodology code/CS1010 credits/4 tag/programming tag/algorithms tag/c tag/imperative`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `add code/CS1231 name/Discrete Structures credits/4 tag/logic tag/math tag/proving`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `add code/CS2113T name/Software Engineering \u0026 Object-Oriented Programming credits/4 tag/sweng tag/java coreq/CS2101`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "A module can have any number of tags (including 0)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `add code/CS1231 credits/004 name/Discrete Structures`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Listing all modules : `list`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Shows a list of all modules in the module list. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Editing a module : `edit`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Edits an existing module in the module list. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Format: `edit INDEX [name/NAME] [code/CODE] [credits/CREDITS] [tag/TAG]… [coreq/COREQUISITE]…`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* Edits the module at the specified `INDEX`. The index refers to the index number shown in the displayed module list. The index *must be a positive integer* 1, 2, 3, …"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* When editing tags/corequisites, the existing tags/corequisites of the module will be removed (i.e adding of tags is not cumulative.)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* You can remove all the module\u0027s tags by typing `tag/` without specifying any tags after it."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Likewise, you can remove all module\u0027s co-requisites by typing `coreq/` without specifying any codes after it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `edit 1 name/Data Structures and Algorithms code/CS2040C` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Edits the name and code of the 1st module in the displayed module list to be `Data Structures and Algorithms` and `CS2040C` respectively. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `edit 2 code/CS2040C tag/` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Edits the code of the 2nd module in the displayed module list to be `CS2040C` and clears all existing tags associated"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": " with the module. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `edit 3 coreq/CS1010` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Edits the co-requisite of the 3rd module in the displayed module list to be `CS1010`. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `edit 4 coreq/CS2105 coreq/CS2106 coreq/CS2107` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Edits the co-requisites of the 4rd module in the displayed module list to be `CS2105`, `CS2106` and `CS2107`. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d\u003d Locating modules either by name, code or credits: `find`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Finds modules whose names, code or credits matches any of the given keywords. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Format: `find [name/NAME NAME…] [code/CODE CODE…] [credits/CREDITS CREDITS…]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* The search is case insensitive. e.g `security` will match `Security`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* The order of the keywords does not matter. e.g. `Security Information` will match `Information Security`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* The order of the prefix does not matter. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "e.g. finding `name/NAME... code/CODE...` will have the same result as finding `code/CODE... name/NAME...`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Only the module name, code or credits is searched."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Only full words will be matched. e.g. `CS` will not match `CS1231`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* Modules matching at least one keyword will be returned (i.e. `OR` search). +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "e.g. `Information` will return `Information Technology`, `Information Business`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find name/Security` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns `security` and `Information Security` in the displayed module list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find name/Security Information Computer` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns any module having names `Security`, `Information`, or `Computer` in the displayed module list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find code/CS1231 CS2040` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns any module having code `CS1231` or `CS2040` in the displayed module list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find credits/004 012` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns any module having credits `004` or `012` in the displayed module list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find name/Programming code/CS1231` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns any module having name `Programming` or code `CS1231` in the displayed module list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* `find code/CS2113 credits/004 name/Programming` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "Returns any module having name `Programming` or code `CS2113` or credits `004` in the displayed module list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Deleting a module : `delete`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Deletes the specified module from the module list. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Deletes the module at the specified `INDEX`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* The index refers to the index number shown in the displayed module list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, …"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "When deleting a module, any modules with the deleted module as its co-requisite will be updated"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "accordingly (i.e. deleted module is removed from the respective module\u0027s co-requisite list)."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Deletes the 2nd module in the module list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* `find Programming` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Deletes the 1st module in the results of the `find` command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d\u003d Selecting a module : `select`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Selects the module identified by the index number used in the displayed module list. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* Selects the module and loads the Google search page the module at the specified `INDEX`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* The index refers to the index number shown in the displayed module list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, …`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Selects the 2nd module in the displayed module list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Selects the 1st module in the results of the `find` command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Restores PlanWithEase\u0027s data to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Undoable commands: those commands that modify the contents of PlanWithEase\u0027s data (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Creastery"
        },
        "content": "Clears all entries from the module list. +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Adding a module to the degree planner : `planner_add` `[coming in v2.0]`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Adds an existing module to the degree planner. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Format: `planner_add CODE y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `CODE` indicates module code."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `YEAR` indicates the year."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* `SEMESTER` indicates the semester."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* `YEAR` and `SEMESTER` must be either 1, 2, 3 or 4."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** 3 or 4 for `SEMESTER` indicates special semesters 1 and 2 respectively."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* After adding, the changes will be reflected in the degree planner accordingly."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `planner_add CS1231 y/1 s/2` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Adds module CS1231 to year 1 semester 2."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `planner_add CS1010 y/1 s/3` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Adds module CS1010 to year 1 special semester 1."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Deleting a module from the degree planner : `planner_delete` `[coming in v2.0]`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Deletes an existing module from the degree planner. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Format: `planner_delete CODE`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* After deleting, the changes will be reflected in the degree planner accordingly."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `planner_delete CS1231`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Moving a module in the degree planner : `planner_move` `[coming in v2.0]`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Moves a module in the degree planner to another academic semester. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Format: `planner_move CODE y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* After moving, the changes will be reflected in the degree planner accordingly."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `planner_move CS1231 y/1 s/2` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "Moves module CS1231 to year 1 semester 2."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* `planner_move CS1231 y/1 s/4` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Moves module CS1231 to year 1 special semester 2."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Listing degree planners: `planner_list_all`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Shows a list of all degree planners. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Format: `planner_list_all`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Listing a degree planner: `planner_list` `[coming in v2.0]`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Shows a list of a specific degree planner. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Format: `planner_list y/YEAR s/SEMESTER`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* `planner_list y/1 s/1` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Shows a degree planner for year 1 semester 1."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* `planner_list y/1 s/2` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Shows a degree planner for year 1 semester 2"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d\u003d Using degree planner to suggest modules: `planner_suggest` `[coming in v2.0]`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "Displays a list of modules that can be added to the degree planner."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Adding a module code to degree requirement category : `requirement_add`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Add module code to a degree requirement category in the application. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Format: `requirement_add name/NAME [code/CODE]…`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chyeo"
        },
        "content": "*  After adding, the changes will be reflected in the application accordingly."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* `requirement_add name/IT Professionalism code/IS4231` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Add module code `IS4231` into `IT Professionalism` degree requirement category."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* `requirement_add name/Computing Foundations code/CS1231 code/CS2100` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Adds module codes `CS1231` and `CS2100` into `Computing Foundations` degree requirement category."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Deleting a module code from degree requirement category : `requirement_delete` `[coming in v2.0]`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Deletes an existing module code from a degree requirement category. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Format: `requirement_delete name/NAME [code/CODE]…`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chyeo"
        },
        "content": "*  After deleting, the changes will be reflected in the application accordingly."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* `requirement_delete name/Professionalism code/IS4231` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Deletes the module code `IS4231` from the `IT Professionalism` degree requirement category."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Moving a module code in degree requirement category : `requirement_move` `[coming in v2.0]`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Moves a module code to another degree requirement category. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Format: `requirement_move CODE name/NAME`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chyeo"
        },
        "content": "*  After moving, the changes will be reflected in the application accordingly."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* `requirement_move IS4231 name/IT Professionalism` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Moves the module code `IS4231` from to `IT Professionalism` degree requirement category."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d\u003d\u003d Listing all degree requirement categories : `requirement_list` `[coming in v2.0]`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Shows a list of all degree requirement categories in the application and the module codes"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chyeo"
        },
        "content": "added into each degree requirement categories. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chyeo"
        },
        "content": "Format: `requirement_list`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Creastery"
        },
        "content": "PlanWithEase data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Q*: How am I able to import my data to the same application on another computer? +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*A*: Install the application in the other computer and run the import command with the file path to"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "the exported data."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Q*: How do I save my task data in the application? +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*A*: The application saves your data automatically whenever you make any changes. You will not need to save the data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "manually. The application will save the data at the specified storage location."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*Q*: Why did the application complain about an invalid file directory? +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*A*: Check if the directory you wish to relocate to exists and if you have sufficient privileges to read the file."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* *Add module to module list* : `add name/NAME code/CODE credits/CREDITS [tag/TAG]… [coreq/COREQUISITE]…` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Creastery"
        },
        "content": "e.g. `add code/CS2113T name/Software Engineering \u0026 Object-Oriented Programming credits/4 tag/sweng tag/java coreq/CS2101`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* *Edit* : `edit INDEX [name/NAME] [code/CODE] [credits/CREDITS] [tag/TAG]… [coreq/COREQUISITE]…` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Creastery"
        },
        "content": "e.g. `edit 1 name/Data Structures and Algorithms code/CS2040C`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *Find* : `find [name/NAME NAME…] [code/CODE CODE…] [credits/CREDITS CREDITS…]` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "e.g. `find name/Information Security`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Creastery"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Add module to degree planner* : `planner_add CODE y/YEAR s/SEMESTER` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "e.g.  `planner_add CS1010 y/1 s/2`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Delete module from degree planner* : `planner_delete CODE` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "e.g.  `planner_delete CS1231`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Move module in degree planner* : `planner_move CODE y/YEAR s/SEMESTER` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "e.g.  `planner_move CS1231 y/1 s/2`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *List all degree planners* : `planner_list_all`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *List specific degree planner* : `planner_list y/YEAR s/SEMESTER` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "e.g. `planner_list y/1 s/2`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *Using degree planner to suggest modules* : `planner_suggest`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *Add module code to degree requirement category* : `requirement_add name/NAME [code/CODE]…` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chyeo"
        },
        "content": "e.g. `requirement_add name/IT Professionalism code/IS4231`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *Delete module code from degree requirement category* : `requirement_delete name/NAME [code/CODE]…` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chyeo"
        },
        "content": "e.g. `requirement_delete name/IT Professionalism code/IS4231`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *Move module code from degree requirement category*  : `requirement_move CODE"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chyeo"
        },
        "content": "name/NAME` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chyeo"
        },
        "content": "e.g. `requirement_move IS4231 name/IT Professionalism`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chyeo"
        },
        "content": "* *List all degree requirement category* : `requirement_list`"
      }
    ],
    "authorContributionMap": {
      "Creastery": 109,
      "truegitnovice": 45,
      "WendyBaiYunwei": 39,
      "chyeo": 62,
      "lycjackie": 29,
      "-": 176
    }
  },
  {
    "path": "docs/team/chyeo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003d Yeo Cheng Hong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d PROJECT: PlanWithEase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "_{The dummy content given below serves as a placeholder to be updated in the future.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "chyeo": 1,
      "-": 68
    }
  },
  {
    "path": "docs/team/creastery.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d Ngo Wei Lin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d PROJECT: PlanWithEase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "_{The dummy content given below serves as a placeholder to be updated in the future.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "-": 68
    }
  },
  {
    "path": "docs/team/lycjackie.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d Lee Yu Choy - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d PROJECT: PlanWithEase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "_{The dummy content given below serves as a placeholder to be updated in the future.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "lycjackie": 69
    }
  },
  {
    "path": "docs/team/truegitnovice.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d Ahn TaeGyu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d PROJECT: PlanWithEase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "_{The dummy content given below serves as a placeholder to be updated in the future.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 69,
      "Creastery": 2
    }
  },
  {
    "path": "docs/team/wendybaiyunwei.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d Bai Yunwei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "\u003d\u003d PROJECT: PlanWithEase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "_{The dummy content given below serves as a placeholder to be updated in the future.}_ +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WendyBaiYunwei"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "WendyBaiYunwei": 69,
      "Creastery": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.util.InitialDataUtil.getInitialAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PlanWithEase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonAddressBookStorage(userPrefs.getAddressBookFilePath(), userPrefs.getDegreePlannerListFilePath(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        userPrefs.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            initialData \u003d getInitialAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            initialData \u003d getInitialAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PlanWithEase\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        logger.info(\"Starting PlanWithEase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PlanWithEase ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 9,
      "truegitnovice": 2,
      "chyeo": 6,
      "-": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath.toAbsolutePath(), o.userPrefsFilePath.toAbsolutePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\"Current log level : \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(logLevel)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\"Preference file Location : \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(Paths.get(\"\").toAbsolutePath().relativize(userPrefsFilePath.toAbsolutePath()))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 8,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Compare one string with another while ignoring cases and leading/trailing spaces."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @param stringA first string to compare"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @param stringB second string to compare with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @return true if both strings are equal; false otherwise"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static boolean compareEqualsIgnoreCase(String stringA, String stringB) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        requireNonNull(stringA);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        requireNonNull(stringB);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String preppedStringA \u003d stringA.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        checkArgument(!preppedStringA.isEmpty(), \"stringA parameter cannot be empty\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String preppedStringB \u003d stringB.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        checkArgument(!preppedStringB.isEmpty(), \"stringB parameter cannot be empty\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return preppedStringA.equalsIgnoreCase(preppedStringB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 18,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered degreePlanner list */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    ObservableList\u003cDegreePlanner\u003e getFilteredDegreePlannerList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ObservableList\u003cRequirementCategory\u003e getFilteredRequirementCategoryList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Selected module in the filtered module list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * null if no module is selected."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see seedu.address.model.Model#selectedModuleProperty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    ReadOnlyProperty\u003cModule\u003e selectedModuleProperty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the selected module in the filtered module list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedModule(Module)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void setSelectedModule(Module module);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Selected module in the filtered module list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * null if no module is selected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see seedu.address.model.Model#selectedModuleProperty()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ReadOnlyProperty\u003cRequirementCategory\u003e selectedRequirementCategoryProperty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Sets the selected module in the filtered module list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedModule(Module)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void setSelectedRequirementCategory(RequirementCategory requirementCategory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 10,
      "truegitnovice": 5,
      "chyeo": 12,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public ObservableList\u003cDegreePlanner\u003e getFilteredDegreePlannerList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return model.getFilteredDegreePlannerList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cRequirementCategory\u003e getFilteredRequirementCategoryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return model.getFilteredRequirementCategoryList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ReadOnlyProperty\u003cModule\u003e selectedModuleProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return model.selectedModuleProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setSelectedModule(Module module) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.setSelectedModule(module);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ReadOnlyProperty\u003cRequirementCategory\u003e selectedRequirementCategoryProperty() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return model.selectedRequirementCategoryProperty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setSelectedRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.setSelectedRequirementCategory(requirementCategory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "truegitnovice": 6,
      "chyeo": 15,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COREQUISITE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Adds a {@link Module} to the {@link seedu.address.model.AddressBook#modules module list}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // This is declared before MESSAGE_USAGE to prevent illegal forward reference"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String FORMAT_AND_EXAMPLES \u003d \"Format: \" + COMMAND_WORD + \u0027 \u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_CODE + \"CODE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_CREDITS + \"CREDITS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[\" + PREFIX_COREQUISITE + \"COREQUISITE]... \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_CODE + \"CS2113T \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_NAME + \"Software Engineering and Object-Oriented Programming \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_COREQUISITE + \"CS2101 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_TAG + \"OOP \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_TAG + \"RCS \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + PREFIX_TAG + \"UML\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // General command help details"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new module to the module list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + FORMAT_AND_EXAMPLES;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // Command success message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully added a new module:\\n%1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // Command failure messages"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"You cannot add a new module (%1$s), as the module code %1$s already exists in the module list!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_COREQUISITE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"You cannot add a new module (%1$s) that has a co-requisite module (%2$s) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"which does not exists in the module list!\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[Tip] You can try adding the module (%1$s) without specifying the co-requisite module (%2$s) first.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Afterwards, add the module (%2$s) and specify the module (%1$s) as a co-requisite.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"This will make both modules (%1$s \u0026 %2$s) co-requisites!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public AddCommand(Module module) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_MODULE, toAdd.getCode()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Code corequisite : toAdd.getCorequisites()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (!model.hasModuleCode(corequisite)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                throw new CommandException(String.format("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        MESSAGE_NON_EXISTENT_COREQUISITE, toAdd.getCode(), corequisite)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 47,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.util.InitialDataUtil.getInitialAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Clears all existing data in {@link seedu.address.model.AddressBook}, and populates the initial (empty)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * degree planners and requirement categories."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully cleared all data!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[Tip] If you unintentionally used this command, do use the undo command to revert back the changes!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.setAddressBook(getInitialAddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 6,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Deletes a module identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Deletes a {@link Module} identified using it\u0027s displayed {@link Index} in the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * {@link seedu.address.model.AddressBook#modules module list}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // This is declared before MESSAGE_USAGE to prevent illegal forward reference"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String FORMAT_AND_EXAMPLES \u003d \"Format: \" + COMMAND_WORD + \" INDEX \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Example: To delete the first module in the displayed module list below, you can enter: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \": Deletes a module in the displayed module list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"To choose which module you want to delete, please include the index number \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"(beside the module code) in the displayed module list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + FORMAT_AND_EXAMPLES;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Successfully deleted the module:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 19,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAnyNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COREQUISITE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Edits the details of an existing {@link Module} in the {@link seedu.address.model.AddressBook#modules module list}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // This is declared before MESSAGE_USAGE to prevent illegal forward reference"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String FORMAT_AND_EXAMPLES \u003d \"Format: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \" INDEX \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[\" + PREFIX_CODE + \"CODE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[\" + PREFIX_CREDITS + \"CREDITS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[\" + PREFIX_COREQUISITE + \"COREQUISITE]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Example: To edit the number of credits assigned to the first module in the displayed module list below\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \", you can enter: \" + COMMAND_WORD + \" 1 \" + PREFIX_CREDITS + \"8 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // General command help details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \": Edits the existing details (e.g. name, code, credits) of a module in the displayed module list.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"To choose which module you want to edit, please include the index number \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"(beside the module code) in the displayed module list.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \u0027\\n\u0027 + FORMAT_AND_EXAMPLES;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // Command success message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Successfully edited the module (%1$s) to:\\n%2$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // Command failure messages"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"You cannot edit module (%1$s) to have the module code %2$s.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Module (%2$s) already exists in the module list!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_INVALID_COREQUISITE \u003d \"A module cannot be a co-requisite of itself!\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Perhaps you might have entered the new co-requisites module(s) incorrectly?\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"You didn\u0027t specify what module details you want to edit.\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Perhaps you would like to see the command format and example again?\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + FORMAT_AND_EXAMPLES;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_COREQUISITE \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"You cannot edit the module (%1$s) to have a co-requisite module (%2$s) \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"that does not exists in the module list!\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"[Tip] You can add the module (%1$s), and specify the module (%2$s) as a co-requisite instead!\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param index of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditCommand(Index index, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.editModuleDescriptor \u003d editModuleDescriptor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!moduleToEdit.isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    String.format(MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(), editedModule.getCode())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Code corequisite : editedModule.getCorequisites()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (moduleToEdit.getCode().equals(corequisite)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_COREQUISITE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            } else if (!model.hasModuleCode(corequisite)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        String.format(MESSAGE_NON_EXISTENT_COREQUISITE, moduleToEdit.getCode(), corequisite)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.editModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModuleInModuleList \u003d model.getFilteredModuleList().stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .filter(module -\u003e editedModule.getCode().equals(module.getCode())).findFirst().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.format(MESSAGE_EDIT_MODULE_SUCCESS, moduleToEdit.getCode(), editedModuleInModuleList)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assert editModuleDescriptor !\u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Name updatedName \u003d editModuleDescriptor.getName().orElse(moduleToEdit.getName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Credits updatedCredits \u003d editModuleDescriptor.getCredits().orElse(moduleToEdit.getCredits());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code updatedCode \u003d editModuleDescriptor.getCode().orElse(moduleToEdit.getCode());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cCode\u003e updatedCorequisites \u003d editModuleDescriptor.getCorequisites().orElse(moduleToEdit.getCorequisites());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Module(updatedName, updatedCredits, updatedCode, updatedTags, updatedCorequisites);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Stores the details to edit the module with.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Each non-empty field value will replace the corresponding field value of the module."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        private Credits credits;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        private Code code;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        private Set\u003cCode\u003e corequisites;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Copy constructor.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Defensive copies of {@code tags} and {@code corequisites} are used internally to prevent accidental"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * modifications."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            requireNonNull(toCopy);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            setCredits(toCopy.credits);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            setCode(toCopy.code);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            setCorequisites(toCopy.corequisites);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return isAnyNonNull(name, credits, code, tags, corequisites);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void setCredits(Credits credits) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public Optional\u003cCredits\u003e getCredits() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void setCode(Code code) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public Optional\u003cCode\u003e getCode() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@link #tags}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.tags \u003d (tags !\u003d null)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ? new HashSet\u003c\u003e(tags)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Returns an unmodifiable {@link Tag} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Returns {@code Optional#empty()} if {@link #tags} is null."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return tags !\u003d null"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Sets {@code corequisites} to this object\u0027s {@link #corequisites}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * A defensive copy of {@code corequisites} is used internally."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void setCorequisites(Set\u003cCode\u003e corequisites) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.corequisites \u003d (corequisites !\u003d null)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ? new HashSet\u003c\u003e(corequisites)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    : null;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Returns an unmodifiable {@link Code} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code corequisites} is null."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public Optional\u003cSet\u003cCode\u003e\u003e getCorequisites() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return corequisites !\u003d null"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(corequisites))"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    \u0026\u0026 getCredits().equals(e.getCredits())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    \u0026\u0026 getCode().equals(e.getCode())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    \u0026\u0026 getCorequisites().equals(e.getCorequisites());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 142,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PlanWithEase as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_AND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_LEFT_BRACKET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_OR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_RIGHT_BRACKET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Finds and lists all modules in address book whose name or code contains any of the argument keywords."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all modules which satisfies the expression\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \" of search conditions specified and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"OPERATOR \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"[\" + PREFIX_CODE + \"CODE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"OPERATOR \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"[\" + PREFIX_CREDITS + \"CREDITS]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"OPERATOR \" + OPERATOR_AND + \"for logical \\\"AND\\\" operation (both conditions A AND B must match)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"OPERATOR \" + OPERATOR_OR + \" for logical \\\"OR\\\" operation (either conditions A OR B must match)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"You can also use parenthesis to group what search conditions to evaluate first.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"Example 1 \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Programming \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + PREFIX_NAME + \"Data\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Programming \" + OPERATOR_AND + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + PREFIX_NAME + \"Methodology\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + \"Example 3: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"Programming \" + OPERATOR_AND + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + OPERATOR_LEFT_BRACKET + \" \" + PREFIX_CODE + \"CS1231 \" + OPERATOR_OR + \" \" + PREFIX_CODE + \"CS1010 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            + OPERATOR_RIGHT_BRACKET + \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPRESSION \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            \"Invalid command format! (Filter expression is invalid) \\n%1$s \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private final Predicate\u003cModule\u003e predicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public FindCommand(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.format(Messages.MESSAGE_MODULES_LISTED_OVERVIEW, model.getFilteredModuleList().size()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "lycjackie": 32,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not entered any commands yet!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cString\u003e commandHistory \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (commandHistory.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String reversedCommandHistory \u003d commandHistory.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .sorted(Collections.reverseOrder())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .map(command -\u003e \"- \" + command)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reversedCommandHistory));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 11,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Lists all modules in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PlannerListAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DEGREE_PLANNERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Lists all degree planners in the address book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerListAllCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"planner_list_all\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all degree planners:\\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        model.updateFilteredDegreePlannerList(PREDICATE_SHOW_ALL_DEGREE_PLANNERS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        StringBuilder degreePlannerListContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (DegreePlanner degreePlanner : model.getFilteredDegreePlannerList()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .append(\"Year: \" + degreePlanner.getYear() + \" Semester: \" + degreePlanner.getSemester() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            if (degreePlanner.getCodes().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent.append(\"No module inside\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .append(\"Modules: \" + degreePlanner.getCodes().stream().map(Code::toString).collect("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                                Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, degreePlannerListContent.toString()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PlannerMoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Moves a module in the degree plan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerMoveCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"planner_move\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Moves a module in a degree plan. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_YEAR + \"YEAR \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_CODE + \"CODE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_YEAR + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            + PREFIX_CODE + \"CS1010\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"Successfully moved %1$s to Year %2$s Semester %3$s of the degree plan!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CODE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"The module %1$s does not exist in the degree plan!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_DEGREE_PLANNER \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"Year %1$s Semester %2$s does not exist in the degree planner!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Year destinationYear;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Semester destinationSemester;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Code toMove;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Creates an PlannerMoveCommand to add the specified {@code PlannerMoveCommand}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public PlannerMoveCommand(Year year, Semester semester, Code code) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireAllNonNull(year, semester, code);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.destinationYear \u003d year;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.destinationSemester \u003d semester;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.toMove \u003d code;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner toFind \u003d new DegreePlanner(destinationYear, destinationSemester, Collections.emptySet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner sourcePlanner \u003d model.getDegreePlannerByCode(toMove);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner destinationPlanner \u003d model.getAddressBook().getDegreePlannerList().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .filter(toFind::isSameDegreePlanner)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (sourcePlanner \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_CODE, toMove));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (destinationPlanner \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    String.format(MESSAGE_NONEXISTENT_DEGREE_PLANNER, destinationYear, destinationSemester));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!sourcePlanner.isSameDegreePlanner(destinationPlanner)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Set\u003cCode\u003e newSourceCodes \u003d new HashSet\u003c\u003e(sourcePlanner.getCodes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            newSourceCodes.remove(toMove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Set\u003cCode\u003e newDestinationCodes \u003d new HashSet\u003c\u003e(destinationPlanner.getCodes());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            newDestinationCodes.add(toMove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            DegreePlanner editedSourcePlanner \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new DegreePlanner(sourcePlanner.getYear(), sourcePlanner.getSemester(), newSourceCodes);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            DegreePlanner editedDestinationPlanner \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new DegreePlanner(destinationPlanner.getYear(), destinationPlanner.getSemester(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            newDestinationCodes);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            model.setDegreePlanner(sourcePlanner, editedSourcePlanner);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            model.setDegreePlanner(destinationPlanner, editedDestinationPlanner);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toMove, destinationYear, destinationSemester));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!(other instanceof PlannerMoveCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand otherCommand \u003d (PlannerMoveCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return destinationYear.equals(otherCommand.destinationYear)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 destinationSemester.equals(otherCommand.destinationSemester)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 toMove.equals(otherCommand.toMove);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 113,
      "chyeo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RequirementAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Adds a module to a requirement category."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementAddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"requirement_add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to a requirement category.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"[\" + PREFIX_CODE + \"CODE]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_NAME + \"IT Professionalism \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_CODE + \"IS4231 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module added to requirement category: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The requirement category (%1$s) does not exist!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CODE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The module to be added to the requirement category does not exists in the module list!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CODE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The module has already been added to %1$s \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_EXISTING_CODE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The module to be added already exists in another requirement category!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Name toFind;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Set\u003cCode\u003e toAdd \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Creates an RequirementAddCommand to add the specified {@code RequirementCategory}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementAddCommand(Name name, Set\u003cCode\u003e codeSet) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(codeSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.toFind \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.toAdd.addAll(codeSet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory currentRequirementCategory \u003d model.getRequirementCategory(toFind);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (currentRequirementCategory \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY, toFind));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (toAdd.stream().anyMatch(code -\u003e !model.hasModuleCode(code))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_CODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (currentRequirementCategory.hasModuleCode(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_CODE, toFind));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Stream\u003cRequirementCategory\u003e requirementCategories \u003d model.getAddressBook()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .getRequirementCategoryList().stream();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        boolean isAnyCodeInRequirementCategories \u003d requirementCategories.anyMatch(reqCat -\u003e toAdd.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .anyMatch(code -\u003e reqCat.getCodeSet().contains(code)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (isAnyCodeInRequirementCategories) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_CODE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e newCodeSet \u003d new HashSet\u003c\u003e(currentRequirementCategory.getCodeSet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        newCodeSet.addAll(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory editedRequirementCategory \u003d new RequirementCategory("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                toFind, currentRequirementCategory.getCredits(), newCodeSet);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.setRequirementCategory(currentRequirementCategory, editedRequirementCategory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toFind));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                || (other instanceof RequirementAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 toFind.equals(((RequirementAddCommand) other).toFind)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RequirementAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RequirementListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REQUIREMENT_CATEGORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Lists all requirement categories in the address book to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"requirement_list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully listed all requirement categories: \\n%1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.updateFilteredRequirementCategoryList(PREDICATE_SHOW_ALL_REQUIREMENT_CATEGORIES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        StringBuilder requirementListContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d model.getFilteredRequirementCategoryList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (RequirementCategory requirementCategory : requirementCategories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(requirementCategory.getName()).append(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            int currentCredits \u003d requirementCategory.getCodeSet().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .map(code -\u003e model.getModuleByCode(code).getCredits().toString())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .map(Integer::parseInt).reduce(0, (totalCredits, credit) -\u003e totalCredits + credit);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(\"(\").append(currentCredits).append(\"/\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .append(requirementCategory.getCredits()).append(\" Modular Credits Fulfilled) \\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (requirementCategory.getCodeSet().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                requirementListContent.append(\"No modules added!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                requirementListContent.append(\"Modules: \").append(requirementCategory.getCodeSet().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .map(Code::toString).sorted().collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, requirementListContent.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RequirementRemoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Removes a module from a requirement category."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementRemoveCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"requirement_remove\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a module from a requirement category.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_CODE + \"CODE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"[\" + PREFIX_CODE + \"CODE]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_NAME + \"IT Professionalism \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            + PREFIX_CODE + \"IS4231 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module removed from requirement category: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The requirement category (%1$s) does not exist!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_CODE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The module to be removed from the requirement category does not exists in the module list!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_REQUIREMENT_CATEGORY_NONEXISTENT_CODE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"The module to be removed does not exists in %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Name toFind;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Set\u003cCode\u003e toRemove \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Creates an RequirementRemoveCommand to add the specified {@code Name, codeSet}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementRemoveCommand(Name name, Set\u003cCode\u003e codeSet) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(codeSet);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.toFind \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.toRemove.addAll(codeSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory currentRequirementCategory \u003d model.getRequirementCategory(toFind);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (currentRequirementCategory \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY, toFind));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (toRemove.stream().anyMatch(code -\u003e !model.hasModuleCode(code))) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!currentRequirementCategory.getCodeSet().containsAll(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_REQUIREMENT_CATEGORY_NONEXISTENT_CODE, toFind));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e newCodeSet \u003d new HashSet\u003c\u003e(currentRequirementCategory.getCodeSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        newCodeSet.removeAll(toRemove);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory editedRequirementCategory \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new RequirementCategory(toFind, currentRequirementCategory.getCredits(), newCodeSet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.setRequirementCategory(currentRequirementCategory, editedRequirementCategory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toFind));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                || (other instanceof RequirementRemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 toFind.equals(((RequirementRemoveCommand) other).toFind)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 toRemove.equals(((RequirementRemoveCommand) other).toRemove));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Selects a module identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \": Selects the module identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_SELECT_MODULE_SUCCESS \u003d \"Selected Module: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e filteredModuleList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredModuleList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.setSelectedModule(filteredModuleList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_MODULE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COREQUISITE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@link AddCommand}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * and returns an {@link AddCommand} object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                args, PREFIX_NAME, PREFIX_CREDITS, PREFIX_CODE, PREFIX_TAG, PREFIX_COREQUISITE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        boolean isAnyRequiredPrefixAbsent \u003d !arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CODE, PREFIX_CREDITS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (isAnyRequiredPrefixAbsent || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Credits credits \u003d ParserUtil.parseCredits(argMultimap.getValue(PREFIX_CREDITS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cCode\u003e corequisiteList \u003d ParserUtil.parseCorequisites(argMultimap.getAllValues(PREFIX_COREQUISITE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d new Module(name, credits, code, tagList, corequisiteList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new AddCommand(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 26,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerListAllCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerMoveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementRemoveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        case RequirementAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return new RequirementAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        case RequirementListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return new RequirementListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        case RequirementRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return new RequirementRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        case PlannerListAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return new PlannerListAllCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        case PlannerMoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return new PlannerMoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 8,
      "chyeo": 12,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BooleanExpressionParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.Operator.applyOperator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.Operator.getOperatorFromString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.Operator.hasHigherPrecedence;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CreditsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.KeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Parse input string into a composite predicate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class BooleanExpressionParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static KeywordsPredicate getKeywordsPredicate(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CODE, PREFIX_CREDITS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        KeywordsPredicate predicate \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            String nameKeyword \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(List.of(nameKeyword));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            String codeKeyword \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get()).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            predicate \u003d new CodeContainsKeywordsPredicate(List.of(codeKeyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            String creditKeyword \u003d ParserUtil.parseCredits(argMultimap.getValue(PREFIX_CREDITS).get()).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            predicate \u003d new CreditsContainsKeywordsPredicate(List.of(creditKeyword));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Parse input argument into a composite predicate."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * This parse method make use of the shunting yard algorithm to convert in-fix to post fix then evaluate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * the expression."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param stringToTokenize the user provided argument"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @return a composite predicate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Predicate\u003cModule\u003e parse(String stringToTokenize, List\u003cPrefix\u003e prefixes) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        BooleanExpressionTokenizer tokenizer \u003d new BooleanExpressionTokenizer(stringToTokenize, prefixes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        Deque\u003cPredicate\u003cModule\u003e\u003e output \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        Deque\u003cOperator\u003e operatorStack \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            boolean isNotExpectingLeftBracket \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            while (tokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                String currentToken \u003d tokenizer.nextToken();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                switch (currentToken) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                case CliSyntax.OPERATOR_LEFT_BRACKET:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    if (isNotExpectingLeftBracket) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        throw new ParseException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                                String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        operatorStack.push(Operator.LEFT_BRACKET);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        isNotExpectingLeftBracket \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                case CliSyntax.OPERATOR_RIGHT_BRACKET:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    while (operatorStack.peek() !\u003d Operator.LEFT_BRACKET) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        output.push(applyOperator(operatorStack.pop(), output.pop(), output.pop()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    operatorStack.pop();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    isNotExpectingLeftBracket \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                case CliSyntax.OPERATOR_OR: // Fallthrough"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                case CliSyntax.OPERATOR_AND:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    while (!operatorStack.isEmpty()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                            \u0026\u0026 hasHigherPrecedence(operatorStack.peek(), getOperatorFromString(currentToken))) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        output.push(applyOperator(operatorStack.pop(), output.pop(), output.pop()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    operatorStack.push(getOperatorFromString(currentToken));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    isNotExpectingLeftBracket \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    // as ArgumentMultimap require a whitespace before the args"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    // we will have to add a whitespace before our args without changing the code"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    // of ArgumentMultimap."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    Predicate\u003cModule\u003e in \u003d getKeywordsPredicate(WHITESPACE + currentToken);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    output.push(in);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    isNotExpectingLeftBracket \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            throw new ParseException(String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        while (!operatorStack.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            // need at least 2 inputs predicates to apply operator"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            if (output.size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                output.push(applyOperator(operatorStack.pop(), output.pop(), output.pop()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Output stack cannot have more than 1 predicate after shunting yard."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // i.e. There is 2 predicate in an expression without a operator."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        if (output.size() \u003e 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assert output.size() \u003d\u003d 1 : \"output.size() should be 1.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return output.pop();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "lycjackie": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BooleanExpressionTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATORS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Tokenizes command in the format of a boolean expression by extracting all arguments with {@link Prefix prefix} and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * {@link CliSyntax#OPERATORS boolean operators} as tokens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * This class functions differently from {@link ArgumentTokenizer} (does not use whitespace as delimiter) and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * {@link java.util.StringTokenizer StringTokenizer} (insufficient in extracting prefixed arguments and boolean"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * operators), and is intended to be used by {@link BooleanExpressionParser}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * e.g. Tokenizing {@code a/A || (b/B \u0026\u0026 c/C)} where prefixes are {@code a/ b/ c/} will yield the following tokens: \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 1. a/A \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 2. ||  \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 3. (   \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 4. b/B \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 5. \u0026\u0026  \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 6. c/C \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * 7. )   \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class BooleanExpressionTokenizer {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private String stringToTokenize;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final List\u003cString\u003e prefixes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final List\u003cString\u003e delimiters;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Deque\u003cString\u003e tokens \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private int nextTokenStartIndex \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private int nextTokenEndIndex \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Initializes a {@link BooleanExpressionTokenizer} that tokenizes {@code stringToTokenize} by extracting all"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * arguments with {@link Prefix prefix} and {@link CliSyntax#OPERATORS boolean operators} as tokens."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param stringToTokenize a string to be tokenized"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param prefixes         a list of prefixes to be included as delimiters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public BooleanExpressionTokenizer(String stringToTokenize, List\u003cPrefix\u003e prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(stringToTokenize);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(prefixes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.stringToTokenize \u003d stringToTokenize;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.prefixes \u003d prefixes.stream().map(Prefix::getPrefix).collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.delimiters \u003d Stream.concat(this.prefixes.stream(), OPERATORS.stream()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        tokenizeString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Tokenizes {@link #stringToTokenize} based on the {@link CliSyntax#OPERATORS boolean operators} and the specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@link #prefixes} until there are no more tokens to be extracted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Note: This method does not parse or validate the contents of the tokens."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void tokenizeString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        while (hasNextToken()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            extractNextToken();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Tests if there are still more tokens available for extraction.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * If this method returns {@code true}, then a subsequent call to {@link #extractNextToken()} will successfully"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * extract the next token available."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @return {@code true} if and only if there is at least one token remaining; {@code false} otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private boolean hasNextToken() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // ensure token start/end indexes are within valid range"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (nextTokenStartIndex \u003e\u003d stringToTokenize.length() || nextTokenEndIndex \u003e\u003d stringToTokenize.length()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Optional\u003cInteger\u003e optionalNextTokenEndIndex \u003d delimiters.stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .map(delimiter -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    int index \u003d stringToTokenize.indexOf(delimiter, nextTokenStartIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    if (index \u003d\u003d nextTokenStartIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        index +\u003d delimiter.length();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    return index;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                })"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .filter(index -\u003e index !\u003d -1) // exclude -1 (indicates delimiter does not exists)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .min(Integer::compare); // get the smallest end index for next token"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!optionalNextTokenEndIndex.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            nextTokenEndIndex \u003d stringToTokenize.length();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return nextTokenStartIndex !\u003d nextTokenEndIndex;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            nextTokenEndIndex \u003d optionalNextTokenEndIndex.get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Extracts the next available trimmed token, and adds it to the {@link #tokens} if it is not empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * However, if the last token extracted is prefixed but the next token extracted is not a delimiter, the next token"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * extracted will be concatenated to the last token extracted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void extractNextToken() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (nextTokenStartIndex \u003e\u003d stringToTokenize.length() || nextTokenEndIndex \u003e stringToTokenize.length()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String nextToken \u003d stringToTokenize.substring(nextTokenStartIndex, nextTokenEndIndex).trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!nextToken.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            String lastToken \u003d tokens.peekLast();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            // Checks if last token extracted is prefixed, but nextToken is not delimiter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (!delimiters.contains(nextToken) \u0026\u0026 lastToken !\u003d null \u0026\u0026 prefixes.contains(lastToken)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                // concatenate both tokens together if so, and update tokens accordingly"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String joinnedToken \u003d lastToken + nextToken;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                tokens.removeLast();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                tokens.addLast(joinnedToken);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                tokens.addLast(nextToken);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        nextTokenStartIndex \u003d nextTokenEndIndex;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the next token from this boolean expression tokenizer."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @return the next token extracted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @throws NoSuchElementException if there is no more tokens remaining"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public String nextToken() throws NoSuchElementException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return tokens.removeFirst();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns a boolean that indicates whether there are still tokens remaining.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * If this method returns {@code true}, then a subsequent call to {@link #nextToken()} will successfully return a"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * token."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @return {@code true} if and only if there is at least one token remaining; {@code false} otherwise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean hasMoreTokens() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return tokens.size() \u003e 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"code/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"credits/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Prefix PREFIX_COREQUISITE \u003d new Prefix(\"coreq/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"year/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"sem/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static final String OPERATOR_OR \u003d \"||\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static final String OPERATOR_AND \u003d \"\u0026\u0026\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String OPERATOR_LEFT_BRACKET \u003d \"(\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String OPERATOR_RIGHT_BRACKET \u003d \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final List\u003cString\u003e OPERATORS \u003d List.of("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            OPERATOR_AND,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            OPERATOR_OR,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            OPERATOR_LEFT_BRACKET,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            OPERATOR_RIGHT_BRACKET"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 16,
      "truegitnovice": 2,
      "lycjackie": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COREQUISITE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                args, PREFIX_NAME, PREFIX_CREDITS, PREFIX_CODE, PREFIX_TAG, PREFIX_COREQUISITE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            editModuleDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            editModuleDescriptor.setCredits(ParserUtil.parseCredits(argMultimap.getValue(PREFIX_CREDITS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CODE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            editModuleDescriptor.setCode(ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editModuleDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        parseCorequisitesForEdit(argMultimap.getAllValues(PREFIX_COREQUISITE))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .ifPresent(editModuleDescriptor::setCorequisites);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new EditCommand(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e corequisites} into a {@code Set\u003cCode\u003e} if {@code corequisites} is non-empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * If {@code corequisites} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code Set\u003cCode\u003e} containing zero tags."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Optional\u003cSet\u003cCode\u003e\u003e parseCorequisitesForEdit(Collection\u003cString\u003e corequisites) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assert corequisites !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (corequisites.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Collection\u003cString\u003e corequisitesSet \u003d (corequisites.size() \u003d\u003d 1 \u0026\u0026 corequisites.contains(\"\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                ? Collections.emptySet()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                : corequisites;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return Optional.of(ParserUtil.parseCorequisites(corequisitesSet));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 40,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final List\u003cPrefix\u003e PREFIXES \u003d List.of("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            PREFIX_NAME,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            PREFIX_CODE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            PREFIX_CREDITS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Predicate\u003cModule\u003e predicate \u003d BooleanExpressionParser.parse(args, PREFIXES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 10,
      "lycjackie": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Operator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_AND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_OR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Operators that can be used"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public enum Operator {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     We will use 99 for highest precedence, 0 for lowest precedence"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     Order of precedence"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u0026\u0026 \u003e OR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    // LEFT_BRACKET and RIGHT_BRACKET uses 1 because we handle it in our switch condition."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    LEFT_BRACKET(0),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    RIGHT_BRACKET(0),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    // Boolean OR. We use 11 to indicate lower precedence"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    OR(11),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    // Boolean AND. We use 22 to indicate a higher precedence vs boolean OR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    // We increase more than 1 mainly for future references if there is any operators we need between them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    AND(22);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static Map\u003cString, Operator\u003e ops \u003d Map.of("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            OPERATOR_OR, Operator.OR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            OPERATOR_AND, Operator.AND"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    final int precedence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    Operator(int precedence) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        this.precedence \u003d precedence;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static Operator getOperatorFromString(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return ops.get(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static boolean hasHigherPrecedence(Operator op1, Operator op2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return op1.precedence \u003e\u003d op2.precedence;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Apply the operator on the 2 predicate"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @param operator"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @param predicate1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @param predicate2"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * @return a composite predicate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static Predicate\u003cModule\u003e applyOperator(Operator operator, Predicate\u003cModule\u003e predicate1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            Predicate\u003cModule\u003e predicate2) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            return predicate1.or(predicate2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            return predicate1.and(predicate2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            throw new ParseException(String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses a {@code String credits} into a {@code Credits}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Credits parseCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!Credits.isValidCredits(trimmedCredits)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ParseException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Credits(trimmedCredits);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses a {@code String code} into an {@code Code}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Code parseCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Parses a {@code String year} into an {@code Year}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Parses a {@code String semester} into an {@code Semester}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static Semester parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!Semester.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new Semester(trimmedSemester);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e codes} into a {@code Set\u003cCode\u003e}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static Set\u003cCode\u003e parseCodes(Collection\u003cString\u003e codes) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(codes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final Set\u003cCode\u003e codeList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (String code : codes) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            codeList.add(parseCode(code));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return codeList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e corequisites} into a {@code Set\u003cCode\u003e}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Set\u003cCode\u003e parseCorequisites(Collection\u003cString\u003e corequisites) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(corequisites);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Set\u003cCode\u003e corequisitesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (String corequisite : corequisites) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            corequisitesSet.add(parseCode(corequisite));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return corequisitesSet;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Checks if the {@code keyword} is a word of {@code compareTo},"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * or if {@code keyword} contain multiple words, checks whether {@code keyword} is equals to {@code compareTo}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Ignore cases."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * If keyword do not contain any space. We will check if its part of a word."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Else we check for a full match."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * \u003cbr\u003eexamples: \u003cpre\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *     keyword \u003d \"abc\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *     Returns true since \"abc\" is part of \"abc xyz 123\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *     keyword \u003d \"abc xyz"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     *     Returns true since \"abc xyz\" is equal to \"abc xyz\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static boolean parseKeyword(String keyword, String compareTo) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        if (keyword.split(\"\\\\s+\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            return StringUtil.containsWordIgnoreCase(compareTo, keyword);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            return StringUtil.compareEqualsIgnoreCase(compareTo, keyword);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 31,
      "truegitnovice": 18,
      "chyeo": 12,
      "lycjackie": 23,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PlannerMoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerMoveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Parses input arguments and creates a new PlannerMoveCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerMoveCommandParser implements Parser\u003cPlannerMoveCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PlannerMoveCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * and returns an PlannerMoveCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public PlannerMoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_YEAR, PREFIX_SEMESTER, PREFIX_CODE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlannerMoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new PlannerMoveCommand(year, semester, code);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RequirementAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementAddCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RequirementAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e codeList \u003d ParserUtil.parseCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new RequirementAddCommand(name, codeList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RequirementRemoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementRemoveCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Parses input arguments and creates a new RequirementRemoveCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementRemoveCommandParser implements Parser\u003cRequirementRemoveCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RequirementRemoveCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * and returns an RequirementRemoveCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RequirementRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e codeList \u003d ParserUtil.parseCodes(argMultimap.getAllValues(PREFIX_CODE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new RequirementRemoveCommand(name, codeList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.UniqueDegreePlannerList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.UniqueRequirementCategoryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final UniqueDegreePlannerList degreePlanners;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final UniqueRequirementCategoryList requirementCategories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners \u003d new UniqueDegreePlannerList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories \u003d new UniqueRequirementCategoryList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Creates an AddressBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        setDegreePlanners(newData.getDegreePlannerList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        setRequirementCategories(newData.getRequirementCategoryList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Replaces the contents of the degree planner list with {@code degreePlanners}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code degreePlanners} must not contain duplicate degree planner."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlanners(List\u003cDegreePlanner\u003e degreePlanners) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreePlanners.setDegreePlanners(degreePlanners);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Replaces the contents of the requirement list with {@code requirement}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code requirement} must not contain duplicate requirement."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategories(List\u003cRequirementCategory\u003e requirementCategories) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategories.setRequirementCategories(requirementCategories);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns a module if there is a module with the same module code as {@code code}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Module getModuleByCode(Code code) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return modules.getModuleByCode(code);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if a {@code Module} with the specified {@code Code} exists in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean hasModuleCode(Code code) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return modules.asUnmodifiableObservableList().stream().anyMatch((module) -\u003e module.getCode().equals(code));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Adds a module to the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module must not already exist in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void addModule(Module moduleToAdd) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modules.add(moduleToAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void editModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!target.getCode().equals(editedModule.getCode())) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            cascadeEditedCodeInDegreePlanners(target.getCode(), editedModule.getCode());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            cascadeEditedCodeInRequirementCategories(target.getCode(), editedModule.getCode());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the edited module code by updating {@code UniqueDegreePlannerList} accordingly"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param codeToEdit module code to edit/find"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param editedCode module code to replace with"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeEditedCodeInDegreePlanners(Code codeToEdit, Code editedCode) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cDegreePlanner\u003e degreePlanners \u003d getDegreePlannerList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (DegreePlanner degreePlanner : degreePlanners) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (degreePlanner.getCodes().contains(codeToEdit)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedDegreePlannerCodes \u003d new HashSet\u003c\u003e(degreePlanner.getCodes());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedDegreePlannerCodes.remove(codeToEdit);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedDegreePlannerCodes.add(editedCode);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                DegreePlanner editedDegreePlanner \u003d new DegreePlanner("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        degreePlanner.getYear(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        degreePlanner.getSemester(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedDegreePlannerCodes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setDegreePlanner(degreePlanner, editedDegreePlanner);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the edited module code by updating {@code UniqueRequirementCategoryList} accordingly"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param codeToEdit module code to edit/find"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param editedCode module code to replace with"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeEditedCodeInRequirementCategories(Code codeToEdit, Code editedCode) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d getRequirementCategoryList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (RequirementCategory requirementCategory : requirementCategories) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (requirementCategory.getCodeSet().contains(codeToEdit)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedCodes \u003d new HashSet\u003c\u003e(requirementCategory.getCodeSet());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCodes.remove(codeToEdit);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCodes.add(editedCode);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                RequirementCategory editedRequirementCategory \u003d new RequirementCategory("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        requirementCategory.getName(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        requirementCategory.getCredits(),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedCodes"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setRequirementCategory(requirementCategory, editedRequirementCategory);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        cascadeDeletedCodeInDegreePlanners(key.getCode());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        cascadeDeletedCodeInRequirementCategories(key.getCode());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the deleted module code by removing it from {@code UniqueDegreePlannerList} accordingly"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param codeToDelete module code to delete"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeDeletedCodeInDegreePlanners(Code codeToDelete) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cDegreePlanner\u003e degreePlanners \u003d getDegreePlannerList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (DegreePlanner degreePlanner : degreePlanners) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (degreePlanner.getCodes().contains(codeToDelete)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedCodes \u003d new HashSet\u003c\u003e(degreePlanner.getCodes());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCodes.remove(codeToDelete);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                DegreePlanner editedDegreePlanner \u003d new DegreePlanner("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        degreePlanner.getYear(),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        degreePlanner.getSemester(),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedCodes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setDegreePlanner(degreePlanner, editedDegreePlanner);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the deleted module code by removing it from {@code UniqueRequirementCategoryList} accordingly"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param codeToDelete module code to delete"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeDeletedCodeInRequirementCategories(Code codeToDelete) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d getRequirementCategoryList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (RequirementCategory requirementCategory : requirementCategories) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (requirementCategory.getCodeSet().contains(codeToDelete)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedCodes \u003d new HashSet\u003c\u003e(requirementCategory.getCodeSet());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCodes.remove(codeToDelete);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                RequirementCategory editedRequirementCategory \u003d new RequirementCategory("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        requirementCategory.getName(),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        requirementCategory.getCredits(),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedCodes"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setRequirementCategory(requirementCategory, editedRequirementCategory);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    //// planner-level operations"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if a degree planner with the same identity as {@code degreePlanner} exists in the"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * degree planner."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean hasDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(degreePlanner);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlanners.contains(degreePlanner);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Return the degree planner which contains the given {@code code}, otherwise returns null."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner getDegreePlannerByCode(Code code) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlanners.getDegreePlannerByCode(code);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Adds a degree planner to the degree planner list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The degree planner must not already exist in the degree planner list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void addDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.add(degreePlanner);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Replaces the given degree planner {@code target} in the list with {@code editedDegreePlanner}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code target} must exist in the degree planner list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The identity of {@code editedDegreePlanner} must not be the same as another existing degree planner"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * in the degree planner list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlanner(DegreePlanner target, DegreePlanner editedDegreePlanner) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(editedDegreePlanner);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.setDegreePlanner(target, editedDegreePlanner);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Removes {@code key} from this {@code DegreePlannerList}."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code key} must exist in the degree planner list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void removeDegreePlanner(DegreePlanner key) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.remove(key);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //// requirement-level operations"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a requirement with the name as {@code requirement} exists in the"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean hasRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryName);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategories.contains(requirementCategoryName);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a requirement object {@code requirement} exists in the"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean hasRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategory);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategories.contains(requirementCategory);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if an requirement with the same identity as {@code requirement} exists in the"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory getRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryName);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategories.getRequirementCategory(requirementCategoryName);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Adds a requirement to the requirementCategoryList."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The requirement must not already exist in the requirementCategoryList."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void addRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories.add(requirementCategory);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Replaces the given requirement {@code target} in the list with {@code editedRequirementCategory}."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code target} must exist in the requirement list."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The identity of {@code editedRequirementCategory} must not be the same as another existing requirement"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * in the"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategory(RequirementCategory target, RequirementCategory editedRequirementCategory) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(editedRequirementCategory);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories.setRequirementCategory(target, editedRequirementCategory);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Removes {@code key} from this {@code RequirementCategoryList}."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code key} must exist in the requirement list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void removeRequirementCategory(RequirementCategory key) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories.remove(key);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    //// listener methods"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules \\n\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + degreePlanners.asUnmodifiableObservableList().size() + \" degree planners \\n\""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                + requirementCategories.asUnmodifiableObservableList().size() + \" requirementCategories\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public ObservableList\u003cDegreePlanner\u003e getDegreePlannerList() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlanners.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cRequirementCategory\u003e getRequirementCategoryList() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategories.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 modules.equals(((AddressBook) other).modules)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 degreePlanners.equals(((AddressBook) other).degreePlanners)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 requirementCategories.equals(((AddressBook) other).requirementCategories));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return Objects.hash(modules.hashCode(), degreePlanners.hashCode(), requirementCategories.hashCode());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 144,
      "truegitnovice": 64,
      "chyeo": 93,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Predicate\u003cRequirementCategory\u003e PREDICATE_SHOW_ALL_REQUIREMENT_CATEGORIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Predicate\u003cDegreePlanner\u003e PREDICATE_SHOW_ALL_DEGREE_PLANNERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns the user prefs\u0027 degreePlanner list file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Path getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Sets the user prefs\u0027 degreePlanner list file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void setDegreePlannerListFilePath(Path degreePlannerListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns the user prefs\u0027 requirement list file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Sets the user prefs\u0027 degreePlanner list file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void setRequirementCategoryListFilePath(Path requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the application."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns a module object if a module with the same module code as {@code code} exists in the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Module getModuleByCode(Code code);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a {@code Module} with the specified {@code Code} exists in the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    boolean hasModuleCode(Code code);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code module} must not already exist in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * This method also cascades changes to {@code DegreePlanner} and {@code RequirementCategory}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void editModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Selected module in the filtered module list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * null if no module is selected."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    ReadOnlyProperty\u003cModule\u003e selectedModuleProperty();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the selected module in the filtered module list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * null if no module is selected."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    Module getSelectedModule();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the selected module in the filtered module list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    void setSelectedModule(Module module);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    ///// DegreePlanner Methods"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if a degreePlanner with the same identity as {@code degreePlanner} exists in the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    boolean hasDegreePlanner(DegreePlanner degreePlanner);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Return the degree planner which contains the given {@code code}, otherwise returns null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    DegreePlanner getDegreePlannerByCode(Code code);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Deletes the given degreePlanner."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The degreePlanner must exist in the degreePlaner list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void deleteDegreePlanner(DegreePlanner degreePlanner);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Adds the given degreePlanner."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code degreePlanner} must not already exist in the address book."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void addDegreePlanner(DegreePlanner degreePlanner);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Replaces the given degreePlanner {@code target} with {@code editedDegreePlanner}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code target} must exist in the degreePlanner list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The degreePlanner identity of {@code editedDegreePlanner} must not be the same as another existing"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * degreePlanner in the degreePlanner List."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void setDegreePlanner(DegreePlanner target, DegreePlanner editedDegreePlanner);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /** Returns an unmodifiable view of the filtered degreePlanner list */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    ObservableList\u003cDegreePlanner\u003e getFilteredDegreePlannerList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Updates the filter of the filtered degreePlanner list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void updateFilteredDegreePlannerList(Predicate\u003cDegreePlanner\u003e predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ///// RequirementCategory Methods"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a requirement with the name as {@code requirement} exists in the"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    boolean hasRequirementCategory(Name requirementCategoryName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a requirement with the name as {@code requirement} exists in the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    boolean hasRequirementCategory(RequirementCategory requirementCategory);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if a requirement with the code as {@code requirement} exists in the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    RequirementCategory getRequirementCategory(Name requirementCategoryName);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Adds the given requirement."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code requirement} must not already exist in the requirementCategoryList."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void addRequirementCategory(RequirementCategory requirementCategory);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Replaces the given requirement {@code target} with {@code editedRequirementCategory}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code target} must exist in the requirement list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The planner identity of {@code editedRequirementCategory} must not be the same as another existing"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement in the"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement list."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void setRequirementCategory(RequirementCategory target, RequirementCategory editedRequirementCategory);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns an unmodifiable view of the filtered requirement list"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ObservableList\u003cRequirementCategory\u003e getFilteredRequirementCategoryList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Updates the filter of the filtered requirement list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void updateFilteredRequirementCategoryList(Predicate\u003cRequirementCategory\u003e predicate);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Selected requirementCategory in the filtered requirementCategory list."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * null if no requirementCategory is selected."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ReadOnlyProperty\u003cRequirementCategory\u003e selectedRequirementCategoryProperty();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns the selected requirementCategory in the filtered requirementCategory list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * null if no requirementCategory is selected."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    RequirementCategory getSelectedRequirementCategory();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Sets the selected requirementCategory in the filtered requirementCategory list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void setSelectedRequirementCategory(RequirementCategory requirementCategory);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 33,
      "truegitnovice": 47,
      "chyeo": 83,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final FilteredList\u003cDegreePlanner\u003e filteredDegreePlanners;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final FilteredList\u003cRequirementCategory\u003e filteredRequirementCategory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final SimpleObjectProperty\u003cModule\u003e selectedModule \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final SimpleObjectProperty\u003cRequirementCategory\u003e selectedRequirementCategory \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedAddressBook.getModuleList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        filteredDegreePlanners \u003d new FilteredList\u003c\u003e((versionedAddressBook.getDegreePlannerList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        filteredRequirementCategory \u003d new FilteredList\u003c\u003e(versionedAddressBook.getRequirementCategoryList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        filteredModules.addListener(this::ensureSelectedModuleIsValid);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        filteredRequirementCategory.addListener(this::ensureSelectedRequirementCategoryIsValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this(addressBook, new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Path getDegreePlannerListFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return userPrefs.getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlannerListFilePath(Path degreePlannerListFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        userPrefs.setDegreePlannerListFilePath(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getRequirementCategoryListFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return userPrefs.getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategoryListFilePath(Path requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        userPrefs.setDegreePlannerListFilePath(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return versionedAddressBook.hasModule(module);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Module getModuleByCode(Code code) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return versionedAddressBook.getModuleByCode(code);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean hasModuleCode(Code code) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return versionedAddressBook.hasModuleCode(code);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        versionedAddressBook.removeModule(target);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        versionedAddressBook.addModule(module);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void editModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        versionedAddressBook.editModule(target, editedModule);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        versionedAddressBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ReadOnlyProperty\u003cModule\u003e selectedModuleProperty() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return selectedModule;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Module getSelectedModule() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return selectedModule.getValue();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setSelectedModule(Module module) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (module !\u003d null \u0026\u0026 !filteredModules.contains(module)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectedModule.setValue(module);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Ensures {@code selectedModule} is a valid module in {@code filteredModules}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void ensureSelectedModuleIsValid(ListChangeListener.Change\u003c? extends Module\u003e change) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (selectedModule.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                // null is always a valid selected module, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            boolean wasSelectedModuleReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedModule.getValue());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (wasSelectedModuleReplaced) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                // Update selectedModule to its new value."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedModule.getValue());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                selectedModule.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            boolean wasSelectedModuleRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .anyMatch(removedModule -\u003e selectedModule.getValue().isSameModule(removedModule));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (wasSelectedModuleRemoved) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                // Select the module that came before it in the list,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                // or clear the selection if there is no such module."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                selectedModule.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedModule.get(), other.selectedModule.get())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedRequirementCategory.get(), other.selectedRequirementCategory.get());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DegreePlannerList Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean hasDegreePlanner(DegreePlanner planner) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(planner);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return versionedAddressBook.hasDegreePlanner(planner);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override public void deleteDegreePlanner(DegreePlanner target) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        versionedAddressBook.removeDegreePlanner(target);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override public void addDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        versionedAddressBook.addDegreePlanner(degreePlanner);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner getDegreePlannerByCode(Code code) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return versionedAddressBook.getDegreePlannerByCode(code);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override public void setDegreePlanner(DegreePlanner target, DegreePlanner editedDegreePlanner) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireAllNonNull(target, editedDegreePlanner);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        versionedAddressBook.setDegreePlanner(target, editedDegreePlanner);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override public ObservableList\u003cDegreePlanner\u003e getFilteredDegreePlannerList() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return filteredDegreePlanners;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override public void updateFilteredDegreePlannerList(Predicate\u003cDegreePlanner\u003e predicate) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        filteredDegreePlanners.setPredicate(predicate);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RequirementCategoryList Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean hasRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryName);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return versionedAddressBook.hasRequirementCategory(requirementCategoryName);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean hasRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategory);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return versionedAddressBook.hasRequirementCategory(requirementCategory);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory getRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryName);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return versionedAddressBook.getRequirementCategory(requirementCategoryName);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override public void addRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        versionedAddressBook.addRequirementCategory(requirementCategory);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        updateFilteredRequirementCategoryList(PREDICATE_SHOW_ALL_REQUIREMENT_CATEGORIES);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override public void setRequirementCategory(RequirementCategory target,"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            RequirementCategory editedRequirementCategory) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireAllNonNull(target, editedRequirementCategory);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        versionedAddressBook.setRequirementCategory(target, editedRequirementCategory);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override public ObservableList\u003cRequirementCategory\u003e getFilteredRequirementCategoryList() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return filteredRequirementCategory;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override public void updateFilteredRequirementCategoryList(Predicate\u003cRequirementCategory\u003e predicate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        filteredRequirementCategory.setPredicate(predicate);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ReadOnlyProperty\u003cRequirementCategory\u003e selectedRequirementCategoryProperty() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return selectedRequirementCategory;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory getSelectedRequirementCategory() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return selectedRequirementCategory.getValue();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setSelectedRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (requirementCategory !\u003d null \u0026\u0026 !filteredRequirementCategory.contains(requirementCategory)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        selectedRequirementCategory.setValue(requirementCategory);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Ensures {@code selectedRequirementCategory} is a valid module in {@code selectedRequirementCategory}."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private void ensureSelectedRequirementCategoryIsValid("
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            ListChangeListener.Change\u003c? extends RequirementCategory\u003e change) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (selectedRequirementCategory.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                // null is always a valid selected module, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            boolean wasSelectedRequirementCategoryReplaced \u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                            \u0026\u0026 change.getRemoved().contains(selectedRequirementCategory.getValue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (wasSelectedRequirementCategoryReplaced) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                // Update selectedModule to its new value."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedRequirementCategory.getValue());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                selectedRequirementCategory.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            boolean wasSelectedRequirementCategoryRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .anyMatch(removedRequirementCategory -\u003e selectedRequirementCategory.getValue()"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                            .isSameRequirementCategory(removedRequirementCategory));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (wasSelectedRequirementCategoryRemoved) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                // Select the module that came before it in the list,"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                // or clear the selection if there is no such module."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                selectedRequirementCategory"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 63,
      "truegitnovice": 53,
      "chyeo": 116,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns an unmodifiable view of the degree planner list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * This list will not contain any duplicate degree planner."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    ObservableList\u003cDegreePlanner\u003e getDegreePlannerList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns an unmodifiable view of the requirementCategories list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * This list will not contain any duplicate requirementCategories."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    ObservableList\u003cRequirementCategory\u003e getRequirementCategoryList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "truegitnovice": 7,
      "chyeo": 6,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Path getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 1,
      "chyeo": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Path degreePlannerListFilePath \u003d Paths.get(\"data\", \"degreePlannerList.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Path requirementCategoryListFilePath \u003d Paths.get(\"data\", \"requirementCategoryList.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        setDegreePlannerListFilePath(newUserPrefs.getDegreePlannerListFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        setRequirementCategoryListFilePath(newUserPrefs.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Path getDegreePlannerListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlannerListFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlannerListFilePath(Path degreePlannerListFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreePlannerListFilePath \u003d degreePlannerListFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getRequirementCategoryListFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryListFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategoryListFilePath(Path requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategoryListFilePath \u003d requirementCategoryListFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 addressBookFilePath.toAbsolutePath().equals(o.addressBookFilePath.toAbsolutePath())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 degreePlannerListFilePath.toAbsolutePath().equals(o.degreePlannerListFilePath.toAbsolutePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, degreePlannerListFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\"Gui Settings : \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(guiSettings)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(\"Local data file location : \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .append(Paths.get(\"\").toAbsolutePath().relativize(addressBookFilePath.toAbsolutePath()))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(\u0027\\n\u0027)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(\"Local data file location for degree planner list: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(Paths.get(\"\").toAbsolutePath().relativize(degreePlannerListFilePath.toAbsolutePath()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 18,
      "Creastery": 7,
      "chyeo": 13,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Code.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Represents a Module\u0027s code in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"Codes should begin with two alphabets, followed by four digits, and may optionally end with an alphabet. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Codes should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The first character of the code must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}]{2,3}[\\\\p{Digit}]{4}[\\\\p{Alpha}]?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param code A valid code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        value \u003d code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static boolean isValidCode(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                || (other instanceof Code // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 value.equals(((Code) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 19,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/CodeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Code} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class CodeContainsKeywordsPredicate implements KeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public CodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String moduleCode \u003d module.getCode().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .anyMatch(keyword -\u003e ParserUtil.parseKeyword(keyword, moduleCode));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                || (other instanceof CodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                \u0026\u0026 keywords.equals(((CodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Credits.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Represents a Module\u0027s credits in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"Credits should only contain numbers between 0 and 999.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"0|([\\\\d\u0026\u0026[^0]]{1}[\\\\d]{0,2})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Constructs a {@code Credits}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param credits A valid amount of credits."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Credits(String credits) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        checkArgument(isValidCredits(credits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if a given string is a valid amount of credits."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static boolean isValidCredits(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                || (other instanceof Credits // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 value.equals(((Credits) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 16,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/CreditsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Credit} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class CreditsContainsKeywordsPredicate implements KeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public CreditsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String moduleCredits \u003d module.getCredits().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .anyMatch(keyword -\u003e ParserUtil.parseKeyword(keyword, moduleCredits));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                || (other instanceof CreditsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                \u0026\u0026 keywords.equals(((CreditsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/KeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * {@inheritDoc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * This interface let us have a list of predicate of different module\u0027s attributes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public interface KeywordsPredicate extends Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Represents a Module in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The format string representation of a {@link Module} object used by {@link Module#toString()}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String STRING_REPRESENTATION \u003d \"%1$s %2$s (%3$s Modular Credits)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Co-requisites: %4$s\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"Tags: %5$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Credits credits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Set\u003cCode\u003e corequisites \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Module(Name name, Credits credits, Code code, Set\u003cTag\u003e tags, Set\u003cCode\u003e corequisites) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(name, credits, code, tags, corequisites);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.corequisites.addAll(corequisites);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an immutable {@code Code} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Set\u003cCode\u003e getCorequisites() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return Collections.unmodifiableSet(corequisites);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if both modules of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return otherModule !\u003d null \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return otherModule.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 otherModule.getTags().equals(getTags())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 otherModule.getCorequisites().equals(getCorequisites());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return Objects.hash(name, credits, code, tags, corequisites);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final String allCorequisites \u003d corequisites.isEmpty()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                ? \"None\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                : corequisites.stream().map(Code::toString).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final String allTags \u003d tags.isEmpty()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                ? \"None\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                : tags.stream().map(Tag::toString).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return String.format(STRING_REPRESENTATION, code, name, credits, allCorequisites, allTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 56,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Represents a Module\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"Names should only contain alphanumeric characters, punctuations (excluding \\\"(\\\", \\\")\\\", \\\"\u0026\\\", \\\"|\\\") \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"and spaces, and it should not be blank.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \"If you are using punctuations, perhaps you may want to consider replacing \\\"()\\\" with \\\"[]\\\", \\\"\u0026\\\" with\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            + \" \\\"and\\\", and \\\"|\\\" with \\\"l\\\" (lowercase L) instead!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\p{Graph}\u0026\u0026[^\\\\(\\\\)\\\\|\\\\\u0026]][\\\\p{Print}\u0026\u0026[^\\\\(\\\\)\\\\|\\\\\u0026]]*$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class NameContainsKeywordsPredicate implements KeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String moduleName \u003d module.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .anyMatch(keyword -\u003e ParserUtil.parseKeyword(keyword, moduleName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "lycjackie": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns a module object if the list contains an equivalent module code as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Module getModuleByCode(Code toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .filter(module -\u003e module.getCode().equals(toCheck))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        cascadeAddModuleCorequisites(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Combines all co-requisites linked to current module into one {@code Set\u003cCode\u003e}, and update all linked modules to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * have all-corequisites"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param moduleToAdd"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeAddModuleCorequisites(Module moduleToAdd) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // create a union Set\u003cCode\u003e of co-requisites"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code currentCode \u003d moduleToAdd.getCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cCode\u003e currentCorequisites \u003d moduleToAdd.getCorequisites();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cCode\u003e allCorequisites \u003d new HashSet\u003c\u003e(currentCorequisites);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Code codeToAdd : currentCorequisites) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Optional\u003cModule\u003e otherModuleOptional \u003d internalUnmodifiableList.stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .filter(module -\u003e module.getCode().equals(codeToAdd))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (otherModuleOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                allCorequisites.addAll(otherModuleOptional.get().getCorequisites());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        allCorequisites.add(currentCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // update all co-requisite modules with the union set excluding itself"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Code codeToEditCorequisites : allCorequisites) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Optional\u003cModule\u003e otherModuleOptional \u003d internalUnmodifiableList.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .filter(module -\u003e module.getCode().equals(codeToEditCorequisites))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (otherModuleOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Module otherModule \u003d otherModuleOptional.get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedOtherCorequisites \u003d new HashSet\u003c\u003e(allCorequisites);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedOtherCorequisites.remove(otherModule.getCode());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Module editedOtherModule \u003d new Module("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        otherModule.getName(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        otherModule.getCredits(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        otherModule.getCode(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        otherModule.getTags(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedOtherCorequisites"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setModule(otherModule, editedOtherModule, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        setModule(target, editedModule, true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void setModule(Module target, Module editedModule, boolean cascade) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (cascade) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (!target.getCode().equals(editedModule.getCode())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                cascadeEditModuleCorequisites(target, editedModule);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            cascadeDeleteModuleCorequisites(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            cascadeAddModuleCorequisites(editedModule);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the edited module code by updating {@code UniqueModuleList} accordingly"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param target module code to edit/find"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param editedModule module code to replace with"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeEditModuleCorequisites(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cModule\u003e modules \u003d internalUnmodifiableList;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code codeToEdit \u003d target.getCode();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code editedCode \u003d editedModule.getCode();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (module.getCorequisites().contains(codeToEdit)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedCorequisiteCodes \u003d new HashSet\u003c\u003e(module.getCorequisites());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCorequisiteCodes.remove(codeToEdit);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCorequisiteCodes.add(editedCode);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Module editedCorequisiteModule \u003d new Module("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getName(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getCredits(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getCode(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getTags(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedCorequisiteCodes"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setModule(module, editedCorequisiteModule, false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        cascadeDeleteModuleCorequisites(toRemove);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Cascades the deleted module code by removing it from {@code UniqueModuleList} accordingly"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @param moduleToDelete module code to delete"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void cascadeDeleteModuleCorequisites(Module moduleToDelete) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cModule\u003e modules \u003d internalUnmodifiableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code codeToDelete \u003d moduleToDelete.getCode();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (module.getCorequisites().contains(codeToDelete)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Set\u003cCode\u003e editedCorequisiteCodes \u003d new HashSet\u003c\u003e(module.getCorequisites());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                editedCorequisiteCodes.remove(codeToDelete);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Module editedModule \u003d new Module("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getName(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getCredits(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getCode(),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        module.getTags(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        editedCorequisiteCodes"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                );"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setModule(module, editedModule, false);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 176,
      "chyeo": 11,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/DegreePlanner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Represents a DegreePlanner in the degreePlanner list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DegreePlanner {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Set\u003cCode\u003e codes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner(Year year, Semester semester, Set\u003cCode\u003e codes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireAllNonNull(year, semester, codes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.codes.addAll(codes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Set\u003cCode\u003e getCodes() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return Collections.unmodifiableSet(codes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if both degreePlanners in planner have same year and semester."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * This defines a weaker notion of equality between two degreePlaners."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean isSameDegreePlanner(DegreePlanner otherDegreePlanner) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (otherDegreePlanner \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return otherDegreePlanner !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 otherDegreePlanner.getYear().equals(getYear())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 otherDegreePlanner.getSemester().equals(getSemester());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if both degreePlanners in planner have the same identity and data fields."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * This defines a stronger notion of equality between two degreePlanners."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!(other instanceof DegreePlanner)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner otherDegreePlanner \u003d (DegreePlanner) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return otherDegreePlanner.getYear().equals(getYear())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 otherDegreePlanner.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 otherDegreePlanner.getCodes().equals(getCodes());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return Objects.hash(codes, year, semester);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        builder.append(\" Year: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(\" Semester: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(getSemester())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(\" Codes: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .append(getCodes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Represents a DegreePlanner\u0027s Semester in the degreePlanner list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_SEMESTER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"Semester should only be given in a number range from 1 to 4, S (e.g. 1) format and in valid form.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The semester should be valid and in the correct S format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String SEMESTER_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"[1-4]{1}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public final String plannerSemester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param semester A valid semester."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        plannerSemester \u003d semester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static boolean isValidSemester(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return test.matches(SEMESTER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return plannerSemester;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 plannerSemester.equals(((Semester) other).plannerSemester)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return plannerSemester.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/UniqueDegreePlannerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.exceptions.DegreePlannerNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.exceptions.DuplicateDegreePlannerException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * A list of degreePlanners that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * A code is considered unique by comparing using {@code DegreePlanner#isSameDegreePlanner(DegreePlanner)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * adding and updating of degreePlanners uses DegreePlanner#isSameDegreePlanner(DegreePlanner) for equality so as to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * ensure that the degreePlanner being added or updated is unique in terms of identity in the UniqueDegreePlannerList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * However, the removal of a module uses DegreePlanner#equals(Object) so as to ensure that the module with exactly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * @see DegreePlanner#isSameDegreePlanner(DegreePlanner)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class UniqueDegreePlannerList implements Iterable\u003cDegreePlanner\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final ObservableList\u003cDegreePlanner\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final ObservableList\u003cDegreePlanner\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if the list contains an equivalent degree planner as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean contains(DegreePlanner toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDegreePlanner);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns a DegreePlanner object of the degree planner in the internalList if degree planner contains the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * code."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner getDegreePlannerByCode(Code toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .filter(degreePlanner -\u003e degreePlanner.getCodes().contains(toCheck))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Adds a planner module to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The planner module must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void add(DegreePlanner toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DuplicateDegreePlannerException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Replaces the degreePlanner {@code target} in the list with {@code editedDegreePlanner}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The planner module identity of {@code editedDegreePlanner} must not be the same as another existing degreePlanner"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlanner(DegreePlanner target, DegreePlanner editedDegreePlanner) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireAllNonNull(target, editedDegreePlanner);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DegreePlannerNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!target.isSameDegreePlanner(editedDegreePlanner) \u0026\u0026 contains(editedDegreePlanner)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DuplicateDegreePlannerException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        internalList.set(index, editedDegreePlanner);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Removes the equivalent degreePlanner from the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The planner module must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void remove(DegreePlanner toRemove) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DegreePlannerNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlanners(UniqueDegreePlannerList replacement) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Replaces the contents of this list with {@code degreePlanners}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * {@code degreePlanners} must not contain duplicate degreePlanners."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setDegreePlanners(List\u003cDegreePlanner\u003e degreePlanners) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireAllNonNull(degreePlanners);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!degreePlannersAreUnique(degreePlanners)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DuplicateDegreePlannerException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        internalList.setAll(degreePlanners);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public ObservableList\u003cDegreePlanner\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Iterator\u003cDegreePlanner\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                || (other instanceof UniqueDegreePlannerList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDegreePlannerList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if {@code degreePlanners} contains only unique degreePlanner."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private boolean degreePlannersAreUnique(List\u003cDegreePlanner\u003e degreePlanners) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (int i \u003d 0; i \u003c degreePlanners.size() - 1; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            for (int j \u003d i + 1; j \u003c degreePlanners.size(); j++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                if (degreePlanners.get(i).isSameDegreePlanner(degreePlanners.get(j))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Represents a DegreePlanner\u0027s Year in the degreePlanner list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"Year in an university should only be given in Y (e.g. 1) format and in valid form.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * The date should be valid and in the correct Year format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"[1-4]{1}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return test.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \u0026\u0026 year.equals(((Year) other).year)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return year.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/exceptions/DegreePlannerNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Signals that the operation is unable to find the specified degreePlanner."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DegreePlannerNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/planner/exceptions/DuplicateDegreePlannerException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.model.planner.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Signals that the operation will result in duplicate DegreePlanners (DegreePlanners are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DuplicateDegreePlannerException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DuplicateDegreePlannerException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        super(\"Operation would result in duplicate degreePlanners\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/requirement/RequirementCategory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Represents a RequirementCategory in the requirement list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementCategory {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Credits credits;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Set\u003cCode\u003e codeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory(Name name, Credits credits, Set\u003cCode\u003e codeSet) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireAllNonNull(name, credits, codeSet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.codeSet.addAll(codeSet);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns an immutable setCode, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Set\u003cCode\u003e getCodeSet() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return Collections.unmodifiableSet(codeSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if both requirement in PWE have same code."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * This defines a weaker notion of equality between two requirement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean isSameRequirementCategory(RequirementCategory otherRequirementCategory) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (otherRequirementCategory \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return otherRequirementCategory !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 otherRequirementCategory.getName().equals(getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if the current codeSet contains an equivalent code in the parameter toCheck"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean hasModuleCode(Set\u003cCode\u003e codeSetToCheck) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return codeSetToCheck.stream().anyMatch(codeToCheck -\u003e codeSet.contains(codeToCheck));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if both requirement in PWE have the same identity and data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * This defines a stronger notion of equality between two requirement."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!(other instanceof RequirementCategory)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory otherRequirementCategory \u003d (RequirementCategory) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return otherRequirementCategory.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 otherRequirementCategory.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 otherRequirementCategory.getCodeSet().equals(getCodeSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return Objects.hash(name, credits, codeSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .append(\" Credits: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .append(getCredits())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .append(\" Module Codes: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .append(getCodeSet());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/requirement/UniqueRequirementCategoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.exceptions.DuplicateRequirementCategoryException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.exceptions.RequirementCategoryNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A list of requirement that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A code is considered unique by comparing using {@code RequirementCategory#isSameRequirementCategory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * (RequirementCategory)}. As such,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * adding and updating of requirement uses RequirementCategory#isSameRequirementCategory(RequirementCategory)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * for equality so as to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * ensure that the requirement being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * UniqueRequirementCategoryList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * However, the removal of a requirement uses RequirementCategory#equals(Object) so as to ensure that the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * requirement with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * exactly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * @see RequirementCategory#isSameRequirementCategory(RequirementCategory)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class UniqueRequirementCategoryList implements Iterable\u003cRequirementCategory\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final ObservableList\u003cRequirementCategory\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final ObservableList\u003cRequirementCategory\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if the list contains an equivalent Name as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean contains(Name toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.stream().map(RequirementCategory::getName).anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if the list contains an equivalent RequirementCategory as the given argument."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean contains(RequirementCategory toCheck) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRequirementCategory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns a RequirementCategory object of the requirementCategory in the internalList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory getRequirementCategory(Name toCheck) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .filter(requirementCategory -\u003e requirementCategory.getName().equals(toCheck))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Adds a requirement to the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The requirement must not already exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void add(RequirementCategory toAdd) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new DuplicateRequirementCategoryException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Replaces the requirement {@code target} in the list with {@code editedRequirementCategory}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The requirement identity of {@code editedRequirementCategory} must not be the same as another existing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * requirement"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategory(RequirementCategory target, RequirementCategory editedRequirementCategory) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireAllNonNull(target, editedRequirementCategory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new RequirementCategoryNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!target.isSameRequirementCategory(editedRequirementCategory) \u0026\u0026 contains(editedRequirementCategory)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new DuplicateRequirementCategoryException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        internalList.set(index, editedRequirementCategory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Removes the equivalent requirement from the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * The requirement module must exist in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void remove(RequirementCategory toRemove) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new RequirementCategoryNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategories(UniqueRequirementCategoryList replacement) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Replaces the contents of this list with {@code requirement}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * {@code requirement} must not contain duplicate requirement."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setRequirementCategories(List\u003cRequirementCategory\u003e requirementCategories) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireAllNonNull(requirementCategories);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!requirementCategoriesAreUnique(requirementCategories)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new DuplicateRequirementCategoryException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        internalList.setAll(requirementCategories);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cRequirementCategory\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Iterator\u003cRequirementCategory\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                || (other instanceof UniqueRequirementCategoryList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRequirementCategoryList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns true if {@code requirement} contains only unique requirement modules."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private boolean requirementCategoriesAreUnique(List\u003cRequirementCategory\u003e requirementCategories) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (int i \u003d 0; i \u003c requirementCategories.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c requirementCategories.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                if (requirementCategories.get(i).isSameRequirementCategory(requirementCategories.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/requirement/exceptions/DuplicateRequirementCategoryException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Signals that the operation will result in duplicate RequirementCategory (RequirementCategory are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class DuplicateRequirementCategoryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public DuplicateRequirementCategoryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        super(\"Operation would result in duplicate requirement\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/requirement/exceptions/RequirementCategoryNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Signals that the operation is unable to find the specified requirement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementCategoryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/InitialDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getCodeSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class InitialDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory COMPUTING_FOUNDATION \u003d new RequirementCategory("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Computing Foundation\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"36\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory INFORMATION_SECURITY_REQUIREMENTS \u003d new RequirementCategory("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Information Security Requirements\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"32\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory INFORMATION_SECURITY_ELECTIVES \u003d new RequirementCategory("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Information Security Electives\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"12\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory COMPUTING_BREADTH \u003d new RequirementCategory("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Computing Breadth\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"20\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory IT_PROFESSIONALISM \u003d new RequirementCategory("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"IT Professionalism\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"8\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory MATHEMATICS \u003d new RequirementCategory("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Mathematics\"),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"12\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory GENERAL_EDUCATION \u003d new RequirementCategory("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"General Education\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"20\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory UNRESTRICTED_ELECTIVES \u003d new RequirementCategory("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Unrestricted Electives\"),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"12\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static RequirementCategory[] getInitialRequirementCategories() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new RequirementCategory[] {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            COMPUTING_FOUNDATION,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            INFORMATION_SECURITY_REQUIREMENTS,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            INFORMATION_SECURITY_ELECTIVES,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            COMPUTING_BREADTH,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            IT_PROFESSIONALISM,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            MATHEMATICS,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            GENERAL_EDUCATION,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            UNRESTRICTED_ELECTIVES"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        };"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static DegreePlanner[] getInitialDegreePlanners() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new DegreePlanner[] {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_1,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_2,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_3,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_4,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_1,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_2,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_3,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_4,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_1,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_2,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_3,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_4,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_1,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_2,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_3,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_4"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        };"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static ReadOnlyAddressBook getInitialAddressBook() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddressBook initialAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (RequirementCategory initialRequirementCategory : getInitialRequirementCategories()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            initialAb.addRequirementCategory(initialRequirementCategory);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (DegreePlanner initialDegreePlanner : getInitialDegreePlanners()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            initialAb.addDegreePlanner(initialDegreePlanner);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return initialAb;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Module CS1010 \u003d new Module("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Programming Methodology\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"4\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Code(\"CS1010\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getTagSet(\"programming\", \"algorithms\", \"c\", \"imperative\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Module CS1231 \u003d new Module("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Discrete Structures\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"4\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Code(\"CS1231\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getTagSet(\"math\", \"logic\", \"proving\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Module CS2040C \u003d new Module("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Data Structures and Algorithms\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"4\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Code(\"CS2040C\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getTagSet(\"linkedlist\", \"stack\", \"queue\", \"hashtable\", \"heap\", \"avltree\", \"graph\", \"sssp\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Module CS2100 \u003d new Module("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Computer Organisation\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"4\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Code(\"CS2100\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getTagSet(\"boolean\", \"mips\", \"assembly\", \"circuit\", \"flipflop\", \"pipelining\", \"cache\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Module CS2102 \u003d new Module("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Database Systems\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Credits(\"4\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Code(\"CS2102\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getTagSet(\"database\", \"rdbms\", \"entity\", \"sql\", \"normalisation\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet(\"CS1010\", \"CS1231\", \"CS2040C\", \"CS2100\", \"CS2102\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"1\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"2\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"3\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_1 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"1\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_2 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new Semester(\"2\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    );"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_3 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"3\"),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final DegreePlanner YEAR_4_SEMESTER_4 \u003d new DegreePlanner("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Year(\"4\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Semester(\"4\"),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getCodeSet()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory COMPUTING_FOUNDATION \u003d new RequirementCategory("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new Name(\"Computing Foundation\"), new Credits(\"36\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            getCodeSet(\"CS1010\", \"CS1231\", \"CS2040C\", \"CS2100\", \"CS2102\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory INFORMATION_SECURITY_REQUIREMENTS \u003d new RequirementCategory("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new Name(\"Information Security Requirements\"), new Credits(\"20\"), getCodeSet()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory INFORMATION_SECURITY_ELECTIVES \u003d new RequirementCategory("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Information Security Electives\"), new Credits(\"12\"), getCodeSet()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory COMPUTING_BREADTH \u003d new RequirementCategory("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Computing Breadth\"), new Credits(\"20\"), getCodeSet()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory IT_PROFESSIONALISM \u003d new RequirementCategory("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"IT Professionalism\"), new Credits(\"8\"), getCodeSet()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory MATHEMATICS \u003d new RequirementCategory("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Mathematics\"), new Credits(\"12\"), getCodeSet()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory GENERAL_EDUCATION \u003d new RequirementCategory("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"General Education\"), new Credits(\"20\"), getCodeSet()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final RequirementCategory UNRESTRICTED_ELECTIVES \u003d new RequirementCategory("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            new Name(\"Unrestricted Electives\"), new Credits(\"12\"), getCodeSet()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            CS1010, CS1231, CS2040C, CS2100, CS2102"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static DegreePlanner[] getSampleDegreePlanners() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new DegreePlanner[] {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_1_SEMESTER_1,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_1_SEMESTER_2,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_3,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_1_SEMESTER_4,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_2_SEMESTER_1,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_2_SEMESTER_2,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_3,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_2_SEMESTER_4,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_3_SEMESTER_1,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_3_SEMESTER_2,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_3,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_3_SEMESTER_4,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            YEAR_4_SEMESTER_1,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_2,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_3,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            YEAR_4_SEMESTER_4"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        };"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static RequirementCategory[] getSampleRequirementCategories() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new RequirementCategory[] {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            COMPUTING_FOUNDATION,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            INFORMATION_SECURITY_REQUIREMENTS,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            INFORMATION_SECURITY_ELECTIVES,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            COMPUTING_BREADTH,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            IT_PROFESSIONALISM,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            MATHEMATICS,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            GENERAL_EDUCATION,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            UNRESTRICTED_ELECTIVES"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (RequirementCategory sampleRequirementCategory : getSampleRequirementCategories()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            sampleAb.addRequirementCategory(sampleRequirementCategory);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (DegreePlanner sampleDegreePlanner : getSampleDegreePlanners()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            sampleAb.addDegreePlanner(sampleDegreePlanner);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns a code set containing the list of strings given."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static Set\u003cCode\u003e getCodeSet(String... strings) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .map(Code::new)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 143,
      "truegitnovice": 65,
      "chyeo": 18,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Path getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see #getModuleListFilePath()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @see #getDegreePlannerListFilePath()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see #getModuleListFilePath()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @see #getDegreePlannerListFilePath()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path moduleListFilePath, Path degreePlannerListFilePath,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path requirementCategoryListFilePath)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveModuleList(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveModuleList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns degree planner list data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @see #getDegreePlannerListFilePath()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList(Path filePath)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param degreePlannerList cannot be null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList) throws IOException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @see #saveDegreePlannerList(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void saveDegreePlannerList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns RequirementList data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see #getRequirementCategoryListFilePath() ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList(Path filePath)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @param requirementCategoryList cannot be null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList) throws IOException;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @see #saveRequirementCategoryList(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveRequirementCategoryList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 35,
      "chyeo": 45,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Jackson-friendly version of {@link Code}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class JsonAdaptedCode {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final String codeValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Constructs a {@code JsonAdaptedCode} with the given {@code codeValue}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonAdaptedCode(String codeValue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.codeValue \u003d codeValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonAdaptedCode(Code source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        codeValue \u003d source.value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public String getCodeValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return codeValue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Code toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!Code.isValidCode(codeValue)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new IllegalValueException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new Code(codeValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDegreePlannerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Jackson-friendly version of {@link DegreePlanner}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class JsonAdaptedDegreePlannerList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"degreePlanner\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final List\u003cJsonAdaptedCode\u003e codes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonAdaptedDegreePlannerList(@JsonProperty(\"year\") String year,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            @JsonProperty(\"semester\") String semester, @JsonProperty(\"codes\") List\u003cJsonAdaptedCode\u003e codes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (codes !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            this.codes.addAll(codes);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts a given {@code DegreePlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonAdaptedDegreePlannerList(DegreePlanner source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        year \u003d source.getYear().year;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        semester \u003d source.getSemester().plannerSemester;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        codes.addAll(source.getCodes().stream().map(JsonAdaptedCode::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts this Jackson-friendly adapted degreePlanner object into the model\u0027s {@code DegreePlanner} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted degreePlanner."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        final List\u003cCode\u003e plannerCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (JsonAdaptedCode code : codes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            plannerCodes.add(code.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!Year.isValidYear(year)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new IllegalValueException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        final Year modelYear \u003d new Year(year);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (semester \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Semester.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!Semester.isValidSemester(semester)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new IllegalValueException(Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        final Semester modelSemester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        final Set\u003cCode\u003e modelCodes \u003d new HashSet\u003c\u003e(plannerCodes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new DegreePlanner(modelYear, modelSemester, modelCodes);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final List\u003cJsonAdaptedCode\u003e corequisites \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"name\") String name, @JsonProperty(\"credits\") String credits,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            @JsonProperty(\"code\") String code, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            @JsonProperty(\"corequisites\") List\u003cJsonAdaptedCode\u003e corequisites) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (corequisites !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.corequisites.addAll(corequisites);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        credits \u003d source.getCredits().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        code \u003d source.getCode().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        corequisites.addAll(source.getCorequisites().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .map(JsonAdaptedCode::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final List\u003cCode\u003e moduleCorequisites \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (JsonAdaptedCode corequisite : corequisites) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            moduleCorequisites.add(corequisite.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!Code.isValidCode(code)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new IllegalValueException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Code modelCode \u003d new Code(code);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Set\u003cCode\u003e modelCorequisites \u003d new HashSet\u003c\u003e(moduleCorequisites);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Module(modelName, modelCredits, modelCode, modelTags, modelCorequisites);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 49,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRequirementCategoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Jackson-friendly version of {@link RequirementCategory}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class JsonAdaptedRequirementCategoryList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"requirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final List\u003cJsonAdaptedCode\u003e codeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequirementCategoryList} with the given requirement details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonAdaptedRequirementCategoryList(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            @JsonProperty(\"credits\") String credits,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            @JsonProperty(\"codeList\") List\u003cJsonAdaptedCode\u003e codeList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (codeList !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            this.codeList.addAll(codeList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts a given {@code RequirementCategory} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonAdaptedRequirementCategoryList(RequirementCategory source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        credits \u003d source.getCredits().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.addAll(source.getCodeSet().stream().map(JsonAdaptedCode::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts this Jackson-friendly adapted requirement object into the model\u0027s {@code RequirementCategory} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted requirement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final List\u003cCode\u003e codes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (JsonAdaptedCode code : codeList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            codes.add(code.toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        final Set\u003cCode\u003e modelCodes \u003d new HashSet\u003c\u003e(codes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new RequirementCategory(modelName, modelCredits, modelCodes);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A class to call JsonSerializableAddressBook methods"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Path moduleListFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Path degreePlannerListFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Path requirementCategoryListFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonAddressBookStorage(Path moduleListFilePath, Path degreePlannerListFilePath,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.moduleListFilePath \u003d moduleListFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreePlannerListFilePath \u003d degreePlannerListFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategoryListFilePath \u003d requirementCategoryListFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return moduleListFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Path getDegreePlannerListFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlannerListFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getRequirementCategoryListFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryListFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveModuleList(addressBook, getModuleListFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveDegreePlannerList(addressBook, getDegreePlannerListFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveRequirementCategoryList(addressBook, getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return readAddressBook(moduleListFilePath, degreePlannerListFilePath, requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param moduleListFilePath cannot be null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param degreePlannerListFilePath cannot be null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param requirementCategoryListFilePath cannot be null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path moduleListFilePath, Path degreePlannerListFilePath,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path requirementCategoryListFilePath)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(moduleListFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Optional\u003cObservableList\u003cModule\u003e\u003e optionalModuleObservableList \u003d readModuleList(moduleListFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e optionalDegreePlannerObservableList \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                readDegreePlannerList(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e optionalRequirementCategoryObservableList \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                readRequirementCategoryList(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!optionalModuleObservableList.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        } else if (!optionalDegreePlannerObservableList.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        } else if (!optionalRequirementCategoryObservableList.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            JsonSerializableAddressBook addressBook \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    new JsonSerializableAddressBook(optionalModuleObservableList.get(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            optionalDegreePlannerObservableList.get(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                            optionalRequirementCategoryObservableList.get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            ReadOnlyAddressBook jsonAddressBook \u003d addressBook.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return Optional.of(jsonAddressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            logger.info(\"Illegal values found in \" + moduleListFilePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            logger.info(\"Illegal values found in \" + degreePlannerListFilePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            logger.info(\"Illegal values found in \" + requirementCategoryListFilePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return readModuleList(moduleListFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                filePath, JsonSerializableAddressBook.getJsonSerializableModuleListClass());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveModuleList(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveModuleList(addressBook, moduleListFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveModuleList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleList(addressBook), filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList() throws DataConversionException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return readDegreePlannerList(degreePlannerListFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList(Path filePath)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Optional\u003cJsonSerializableDegreePlannerList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                filePath, JsonSerializableAddressBook.getJsonSerializableDegreePlannerListClass());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveDegreePlannerList(degreePlannerList, degreePlannerListFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList, Path filePath)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(degreePlannerList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDegreePlannerList(degreePlannerList), filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList() throws DataConversionException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return readRequirementCategoryList(requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList(Path filePath)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Optional\u003cJsonSerializableRequirementCategoryList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                filePath, JsonSerializableAddressBook.getJsonSerializableRequirementCategoryListClass());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveRequirementCategoryList(requirementCategoryList, requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList, Path filePath)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(requirementCategoryList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRequirementCategoryList(requirementCategoryList), filePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 65,
      "chyeo": 97,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A class to access the JsonSerializable files data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_INVALID_COREQUISITE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) cannot be a co-requisite of itself!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_REQUIREMENT_CATEGORY_CODE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) in requirement category (%2$s) does not exists in the module list!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_DEGREE_PLANNER_CODE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) in degree planner (Year %2$s Semester %3$s) does not exists in the module list!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private ObservableList\u003cModule\u003e moduleObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private ObservableList\u003cDegreePlanner\u003e degreeObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private ObservableList\u003cRequirementCategory\u003e requirementCategoryObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonSerializableAddressBook(ObservableList\u003cModule\u003e moduleObservableList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            ObservableList\u003cDegreePlanner\u003e degreeObservableList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            ObservableList\u003cRequirementCategory\u003e requirementCategoryObservableList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.moduleObservableList \u003d moduleObservableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreeObservableList \u003d degreeObservableList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategoryObservableList \u003d requirementCategoryObservableList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleObservableList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return moduleObservableList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public ObservableList\u003cDegreePlanner\u003e getDegreePlannerObservableList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreeObservableList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cRequirementCategory\u003e getRequirementCategoryObservableList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryObservableList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Class\u003cJsonSerializableModuleList\u003e getJsonSerializableModuleListClass() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return JsonSerializableModuleList.class;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Class\u003cJsonSerializableRequirementCategoryList\u003e getJsonSerializableRequirementCategoryListClass() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return JsonSerializableRequirementCategoryList.class;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static Class\u003cJsonSerializableDegreePlannerList\u003e getJsonSerializableDegreePlannerListClass() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return JsonSerializableDegreePlannerList.class;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        addressBook.setModules(getModuleObservableList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        addressBook.setDegreePlanners(getDegreePlannerObservableList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        addressBook.setRequirementCategories(getRequirementCategoryObservableList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (RequirementCategory requirementCategory : addressBook.getRequirementCategoryList()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (Code code : requirementCategory.getCodeSet()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (!addressBook.hasModuleCode(code)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_NON_EXISTENT_REQUIREMENT_CATEGORY_CODE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            code,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            requirementCategory.getName()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (DegreePlanner degreePlanner : addressBook.getDegreePlannerList()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (Code code : degreePlanner.getCodes()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (!addressBook.hasModuleCode(code)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_NON_EXISTENT_DEGREE_PLANNER_CODE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            code,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            degreePlanner.getYear(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            degreePlanner.getSemester()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 32,
      "truegitnovice": 11,
      "chyeo": 23,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableDegreePlannerList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.planner.UniqueDegreePlannerList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * An Immutable DegreePlannerList that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "@JsonRootName(value \u003d \"degreePlannerList\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class JsonSerializableDegreePlannerList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DEGREE_PLANNER \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \"DegreePlanner list contains duplicate degreePlanner(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DEGREE_PLANNER_CODE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) is added to more than one year/semester!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final List\u003cJsonAdaptedDegreePlannerList\u003e degreePlanners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Constructs a {@code JsonSerializableDegreePlannerList} with the given degree planners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonSerializableDegreePlannerList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            @JsonProperty(\"degreePlanners\") List\u003cJsonAdaptedDegreePlannerList\u003e degreePlanners) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreePlanners.addAll(degreePlanners);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts a given {@code ReadOnlyDegreePlannerList} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDegreePlannerList}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public JsonSerializableDegreePlannerList(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.addAll(source.getDegreePlannerList().stream().map(JsonAdaptedDegreePlannerList::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Converts this degreePlanner list into the model\u0027s {@code DegreePlannerList} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public ObservableList\u003cDegreePlanner\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueDegreePlannerList uniqueDegreePlannerList \u003d new UniqueDegreePlannerList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (JsonAdaptedDegreePlannerList jsonAdaptedDegreePlannerList : degreePlanners) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            DegreePlanner degreePlanner \u003d jsonAdaptedDegreePlannerList.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (uniqueDegreePlannerList.contains(degreePlanner)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DEGREE_PLANNER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            uniqueDegreePlannerList.add(degreePlanner);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cDegreePlanner\u003e degreePlannerList \u003d uniqueDegreePlannerList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (DegreePlanner degreePlanner : degreePlannerList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (Code code : degreePlanner.getCodes()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                long codeApperanceInDegreePlanners \u003d degreePlannerList.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .map(DegreePlanner::getCodes)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .filter(codes -\u003e codes.contains(code))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .count();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (codeApperanceInDegreePlanners \u003e 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_DUPLICATE_DEGREE_PLANNER_CODE, code));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return degreePlannerList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 59,
      "Creastery": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_INVALID_COREQUISITE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) cannot be a co-requisite of itself!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_COREQUISITE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The corequisite module code (%1$s) does not exists in the module list\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_ONE_WAY_COREQUISITE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) is a corequisite of module code (%2$s), but not the other way round!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleList} with the given modules."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModuleList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonSerializableModuleList(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cModule\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (uniqueModuleList.contains(module)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            uniqueModuleList.add(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cModule\u003e moduleList \u003d uniqueModuleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (Code corequisite : module.getCorequisites()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (module.getCode().equals(corequisite)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_INVALID_COREQUISITE, corequisite));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Optional\u003cModule\u003e corequisiteModuleOptional \u003d moduleList.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .filter(currentModule -\u003e currentModule.getCode().equals(corequisite))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .findFirst();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (!corequisiteModuleOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_NON_EXISTENT_COREQUISITE, corequisite));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (!corequisiteModuleOptional.get().getCorequisites().contains(module.getCode())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_ONE_WAY_COREQUISITE, module.getCode(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            corequisite));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 35,
      "chyeo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableRequirementCategoryList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.requirement.UniqueRequirementCategoryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * An Immutable requirementCategoryList that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "@JsonRootName(value \u003d \"requirementCategoryList\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class JsonSerializableRequirementCategoryList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REQUIREMENT_CATEGORY \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \"Requirement category list contains duplicate requirement categories.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REQUIREMENT_CATEGORY_CODE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \"The module code (%1$s) is added to more than one requirement category!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final List\u003cJsonAdaptedRequirementCategoryList\u003e requirementCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Constructs a {@code JsonSerializableRequirementCategoryList} with the given requirementCategories."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonSerializableRequirementCategoryList("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            @JsonProperty(\"requirementCategories\") List\u003cJsonAdaptedRequirementCategoryList\u003e requirementCategories) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategories.addAll(requirementCategories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts a given {@code JsonSerializableRequirementCategoryList} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRequirementCategoryList}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public JsonSerializableRequirementCategoryList(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .addAll(source.getRequirementCategoryList().stream().map(JsonAdaptedRequirementCategoryList::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Converts this requirementCategory list into the model\u0027s {@code JsonAdaptedRequirementCategoryList} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ObservableList\u003cRequirementCategory\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueRequirementCategoryList uniqueRequirementCategoryList \u003d new UniqueRequirementCategoryList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (JsonAdaptedRequirementCategoryList jsonAdaptedRequirementCategoryList : requirementCategories) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            RequirementCategory requirementCategory \u003d jsonAdaptedRequirementCategoryList.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (uniqueRequirementCategoryList.contains(requirementCategory)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REQUIREMENT_CATEGORY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            uniqueRequirementCategoryList.add(requirementCategory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d uniqueRequirementCategoryList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (RequirementCategory requirementCategory : requirementCategories) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            for (Code code : requirementCategory.getCodeSet()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                long codeApperanceInRequirementCategories \u003d requirementCategories.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .map(RequirementCategory::getCodeSet)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .filter(codes -\u003e codes.contains(code))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                        .count();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                if (codeApperanceInRequirementCategories \u003e 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    throw new IllegalValueException(String.format(MESSAGE_DUPLICATE_REQUIREMENT_CATEGORY_CODE, code));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return requirementCategories;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 25,
      "chyeo": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveModuleList(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Path getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Path getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList) throws IOException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 10,
      "chyeo": 17,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return readAddressBook(addressBookStorage.getModuleListFilePath(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                addressBookStorage.getDegreePlannerListFilePath(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                addressBookStorage.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path moduleListFilePath, Path degreePlannerListFilePath,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path requirementCategoryListFilePath)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + moduleListFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + degreePlannerListFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return addressBookStorage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .readAddressBook(moduleListFilePath, degreePlannerListFilePath, requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveModuleList(addressBook, addressBookStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveDegreePlannerList(addressBook, addressBookStorage.getDegreePlannerListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveRequirementCategoryList(addressBook, addressBookStorage.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return addressBookStorage.getModuleListFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return readModuleList(addressBookStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cModule\u003e\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return addressBookStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveModuleList(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveModuleList(addressBook, addressBookStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveModuleList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        addressBookStorage.saveModuleList(addressBook, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DegreePlannerList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Path getDegreePlannerListFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return addressBookStorage.getDegreePlannerListFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return readDegreePlannerList(addressBookStorage.getDegreePlannerListFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public Optional\u003cObservableList\u003cDegreePlanner\u003e\u003e readDegreePlannerList(Path filePath)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return addressBookStorage.readDegreePlannerList(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveDegreePlannerList(degreePlannerList, addressBookStorage.getDegreePlannerListFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void saveDegreePlannerList(ReadOnlyAddressBook degreePlannerList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        addressBookStorage.saveDegreePlannerList(degreePlannerList, filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RequirementCategoryList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Path getRequirementCategoryListFilePath() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return addressBookStorage.getRequirementCategoryListFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return readRequirementCategoryList(addressBookStorage.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public Optional\u003cObservableList\u003cRequirementCategory\u003e\u003e readRequirementCategoryList(Path filePath)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return addressBookStorage.readRequirementCategoryList(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        saveRequirementCategoryList(requirementCategoryList,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                addressBookStorage.getRequirementCategoryListFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void saveRequirementCategoryList(ReadOnlyAddressBook requirementCategoryList, Path filePath)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        addressBookStorage.saveRequirementCategoryList(requirementCategoryList, filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 36,
      "chyeo": 66,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cModule\u003e selectedModule) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // Load module page when selected module changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectedModule.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            loadModulePage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void loadModulePage(Module module) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + module.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DegreePlannerCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * An UI component that displays information of a {@code DegreePlanner}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DegreePlannerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final String FXML \u003d \"DegreePlannerListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final Integer MINIMUM_LOAD \u003d 18;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final Integer OVER_LOAD \u003d 24;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public final DegreePlanner degreePlanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private StackPane degreePlannerCardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private VBox degreePlannerListView;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public DegreePlannerCard(DegreePlanner degreePlanner, ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.degreePlanner \u003d degreePlanner;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        year.setText(\"Year: \" + degreePlanner.getYear().year);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        year.setPadding(new Insets(0, 0, 0, 5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        semester.setText(\" Semester: \" + degreePlanner.getSemester().plannerSemester);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cModule\u003e modulesInDegreePlanner \u003d degreePlanner.getCodes().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .map(code -\u003e moduleList.stream().filter(module -\u003e module.getCode().equals(code))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        .findFirst().get()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        int currentCredits \u003d modulesInDegreePlanner.stream().map(Module::getCredits).map(Credits::toString)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .map(Integer::parseInt).reduce(0, (totalCredits, credit) -\u003e totalCredits + credit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        credits.setText(\"Total Credits: \" + currentCredits + \" MCs\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        credits.setPadding(new Insets(0, 0, 0, 5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        credits.getStyleClass().clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        if (currentCredits \u003c MINIMUM_LOAD) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            credits.getStyleClass().add(\"orange\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else if (currentCredits \u003c OVER_LOAD) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            credits.getStyleClass().add(\"green\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            credits.getStyleClass().add(\"red\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        modulesInDegreePlanner.stream().sorted(Comparator.comparing(module -\u003e module.getCode().toString()))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                .forEach(module -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    VBox vbox \u003d new VBox();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    VBox.setMargin(vbox, new Insets(1, 1, 1, 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    vbox.getChildren().add(new Label("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                            module.getCode().value + \" \" + module.getName().toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    vbox.getStyleClass().add(\"myModule\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                    degreePlannerListView.getChildren().add(vbox);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlannerCardPane.setOnMouseClicked(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        if (!(other instanceof DegreePlannerCard)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlannerCard card \u003d (DegreePlannerCard) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return year.getText().equals(card.year.getText());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 61,
      "lycjackie": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DegreePlannerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Panel containing the list of degreePlanners."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DegreePlannerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final String FXML \u003d \"DegreePlannerListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private ObservableList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private ListView\u003cDegreePlanner\u003e degreePlanners;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public DegreePlannerListPanel(ObservableList\u003cDegreePlanner\u003e degreePlannerList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        modules \u003d moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.setItems(degreePlannerList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlanners.setCellFactory(listView -\u003e new DegreePlannerViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DegreePlanner}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * using a {@code DegreePlannerListCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    class DegreePlannerViewCell extends ListCell\u003cDegreePlanner\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        protected void updateItem(DegreePlanner degreePlanner, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            super.updateItem(degreePlanner, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            if (empty || degreePlanner \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                setGraphic(new DegreePlannerCard(degreePlanner, modules).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 41,
      "lycjackie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private DegreePlannerListPanel degreePlannerListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private RequirementCategoryListPanel requirementCategoryListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private StackPane degreePlannerListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private StackPane requirementCategoryListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedModuleProperty());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList(), logic.selectedModuleProperty(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                logic::setSelectedModule);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        degreePlannerListPanel \u003d new DegreePlannerListPanel(logic.getFilteredDegreePlannerList(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                logic.getAddressBook().getModuleList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        degreePlannerListPanelPlaceholder.getChildren().add(degreePlannerListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategoryListPanel \u003d new RequirementCategoryListPanel(logic.getFilteredRequirementCategoryList(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                logic.getAddressBook().getModuleList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategoryListPanelPlaceholder.getChildren().add(requirementCategoryListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerListPanel getDegreePlannerListPanel() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlannerListPanel;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryListPanel getRequirementCategoryListPanel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryListPanel;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 10,
      "Creastery": 8,
      "chyeo": 10,
      "lycjackie": 2,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Label corequisites;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        name.setText(module.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        credits.setText(\"Modular Credits: \" + module.getCredits().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        code.setText(module.getCode().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String corequisitesText \u003d module.getCorequisites().stream().map(Code::toString)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (corequisitesText.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            corequisitesText \u003d \"None\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        corequisites.setText(\"Co-requisites: \" + corequisitesText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        module.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 27,
      "chyeo": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList, ObservableValue\u003cModule\u003e selectedModule,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Consumer\u003cModule\u003e onSelectedModuleChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            logger.fine(\"Selection in module list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            onSelectedModuleChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectedModule.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            logger.fine(\"Selected module changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected module,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (Objects.equals(moduleListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                moduleListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                int index \u003d moduleListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                moduleListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                moduleListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 27,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequirementCategoryCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * An UI component that displays information of a {@code RequirementCategory}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementCategoryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static final String FXML \u003d \"RequirementCategoryListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public final RequirementCategory requirementCategory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private HBox requirementCategoryCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Label requirementCategoryName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Label requirementCategoryCredit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private FlowPane codes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryCard(RequirementCategory requirementCategory, ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.requirementCategory \u003d requirementCategory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategoryName.setText(requirementCategory.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Stream\u003cModule\u003e modulesInRequirementCategory \u003d requirementCategory.getCodeSet().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .map(code -\u003e moduleList.stream().filter(module -\u003e module.getCode().equals(code)).findFirst().get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        int currentCredits \u003d modulesInRequirementCategory.map(Module::getCredits).map(Credits::toString)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .map(Integer::parseInt).reduce(0, (totalCredits, credit) -\u003e totalCredits + credit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        String creditsRequired \u003d requirementCategory.getCredits().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategoryCredit.setText(\"Modular Credits Fulfilled: \" + currentCredits + \"/\" + creditsRequired);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (currentCredits \u003d\u003d Integer.parseInt(creditsRequired)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementCategoryCredit.getStyleClass().clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            requirementCategoryCredit.getStyleClass().add(\"green\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (currentCredits \u003e Integer.parseInt(creditsRequired)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementCategoryCredit.getStyleClass().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            requirementCategoryCredit.getStyleClass().add(\"red\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (requirementCategory.getCodeSet().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            Text noCodes \u003d new Text(\"No modules in this category!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            noCodes.getStyleClass().clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            noCodes.getStyleClass().add(\"noModules\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            codes.getChildren().add(noCodes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementCategory.getCodeSet().stream().sorted(Comparator.comparing(code -\u003e code.value))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .forEach(code -\u003e codes.getChildren().add(new Label(code.value)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategoryCardPane.setOnMouseClicked(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (!(other instanceof RequirementCategoryCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategoryCard card \u003d (RequirementCategoryCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryName.getText().equals(card.requirementCategoryName.getText());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chyeo": 93,
      "lycjackie": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequirementCategoryListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * Panel containing the list of requirement categories to be displayed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * This class takes in an ObservableModule list for the sole purpose of having the ObservableModule list as a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * reference object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * As the ObservableRequirementCategory list only contains the module code, the ObservableModule list is necessary"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * to be able to compute the total amount of credits."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementCategoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static final String FXML \u003d \"RequirementCategoryListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private ObservableList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private ListView\u003cRequirementCategory\u003e requirementCategories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryListPanel(ObservableList\u003cRequirementCategory\u003e requirementCategoryList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        modules \u003d moduleList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories.setItems(requirementCategoryList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        requirementCategories.setCellFactory(listView -\u003e new RequirementCategoryViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code RequirementCategory}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * using a {@code RequirementCategoryListCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    class RequirementCategoryViewCell extends ListCell\u003cRequirementCategory\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        protected void updateItem(RequirementCategory requirementCategory, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            super.updateItem(requirementCategory, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (empty || requirementCategory \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                setGraphic(new RequirementCategoryCard(requirementCategory, modules).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\"\").toAbsolutePath().relativize("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                saveLocation.toAbsolutePath()).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/plan_with_ease_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\" prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\" visible\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerPane .list-cell .label {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerPane .list-cell:filled:even {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-outer-border: 2px;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerPane .list-cell:filled:odd {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-background-color: #404344;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerCard .list-cell:filled {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerCard .list-cell:filled:even {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-background-color: #424d51;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ".plannerCard .list-cell:filled:odd {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    -fx-background-color: #586063;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-width: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Creastery"
        },
        "content": "#filterField, #moduleListPanel, #personWebpage {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chyeo"
        },
        "content": "#tags, #codes {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chyeo"
        },
        "content": "#codes .label {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-background-color: #34911c;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chyeo"
        },
        "content": ".fulfilled {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-text-fill: green;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chyeo"
        },
        "content": ".overAllocate {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-text-fill: red;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chyeo"
        },
        "content": ".noModules {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 26,
      "Creastery": 1,
      "chyeo": 23,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/DegreePlannerListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003cStackPane fx:id\u003d\"degreePlannerCardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \u003cVBox prefHeight\u003d\"150\" prefWidth\u003d\"150\" xmlns\u003d\"http://javafx.com/javafx/9\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                \u003cLabel fx:id\u003d\"year\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                \u003cLabel fx:id\u003d\"semester\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u003cVBox fx:id\u003d\"degreePlannerListView\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 12,
      "chyeo": 1,
      "lycjackie": 9
    }
  },
  {
    "path": "src/main/resources/view/DegreePlannerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "\u003cVBox fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/9\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \u003cListView fx:id\u003d\"degreePlanners\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 7,
      "lycjackie": 1
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background: #fffdfb;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "         title\u003d\"PlanWithEase\" minWidth\u003d\"930\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    \u003cImage url\u003d\"@/images/plan_with_ease_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        \u003cURL value\u003d\"@WhiteTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "      \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "          \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"300\" prefWidth\u003d\"310\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "          \u003cVBox fx:id\u003d\"requirementCategories\" minWidth\u003d\"300\" prefWidth\u003d\"310\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cStackPane fx:id\u003d\"requirementCategoryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "          \u003cVBox fx:id\u003d\"degreePlan\" minWidth\u003d\"300\" prefWidth\u003d\"310\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "              \u003cStackPane id\u003d\"plannerStackPane\" fx:id\u003d\"degreePlannerListPanelPlaceholder\"  VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "truegitnovice": 2,
      "chyeo": 8,
      "lycjackie": 3,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$code\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "      \u003cLabel fx:id\u003d\"corequisites\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$corequisites\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/RequirementCategoryListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003cHBox id\u003d\"requirementCategoryCardPane\" fx:id\u003d\"requirementCategoryCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"5\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u003cLabel fx:id\u003d\"requirementCategoryName\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cLabel fx:id\u003d\"requirementCategoryCredit\" styleClass\u003d\"cell_small_label\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                   text\u003d\"\\$requirementCategoryCredit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            \u003cFlowPane id\u003d\"codes\" fx:id\u003d\"codes\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chyeo": 35
    }
  },
  {
    "path": "src/main/resources/view/RequirementCategoryListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        \u003cListView fx:id\u003d\"requirementCategories\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "chyeo": 8
    }
  },
  {
    "path": "src/main/resources/view/WhiteTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * The MIT License (MIT)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Copyright (c) 2015 - AGIX | Innovative Engineering"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Permission is hereby granted, free of charge, to any person obtaining a copy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * in the Software without restriction, including without limitation the rights"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * copies of the Software, and to permit persons to whom the Software is"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * furnished to do so, subject to the following conditions:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * The above copyright notice and this permission notice shall be included in all"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * copies or substantial portions of the Software."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT \tSHALL THE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * SOFTWARE."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *   This is a Material Design CSS for JavaFX"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Root\t\t\t\t\t \t\t\t\t                       \t\t\t\t   *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /* Swatch Colors - Blue*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-100: #BBDEFB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-200: #90CAF9;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-300: #64BEF6;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-400: #42A5F5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-500: #2196F3;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /*default text */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-base-color: rgb(100.0, 100.0, 100.0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-button-normal: -swatch-500;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-button-colored: rgb(255.0, 255.0, 255.0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-button-text: rgb(100.0, 100.0, 100.0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-title-color: rgb(45.0, 45.0, 45.0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-subtitle-color: rgb(65.0, 65.0, 65.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-control-title-color: rgb(130.0, 130.0, 130.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -dark: rgb(47.0, 52.0, 57.0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: rgb(230.0, 230.0, 230.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /*default font */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \u0027Roboto Medium\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 14.0px;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-disabled-opacity: 0.6;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /*default colors */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-grey: rgb(200.0, 200.0, 200.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-dark-grey: rgb(150.0, 150.0, 150.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-light-grey: rgb(230.0, 230.0, 230.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -swatch-toolbar: rgb(245.0, 245.0, 245.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     Modena colors"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-dark-text-color: white; /* Text color when selected*/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-mid-text-color: -fx-text-base-color;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-light-text-color: -swatch-light-grey;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-body-color: white;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /* A bright blue for the focus indicator of objects. Typically used as the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * first color in -fx-background-color for the \"focused\" pseudo-class. Also"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * typically used with insets of -1.4 to provide a glowing effect."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-focus-color: -swatch-400;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-faint-focus-color: -swatch-200;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /* A bright blue for highlighting/accenting objects.  For example: selected"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * text; selected items in menus, lists, trees, and tables; progress bars */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-accent: -swatch-light-grey;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Material Design - Cards \t\t\t\t                       \t\t\t\t   *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: rgb(255.0, 255.0, 255.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 4.0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgb(0.0, 0.0, 0.0, 0.15), 6.0, 0.7, 0.0,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    1.5);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 16 16 16 16;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card-title {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 20.0px;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 5 0 5 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card-title .text {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-fill: -fx-text-title-color;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card-subtitle {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 16.0px;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 5 0 5 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card-subtitle .text {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-fill: -fx-text-subtitle-color;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".control-label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 12.0px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 16 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".control-label .text {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-fill: -fx-text-control-title-color;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".card-button {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-effect: null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-light-grey;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-200;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Label                                                                       *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: -fx-text-base-color;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".label:disabled {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-opacity: -fx-disabled-opacity;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".label:show-mnemonics \u003e .mnemonic-underline {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-stroke: -fx-text-base-color;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * List, Tree, Table COMMON                                                    *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-light-grey;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: whitesmoke;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-light-grey;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #d8f0ea;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Separators\t\t                   \t                                       *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".separator {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 16 -16 16 -16;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Scroll Bar\t\t\t                                                       *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar:vertical \u003e .track-background, .scroll-bar:horizontal \u003e .track-background {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-light-grey;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-insets: 0.0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar:vertical \u003e .thumb, .scroll-bar:horizontal \u003e .thumb {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-grey;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-insets: 0.0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 4.0;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar \u003e .increment-button, .scroll-bar \u003e .decrement-button,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar:hover \u003e .increment-button, .scroll-bar:hover \u003e .decrement-button {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar \u003e .increment-button \u003e .increment-arrow, .scroll-bar \u003e .decrement-button \u003e .decrement-arrow {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-dark-grey;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".scroll-bar \u003e .track-background {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Tables\t\t\t\t\t\t\t\t                       \t\t\t\t   *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view, .tree-table-view {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /* Constants used throughout the tableview. */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-table-cell-border-color: -fx-box-border; /* Horizontal Lines*/"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/* The column header row is made up of a number of column-header, one for each"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "   TableColumn, and a \u0027filler\u0027 area that extends from the right-most column"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "   to the edge of the tableview, or up to the \u0027column control\u0027 button. */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view .filler, .tree-table-view .filler, .table-view .column-header,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".tree-table-view .column-header {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-size: 65;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-style: null;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view .show-hide-columns-button, .tree-table-view .show-hide-columns-button {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view .column-header .label, .table-view .filler .label,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view .column-drag-header .label, .tree-table-view .column-header .label,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".tree-table-view .filler .label, .tree-table-view .column-drag-header .label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-alignment: CENTER_LEFT;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-view .column-header-background, .tree-table-view .column-header-background {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-row-cell, .tree-table-row-cell {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-cell-size: 40px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".table-cell {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: transparent; /* Vertical Lines*/"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Text, Text field \u0026 Text area                                                *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".text {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-smoothing-type: gray;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".text-area, .text-field {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 2.0;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0.5em 0.5em 0.5em 0.1em;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-prompt-text-fill: derive(-dark, 50.0%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-highlight-fill: rgb(94.0, 203.0, 234.0);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".text-area .text, .text-field \u003e * \u003e .text {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-effect: null;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-fill: -dark;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0.15em;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".text-area .content {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0.7em;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0.0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Tool bar\t\u0026 Menu bar\t\t                       \t\t\t  \t\t\t\t   *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".menu-bar { /* top */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: -swatch-toolbar;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-min-height: 48;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-alignment: CENTER_LEFT;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #fff;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0.5em 0.5em 0.5em 0.5em;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-prompt-text-fill: derive(-dark, 50.0%);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-highlight-fill: rgb(94.0, 203.0, 234.0);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#commandTextDisplay {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #fff;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0.5em 0.5em 0.5em 0.5em;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-width: 0 0 2 0;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-prompt-text-fill: derive(-dark, 50.0%);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-highlight-fill: rgb(94.0, 203.0, 234.0);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-prompt-text-fill: derive(-dark, 50.0%);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-highlight-fill: rgb(94.0, 203.0, 234.0);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#resultDisplay:focused {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-color: -swatch-grey;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #fff;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#degreePlannerListView .list-cell {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 0 0 0 5;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "/*******************************************************************************"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " * Tags\t\t                       \t\t\t  \t\t\t\t   \t\t\t\t   *"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " *                                                                             *"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lycjackie"
        },
        "content": " ******************************************************************************/"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#tags, #codes {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".red {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: #ff7675;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".orange {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: #FF7F11;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".green {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: #43845F;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "#codes .label {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #47996B;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".noModules {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: derive(#f5f5f5, 20%);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ".myModule .label {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-color: #D35934;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-padding: 10 10 10 10;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    -fx-pref-width: 1000;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 458
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidDegreePlannerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  \"degreePlanners\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ \"CS1231\", \"CS2100\", \"CS1010\", \"CS2040C\", \"CS2102\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"Invalid\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"Invalid\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"2\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"2\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"3\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"3\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"4\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"4\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 35
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidModuleAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"name\": \"Valid Module\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"CS1010\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"name\": \"Module With Invalid Credits Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"CS1231\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidDegreePlannerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  \"degreePlanners\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"Invalid\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidModuleAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"name\": \"Module with invalid name field: Ha!ns Muäster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"CS1010\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicateModuleAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"123\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"CS1010\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"123\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"CS1010\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidModuleAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"modules\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\": \"9482424z\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\": \"AAAA1234BBBB\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalDegreePlannerAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  \"degreePlanners\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ \"CS1231\", \"CS2100\", \"CS1010\", \"CS2040C\", \"CS2102\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"1\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"2\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"2\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"3\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"year\" : \"3\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"semester\" : \"2\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    \"codes\" : [ ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 27
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalModulesAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Module values as in TypicalModules#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "  \"modules\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS1010\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"1\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS1231\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ \"CS2102\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"2\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS2040C\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"3\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS2100\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"4\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS2101\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"5\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS2102\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [ \"CS1231\" ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"6\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"code\" : \"CS2105\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"corequisites\": [  ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 30,
      "-": 16
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalRequirementCategoryAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  \"requirementCategories\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Computing Foundation\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"36\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ \"CS2100\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Information Security Requirements\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"credits\" : \"20\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Information Security Electives\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"12\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Computing Breadth\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"20\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"IT Professionalism\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"8\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Mathematics\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"12\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"General Education\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"20\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"name\" : \"Unrestricted Electives\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    \"credits\" : \"12\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    \"codeList\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "chyeo": 28
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ModuleListPanelHandle moduleListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanelHandle(getChildNode(ModuleListPanelHandle.MODULE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleListPanelHandle getModuleListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ModuleCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Provides a handle to a module card in the module list panel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String CODE_FIELD_ID \u003d \"#code\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String CREDITS_FIELD_ID \u003d \"#credits\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String COREQUISITES_FIELD_ID \u003d \"#corequisites\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Label codeLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Label creditsLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final Label corequisitesLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        codeLabel \u003d getChildNode(CODE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        creditsLabel \u003d getChildNode(CREDITS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        corequisitesLabel \u003d getChildNode(COREQUISITES_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return codeLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public String getCredits() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String credits \u003d creditsLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        if (credits.startsWith(\"Modular Credits: \")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            credits \u003d credits.substring(\"Modular Credits: \".length());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public String getCorequisites() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String corequisites \u003d corequisitesLabel.getText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (corequisites.startsWith(\"Co-requisites: \")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            corequisites \u003d corequisites.substring(\"Co-requisites: \".length());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (corequisites.equals(\"None\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            corequisites \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return corequisites;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if this handle contains {@code module}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean equals(Module module) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return getName().equals(module.getName().fullName)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 getCode().equals(module.getCode().value)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 getCredits().equals(module.getCredits().value)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 getTags().equals(module.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .sorted()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .collect(Collectors.toList()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                \u0026\u0026 getCorequisites().equals(module.getCorequisites().stream().map(Code::toString)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 42,
      "chyeo": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ModuleListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * Provides a handle for {@code ModuleListPanel} containing the list of {@code ModuleCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleListPanelHandle extends NodeHandle\u003cListView\u003cModule\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String MODULE_LIST_VIEW_ID \u003d \"#moduleListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Optional\u003cModule\u003e lastRememberedSelectedModuleCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleListPanelHandle(ListView\u003cModule\u003e moduleListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        super(moduleListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns a handle to the selected {@code ModuleCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e selectedModuleList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (selectedModuleList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new AssertionError(\"Module list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .map(ModuleCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedModuleList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Navigates the listview to display {@code module}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void navigateToCard(Module module) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        if (!getRootNode().getItems().contains(module)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new IllegalArgumentException(\"Module does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            getRootNode().scrollTo(module);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Selects the {@code ModuleCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the module card handle of a module associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleCardHandle getModuleCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .map(ModuleCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .filter(handle -\u003e handle.equals(getModule(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Module getModule(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Remembers the selected {@code ModuleCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void rememberSelectedModuleCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            lastRememberedSelectedModuleCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            lastRememberedSelectedModuleCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns true if the selected {@code ModuleCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code rememberSelectedModuleCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public boolean isSelectedModuleCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return lastRememberedSelectedModuleCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return !lastRememberedSelectedModuleCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    || !lastRememberedSelectedModuleCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_MODULE_LIST_TESTING \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleModuleListData.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_DEGREE_PLANNER_LIST_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleDegreePlannerListData.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_REQUIREMENT_CATEGORY_LIST_TESTING \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleRequirementCategoryListData.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path saveModuleListFileLocation \u003d SAVE_LOCATION_FOR_MODULE_LIST_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    protected Path saveDegreePlannerListFileLocation \u003d SAVE_LOCATION_FOR_DEGREE_PLANNER_LIST_TESTING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path saveRequirementCategoryListFileLocation \u003d SAVE_LOCATION_FOR_REQUIREMENT_CATEGORY_LIST_TESTING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveModuleListFileLocation,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path saveDegreePlannerListFileLocation, Path saveRequirementCategoryListFileLocation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.saveModuleListFileLocation \u003d saveModuleListFileLocation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.saveDegreePlannerListFileLocation \u003d saveDegreePlannerListFileLocation;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.saveRequirementCategoryListFileLocation \u003d saveRequirementCategoryListFileLocation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonAddressBookStorage(saveModuleListFileLocation, saveDegreePlannerListFileLocation,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            saveRequirementCategoryListFileLocation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveModuleListFileLocation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return storage.getModuleListFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredModuleList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 7,
      "Creastery": 1,
      "chyeo": 12,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final Index fifthModuleIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(fifthModuleIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(fifthModuleIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(fifthModuleIndex.equals(fifthModuleIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(fifthModuleIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(fifthModuleIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(fifthModuleIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/plan_with_ease_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void compareEqualsIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // empty sentence"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // exact match"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(StringUtil.compareEqualsIgnoreCase(\"xyz\", \"xyz\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // different cases"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(StringUtil.compareEqualsIgnoreCase(\"XyZ\", \"xYz\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(StringUtil.compareEqualsIgnoreCase(\"XYZ\", \"xyz\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // with trailing spaces"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(StringUtil.compareEqualsIgnoreCase(\"        xyz\", \"xyz          \"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lycjackie": 17,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerListAllCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.newFile().toPath(), temporaryFolder.newFile().toPath(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_validPlannerListCommand_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String plannerListCommand \u003d PlannerListAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        StringBuilder degreePlannerListContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (DegreePlanner degreePlanner : model.getFilteredDegreePlannerList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .append(\"Year: \" + degreePlanner.getYear() + \" Semester: \" + degreePlanner.getSemester() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            if (degreePlanner.getCodes().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent.append(\"No module inside\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .append(\"Modules: \" + degreePlanner.getCodes().stream().map(Code::toString).collect("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                                Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerListAllCommand.MESSAGE_SUCCESS, degreePlannerListContent.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(plannerListCommand, expectedMessage, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertHistoryCorrect(plannerListCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        temporaryFolder.newFile().toPath(), temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CREDITS_DESC_AMY + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        logic.getFilteredModuleList().remove(0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, Arrays.stream(expectedCommands)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            .sorted(Collections.reverseOrder())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            .map(command -\u003e \"- \" + command)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                            .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            );"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path moduleListFilePath, Path degreePlannerListFilePath,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                Path requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            super(moduleListFilePath, degreePlannerListFilePath, requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void saveModuleList(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 19,
      "truegitnovice": 38,
      "chyeo": 6,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_newModule_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(new AddCommand(validModule), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleInList \u003d model.getAddressBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(new AddCommand(moduleInList), model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, moduleInList.getCode())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 5,
      "Creastery": 12,
      "chyeo": 6,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expectMessage(String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, validModule.getCode()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module alice \u003d new ModuleBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module bob \u003d new ModuleBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public Path getDegreePlannerListFilePath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void setDegreePlannerListFilePath(Path degreePlannerListFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public Path getRequirementCategoryListFilePath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void setRequirementCategoryListFilePath(Path requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public Module getModuleByCode(Code code) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public boolean hasModuleCode(Code code) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void editModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public ReadOnlyProperty\u003cModule\u003e selectedModuleProperty() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public Module getSelectedModule() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void setSelectedModule(Module module) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public boolean hasDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        public DegreePlanner getDegreePlannerByCode(Code toCheck) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void deleteDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement AssertionError"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void addDegreePlanner(DegreePlanner degreePlanner) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void setDegreePlanner(DegreePlanner target, DegreePlanner editedDegreePlanner) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public ObservableList\u003cDegreePlanner\u003e getFilteredDegreePlannerList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void updateFilteredDegreePlannerList(Predicate\u003cDegreePlanner\u003e predicate) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public boolean hasRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public boolean hasRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public RequirementCategory getRequirementCategory(Name requirementCategoryName) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void addRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void setRequirementCategory(RequirementCategory target,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                RequirementCategory editedRequirementCategory) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public ObservableList\u003cRequirementCategory\u003e getFilteredRequirementCategoryList() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void updateFilteredRequirementCategoryList(Predicate\u003cRequirementCategory\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            //ToDo: implement error check"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public RequirementCategory getSelectedRequirementCategory() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public void setSelectedRequirementCategory(RequirementCategory requirementCategory) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public ReadOnlyProperty\u003cRequirementCategory\u003e selectedRequirementCategoryProperty() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 51,
      "truegitnovice": 40,
      "chyeo": 76,
      "-": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.util.InitialDataUtil.getInitialAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.setAddressBook(getInitialAddressBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                                getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.setAddressBook(getInitialAddressBook());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "truegitnovice": 5,
      "chyeo": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALID_CREDITS_AMY \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALID_CREDITS_BOB \u003d \"999\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALID_CODE_AMY \u003d \"AAA0000A\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String VALID_CODE_BOB \u003d \"BBB1111B\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String CREDITS_DESC_AMY \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String CREDITS_DESC_BOB \u003d \" \" + PREFIX_CREDITS + VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String CODE_DESC_AMY \u003d \" \" + PREFIX_CODE + VALID_CODE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String CODE_DESC_BOB \u003d \" \" + PREFIX_CODE + VALID_CODE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Jame§\"; // \u0027§\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String INVALID_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + \"1a\"; // \u0027a\u0027 not allowed in credits"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String INVALID_CODE_DESC \u003d \" \" + PREFIX_CODE; // empty string not allowed for codes"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final EditCommand.EditModuleDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DESC_AMY \u003d new EditModuleDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCredits(VALID_CREDITS_AMY).withCode(VALID_CODE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DESC_BOB \u003d new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCredits(VALID_CREDITS_BOB).withCode(VALID_CODE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * - the address book, filtered module list and selected module in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module expectedSelectedModule \u003d actualModel.getSelectedModule();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            assertEquals(expectedSelectedModule, actualModel.getSelectedModule());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final String[] splitName \u003d module.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Deletes the first module in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void deleteFirstModule(Model model) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.deleteModule(firstModule);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 38,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public DeleteCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // delete -\u003e first module deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // redo -\u003e same first module deleted again"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 1. Deletes a {@code Module} from a filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted module in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the module object regardless of indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameModuleDeleted() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // delete -\u003e deletes second module in unfiltered module list / first module in filtered module list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertNotEquals(moduleToDelete, model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // redo -\u003e deletes same second module in unfiltered module list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 47,
      "truegitnovice": 3,
      "chyeo": 9,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new ModelManager(new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public EditCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, moduleInFilteredList.getCode(), editedModule"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index indexLastModule \u003d Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module lastModule \u003d model.getFilteredModuleList().get(indexLastModule.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleBuilder moduleInList \u003d new ModuleBuilder(lastModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d moduleInList.withName(VALID_NAME_BOB).withCredits(VALID_CREDITS_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCredits(VALID_CREDITS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastModule, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, lastModule.getCode(), editedModule"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(lastModule, editedModule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, new EditCommand.EditModuleDescriptor());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, firstModule.getCode(), editedModule"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(moduleInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, moduleInFilteredList.getCode(), editedModule"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module secondModule \u003d model.getFilteredModuleList().get(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_MODULE, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_MODULE, secondModule.getCode(), firstModule.getCode()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_duplicateModuleFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // edit module in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToEdit \u003d model.getAddressBook().getModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToClone \u003d model.getAddressBook().getModuleList().get(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new EditModuleDescriptorBuilder(moduleToClone).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                moduleToClone.getCode());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_invalidModuleIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_invalidModuleIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToEdit \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // edit -\u003e first module edited"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // redo -\u003e same first module edited again"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new EditModuleDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 1. Edits a {@code Module} from a filtered list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited module in the"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the module object regardless of indexing."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameModuleEdited() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToEdit \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().withCorequisites(moduleToEdit.getCorequisites()).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // edit -\u003e edits second module in unfiltered module list / first module in filtered module list"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertNotEquals(model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased()), moduleToEdit);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // redo -\u003e edits same second module in unfiltered module list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_MODULE, DESC_AMY);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand.EditModuleDescriptor copyDescriptor \u003d new EditCommand.EditModuleDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_MODULE, copyDescriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_MODULE, DESC_AMY)));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_MODULE, DESC_BOB)));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 105,
      "truegitnovice": 10,
      "chyeo": 7,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditCommand.EditModuleDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor editedAmy \u003d new EditModuleDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different credits -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAmy \u003d new EditModuleDescriptorBuilder(DESC_AMY).withCredits(VALID_CREDITS_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAmy \u003d new EditModuleDescriptorBuilder(DESC_AMY).withCode(VALID_CODE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAmy \u003d new EditModuleDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 12,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CreditsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public FindCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void execute_zeroKeywords_noModuleFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void execute_multipleNameKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void execute_multipleCodeKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // TODO: update the module code after TypicalModule attribute are updated"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        CodeContainsKeywordsPredicate predicate \u003d prepareCodePredicate(\"CS2040C CS2101 CS2102\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void execute_multipleCreditsKeywords_multipleModulesFound() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // TODO: update the module credits after TypicalModule attribute are updated"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        CreditsContainsKeywordsPredicate predicate \u003d prepareCreditsPredicate(\"2 4 5\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel.updateFilteredModuleList(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredModuleList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Parses {@code userInput} into a {@code CodeContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private CodeContainsKeywordsPredicate prepareCodePredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return new CodeContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Parses {@code userInput} into a {@code CreditsContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private CreditsContainsKeywordsPredicate prepareCreditsPredicate(String userInput) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        return new CreditsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 15,
      "truegitnovice": 8,
      "chyeo": 8,
      "lycjackie": 32,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, \"- \" + command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                String.join(\"\\n\", \"- \" + command3, \"- \" + command2, \"- \" + command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "truegitnovice": 5,
      "chyeo": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PlannerListAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for PlannerListAllCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerListAllCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_plannerListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        StringBuilder degreePlannerListContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (DegreePlanner degreePlanner : model.getFilteredDegreePlannerList()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .append(\"Year: \" + degreePlanner.getYear() + \" Semester: \" + degreePlanner.getSemester() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            if (degreePlanner.getCodes().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent.append(\"No module inside\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                degreePlannerListContent"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .append(\"Modules: \" + degreePlanner.getCodes().stream().map(Code::toString).collect("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                                Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerListContent.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerListAllCommand.MESSAGE_SUCCESS, degreePlannerListContent.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(new PlannerListAllCommand(), model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PlannerMoveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerMoveCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Rule public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_nonExistentCode_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code nonExistentCode \u003d new Code(\"CS9999\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(new PlannerMoveCommand(validYear, validSemester, nonExistentCode), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                commandHistory, String.format(PlannerMoveCommand.MESSAGE_NONEXISTENT_CODE, nonExistentCode));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_nonExistentYear_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code validCodeToMove \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year nonExistentYear \u003d new Year(\"4\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(new PlannerMoveCommand(nonExistentYear, validSemester, validCodeToMove), model,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerMoveCommand.MESSAGE_NONEXISTENT_DEGREE_PLANNER, nonExistentYear, validSemester));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_nonExistentSemester_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code validCodeToMove \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester nonExistentSemester \u003d new Semester(\"4\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(new PlannerMoveCommand(validYear, nonExistentSemester, validCodeToMove), model,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                commandHistory,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerMoveCommand.MESSAGE_NONEXISTENT_DEGREE_PLANNER, validYear, nonExistentSemester));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_validPlannerUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code validCodeToMove \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner toFind \u003d new DegreePlanner(validYear, validSemester, Collections.emptySet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner sourcePlannerToEdit \u003d model.getDegreePlannerByCode(validCodeToMove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner destinationPlannerToEdit \u003d model.getAddressBook().getDegreePlannerList().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .filter(toFind::isSameDegreePlanner)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveCommand \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(validYear, validSemester, validCodeToMove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerMoveCommand.MESSAGE_SUCCESS, validCodeToMove, validYear, validSemester);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Set\u003cCode\u003e newSourceCodes \u003d new HashSet\u003c\u003e(sourcePlannerToEdit.getCodes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        newSourceCodes.remove(validCodeToMove);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Set\u003cCode\u003e newDestinationCodes \u003d new HashSet\u003c\u003e(destinationPlannerToEdit.getCodes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        newDestinationCodes.add(validCodeToMove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner editedSourcePlanner \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new DegreePlanner(sourcePlannerToEdit.getYear(), sourcePlannerToEdit.getSemester(), newSourceCodes);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        DegreePlanner editedDestinationPlanner \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new DegreePlanner(destinationPlannerToEdit.getYear(), destinationPlannerToEdit.getSemester(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        newDestinationCodes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.setDegreePlanner(sourcePlannerToEdit, editedSourcePlanner);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.setDegreePlanner(destinationPlannerToEdit, editedDestinationPlanner);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // plannerMove -\u003e module moved"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(plannerMoveCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // redo -\u003e same first module deleted again"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void execute_moveToSamePlannerUnfilteredList_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code validCodeToMove \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"1\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveCommand \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(validYear, validSemester, validCodeToMove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerMoveCommand.MESSAGE_SUCCESS, validCodeToMove, validYear, validSemester);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(plannerMoveCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered module list to show all modules"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // redo -\u003e same first module deleted again"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void executeUndoRedo_invalidPlannerUnfilteredList_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code invalidCodeToMove \u003d new Code(\"CS9999\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"2\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveCommand \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(validYear, validSemester, invalidCodeToMove);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(plannerMoveCommand, model, commandHistory,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(PlannerMoveCommand.MESSAGE_NONEXISTENT_CODE, invalidCodeToMove));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code firstCodeToMove \u003d new Code(\"CS1111\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code secondCodeToMove \u003d new Code(\"CS2222\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year firstValidYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year secondValidYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester firstValidSemester \u003d new Semester(\"1\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester secondValidSemester \u003d new Semester(\"2\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveFirstCommand \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(firstValidYear, firstValidSemester, firstCodeToMove);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveSecondCommand \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(secondValidYear, secondValidSemester, secondCodeToMove);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertTrue(plannerMoveFirstCommand.equals(plannerMoveFirstCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand plannerMoveFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(firstValidYear, firstValidSemester, firstCodeToMove);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertTrue(plannerMoveFirstCommand.equals(plannerMoveFirstCommandCopy));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertFalse(plannerMoveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertFalse(plannerMoveFirstCommand.equals(plannerMoveSecondCommand));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 190
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Model model \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Model expectedModel \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RedoCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 5,
      "truegitnovice": 7,
      "chyeo": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RequirementAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementAddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Rule public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Set\u003cCode\u003e codeList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Before public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        new RequirementAddCommand(null, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test public void execute_nonExistentRequirementCategory_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name nonExistentRequirementCategoryName \u003d new Name(\"DOES NOT EXIST\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementAddCommand(nonExistentRequirementCategoryName, codeList),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                model, commandHistory, String.format(RequirementAddCommand.MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        nonExistentRequirementCategoryName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test public void execute_nonExistentCode_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS2010\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementAddCommand(requirementCategoryName, codeList), model, commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                RequirementAddCommand.MESSAGE_NONEXISTENT_CODE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test public void execute_duplicateCode_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS2100\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementAddCommand(requirementCategoryName, codeList), model, commandHistory,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                String.format(RequirementAddCommand.MESSAGE_DUPLICATE_CODE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        requirementCategoryName));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 4,
      "chyeo": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RequirementListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Before public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model \u003d new ModelManager(new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test public void execute_displayList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        StringBuilder requirementListContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d model.getFilteredRequirementCategoryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (RequirementCategory requirementCategory : requirementCategories) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(requirementCategory.getName()).append(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            int currentCredits \u003d requirementCategory.getCodeSet().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .map(code -\u003e model.getModuleByCode(code).getCredits().toString())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .map(Integer::parseInt).reduce(0, (totalCredits, credit) -\u003e totalCredits + credit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(\"(\").append(currentCredits).append(\"/\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .append(requirementCategory.getCredits()).append(\" Modular Credits Fulfilled) \\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            if (requirementCategory.getCodeSet().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                requirementListContent.append(\"No modules added!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                requirementListContent.append(\"Modules: \").append(requirementCategory.getCodeSet().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .map(Code::toString).sorted().collect(Collectors.joining(\", \")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementListContent.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                String.format(RequirementListCommand.MESSAGE_SUCCESS, requirementListContent.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandSuccess(new RequirementListCommand(), model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RequirementRemoveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementRemoveCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Set\u003cCode\u003e codeList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void setUp() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void constructor_nullInputs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        new RequirementRemoveCommand(null, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_nonExistentRequirementCategory_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name nonExistentRequirementCategoryName \u003d new Name(\"DOES NOT EXIST\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementRemoveCommand(nonExistentRequirementCategoryName, codeList),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                model, commandHistory, String.format(RequirementRemoveCommand.MESSAGE_NONEXISTENT_REQUIREMENT_CATEGORY,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        nonExistentRequirementCategoryName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_nonExistentCode_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS9999\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementRemoveCommand(requirementCategoryName, codeList), model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                RequirementRemoveCommand.MESSAGE_NONEXISTENT_CODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_duplicateCode_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS1010\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandFailure(new RequirementRemoveCommand(requirementCategoryName, codeList), model, commandHistory,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                String.format(RequirementRemoveCommand.MESSAGE_REQUIREMENT_CATEGORY_NONEXISTENT_CODE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        requirementCategoryName));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_addModuleToRequirementCategory_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS2100\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory currentRequirementCategory \u003d model.getRequirementCategory(requirementCategoryName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementCategory editedRequirementCategory \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new RequirementCategory(requirementCategoryName, currentRequirementCategory.getCredits(), codeList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Model expectedModel \u003d model;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        expectedModel.setRequirementCategory(currentRequirementCategory, editedRequirementCategory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertCommandSuccess(new RequirementRemoveCommand(requirementCategoryName, codeList), model, commandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                String.format(RequirementRemoveCommand.MESSAGE_SUCCESS, requirementCategoryName, codeList),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void execute_equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeList.add(new Code(\"CS2100\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e codeListToCompare \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeListToCompare.add(new Code(\"CS1010\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name requirementCategoryNameToCompare \u003d new Name(\"Mathematics\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementRemoveCommand commandBaseline \u003d new RequirementRemoveCommand(requirementCategoryName, codeList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementRemoveCommand commandToCompare \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new RequirementRemoveCommand(requirementCategoryNameToCompare, codeListToCompare);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertTrue(commandBaseline.equals(commandBaseline));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        //different objects, same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementRemoveCommand commandBaselineCopy \u003d new RequirementRemoveCommand(requirementCategoryName, codeList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertTrue(commandBaseline.equals(commandBaselineCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        //different objects -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertFalse(commandBaseline.equals(commandToCompare));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        //different objects -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertFalse(commandBaseline.equals(1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public SelectCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index lastModuleIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_MODULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionSuccess(lastModuleIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModuleAtIndex(expectedModel, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * and checks that the model\u0027s selected module is set to the module at {@code index} in the filtered module list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_MODULE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.setSelectedModule(model.getFilteredModuleList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 25,
      "truegitnovice": 6,
      "chyeo": 10,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    //ToDo: Implement getTypicalDegreePlannerList for DegreePlannerList and update the codes below"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private final Model model \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private final Model expectedModel \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList()).toModelType(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public UndoCommandTest() throws IllegalValueException {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteFirstModule(expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 5,
      "truegitnovice": 7,
      "chyeo": 9,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // multiple credits - last credits accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CREDITS_DESC_AMY + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // multiple codes - last code accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CREDITS_DESC_BOB + CODE_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module expectedModuleMultipleTags \u003d new ModuleBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CREDITS_DESC_BOB + CODE_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedModuleMultipleTags));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + CREDITS_DESC_AMY + CODE_DESC_AMY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new AddCommand(expectedModule));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + CREDITS_DESC_BOB + CODE_DESC_BOB,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // missing credits prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_CREDITS_BOB + CODE_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // missing code prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CREDITS_DESC_BOB + VALID_CODE_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_CREDITS_BOB + VALID_CODE_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CREDITS_DESC_BOB + CODE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_CREDITS_DESC + CODE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CREDITS_DESC_BOB + INVALID_CODE_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CREDITS_DESC_BOB + CODE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CREDITS_DESC_BOB + INVALID_CODE_DESC,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 50,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerListAllCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerMoveCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementRemoveCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.testutil.RequirementUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(new AddCommand(module), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(module).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + INDEX_FIRST_MODULE.getOneBased() + \" \" + ModuleUtil.getEditModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_MODULE, descriptor), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"foo\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parseCommand_plannerListAll() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerListAllCommand.COMMAND_WORD) instanceof PlannerListAllCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertTrue(parser.parseCommand(PlannerListAllCommand.COMMAND_WORD + \" 3\") instanceof PlannerListAllCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parseCommand_plannerMove() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand command \u003d (PlannerMoveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                PlannerMoveCommand.COMMAND_WORD + \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \" + PREFIX_CODE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        + \"CS1010\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertEquals(new PlannerMoveCommand(new Year(\"1\"), new Semester(\"2\"), new Code(\"CS1010\")), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void parseCommand_requirementList() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertTrue(parser.parseCommand(RequirementListCommand.COMMAND_WORD) instanceof RequirementListCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void parseCommand_requirementRemove() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name name \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e codeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeSet.add(new Code(\"CS1010\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementRemoveCommand command \u003d (RequirementRemoveCommand)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                parser.parseCommand(RequirementUtil.getRequirementRemoveCommand(name, codeSet));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertEquals(new RequirementRemoveCommand(name, codeSet), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 20,
      "Creastery": 18,
      "chyeo": 21,
      "lycjackie": 4,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertParseSuccess(Parser\u003c?\u003e parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertParseFailure(Parser\u003c?\u003e parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_MODULE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, \"\", EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CREDITS_DESC, Credits.MESSAGE_CONSTRAINTS); // invalid credits"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CODE_DESC, Code.MESSAGE_CONSTRAINTS); // invalid code"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // valid credits followed by invalid credits. The test case for invalid credits followed by valid credits"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, \"1\" + CREDITS_DESC_BOB + INVALID_CREDITS_DESC, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being edited,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_CODE_DESC + VALID_CODE_AMY + VALID_CREDITS_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCredits(VALID_CREDITS_BOB).withCode(VALID_CODE_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // credits"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withCredits(VALID_CREDITS_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // code"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withCode(VALID_CODE_AMY).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CREDITS_DESC_AMY + CODE_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + TAG_DESC_FRIEND + CREDITS_DESC_AMY + CODE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CREDITS_DESC_BOB + CODE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withCredits(VALID_CREDITS_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCode(VALID_CODE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CREDITS_DESC + CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withCredits(VALID_CREDITS_BOB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_CREDITS_DESC + CODE_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withCredits(VALID_CREDITS_BOB)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCode(VALID_CODE_BOB).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MODULE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 54,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_AND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_OR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.CreditsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // No name argument -\u003e assertFailure"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseFailure(parser, PREFIX_NAME + \"     \", Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // No code argument -\u003e assertFailure"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseFailure(parser, PREFIX_CODE + \"     \", Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // No credits argument -\u003e assertFailure"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseFailure(parser, PREFIX_CREDITS + \"     \", Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        FindCommand expectedFindNameCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // single keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseSuccess(parser, PREFIX_NAME + \"Alice\", expectedFindNameCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        FindCommand expectedFindCodeCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new FindCommand(new CodeContainsKeywordsPredicate(Arrays.asList(\"CS1231\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // single keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseSuccess(parser, PREFIX_CODE + \"CS1231\", expectedFindCodeCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        FindCommand expectedFindCreditsCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new FindCommand(new CreditsContainsKeywordsPredicate(Arrays.asList(\"999\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // single keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseSuccess(parser, PREFIX_CREDITS + \"999\", expectedFindCreditsCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void parse_validArgs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // test for boolean OR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // name/NAME || name/NAME"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_NAME + \"Programming \" + WHITESPACE + OPERATOR_OR + WHITESPACE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Discrete\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // code/CODE || code/CODE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_CODE + \"CS1231 \" + WHITESPACE + OPERATOR_OR + WHITESPACE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"CS2040C\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // credits/CREDITS || credits/CREDITS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_CREDITS + \"4 \" + WHITESPACE + OPERATOR_OR + WHITESPACE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CREDITS + \"999\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // test for boolean AND"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // name/NAME \u0026\u0026 name/NAME"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_NAME + \"Programming \" + WHITESPACE + OPERATOR_AND + WHITESPACE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Methodology\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // code/CODE \u0026\u0026 code/CODE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_CODE + \"CS1231 \" + WHITESPACE + OPERATOR_AND + WHITESPACE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"CS2040C\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // credits/CREDITS \u0026\u0026 credits/CREDITS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParserSuccess(parser, PREFIX_CREDITS + \"4 \" + WHITESPACE + OPERATOR_AND + WHITESPACE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CREDITS + \"999\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void parseInvalidArgs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertParseThrowsException(parser, \"invalid/DoesNotExists\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Assert if a parse is successful. This does not check if {@code FindCommand} is the same"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Rather it check if a parser return a FindCommand."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private void assertParserSuccess(FindCommandParser parser, String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            FindCommand command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            assertNotNull(\"Expecting not null\", command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            fail(\"Expecting no parser error\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     * Assert if a parse return an exception."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private void assertParseThrowsException(FindCommandParser parser, String str) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            parser.parse(str);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            fail(\"Expected a parse error\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        } catch (ParseException ignore) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "            // we want the exception to be thrown."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "lycjackie": 89,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Rächel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_CODE \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String VALID_CREDITS \u003d \"246\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String VALID_CODE \u003d \"MA1301\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(INDEX_FIRST_MODULE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCredits_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCredits((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCredits_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCredits(INVALID_CREDITS));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCredits_validValueWithoutWhitespace_returnsCredits() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Credits expectedCredits \u003d new Credits(VALID_CREDITS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseCredits(VALID_CREDITS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCredits_validValueWithWhitespace_returnsTrimmedCredits() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String creditsWithWhitespace \u003d WHITESPACE + VALID_CREDITS + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Credits expectedCredits \u003d new Credits(VALID_CREDITS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCredits, ParserUtil.parseCredits(creditsWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_CODE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCode_validValueWithoutWhitespace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code expectedCode \u003d new Code(VALID_CODE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseCode(VALID_CODE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void parseCode_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String codeWithWhitespace \u003d WHITESPACE + VALID_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Code expectedCode \u003d new Code(VALID_CODE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseCode(codeWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void parseKeyword() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String keyword \u003d \"abc\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String actualWord \u003d \"abc xyz 123\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String sentence \u003d \"abc xyz\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(ParserUtil.parseKeyword(keyword, actualWord));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String sentence_keyword \u003d \"abc xyz\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(ParserUtil.parseKeyword(sentence_keyword, actualWord));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(ParserUtil.parseKeyword(sentence_keyword, sentence));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 33,
      "lycjackie": 15,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PlannerMoveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.logic.commands.PlannerMoveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class PlannerMoveCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private PlannerMoveCommandParser parser \u003d new PlannerMoveCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"INVALID\", Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // invalid year"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"999 \" + PREFIX_SEMESTER + \"1 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010\", Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // invalid semester"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"999 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010\", Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"999 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"INVALID\", Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                PREAMBLE_NON_EMPTY + \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"1 \" + PREFIX_CODE + \"CS1010 \","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlannerMoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parse_validArgs_returnsPlannerMoveCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Code ValidCodeToMove \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Year validYear \u003d new Year(\"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Semester validSemester \u003d new Semester(\"2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        PlannerMoveCommand expectedPlannerMoveCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new PlannerMoveCommand(validYear, validSemester, ValidCodeToMove);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010\", expectedPlannerMoveCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                PREAMBLE_WHITESPACE + \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        + PREFIX_CODE + \"CS1010\", expectedPlannerMoveCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // multiple codes - last code accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1011 \" + PREFIX_CODE + \"CS1010 \", expectedPlannerMoveCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // multiple years - last year accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_YEAR + \"2 \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010 \", expectedPlannerMoveCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // multiple semesters - last semester accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010 \", expectedPlannerMoveCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // no year specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \" \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010\", Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // no semester specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \"CS1010\", Semester.MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // no code specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                + PREFIX_CODE + \" \", Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlannerMoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // missing year prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + \"1 \" + PREFIX_SEMESTER + \"2 \" + PREFIX_CODE + \"CS1010\", expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // missing semester prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + \"2 \" + PREFIX_CODE + \"CS1010\", expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // missing code prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_YEAR + \"1 \" + PREFIX_SEMESTER + \"2 \" + \"CS1010\", expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertParseFailure(parser, \"1 \" + \"2 \" + \"CS1010\", expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RequirementRemoveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementRemoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementRemoveCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private RequirementRemoveCommandParser parser \u003d new RequirementRemoveCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // invalid format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseFailure(parser, \" INVALID INPUT\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                RequirementRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // invalid name format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"  \" + PREFIX_CODE + \"CS1010 \","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"Computing Foundation \" + PREFIX_CODE + \"1231\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // invalid name and code format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"   \" + PREFIX_CODE + \"1231\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                PREAMBLE_NON_EMPTY + \" \" + PREFIX_NAME + \"Computing Foundation \" + PREFIX_CODE + \"CS1231\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RequirementRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void parse_validArgs_returnsRequirementDeleteCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Name validName \u003d new Name(\"Computing Foundation\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        Set\u003cCode\u003e validCodeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        validCodeSet.add(new Code(\"CS1010\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        RequirementRemoveCommand expectedRequirementRemoveCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new RequirementRemoveCommand(validName, validCodeSet);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Computing Foundation \" + PREFIX_CODE + \"CS1010 \","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                expectedRequirementRemoveCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                PREAMBLE_WHITESPACE + \" \" + PREFIX_NAME + \"Computing Foundation \" + PREFIX_CODE + \"CS1010 \","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                expectedRequirementRemoveCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // multiple requirement categories specified - last requirement category accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Mathematics \" + PREFIX_NAME"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                + \"Computing Foundation \" + PREFIX_CODE + \"CS1010\", expectedRequirementRemoveCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_MODULE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getModuleList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        AddressBook newData \u003d new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                getTypicalRequirementCategoriesList()).toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newModules);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.hasModule(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void getModuleByCode_nullCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        addressBook.getModuleByCode(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_moduleNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(addressBook.hasModule(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_moduleInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.addModule(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(addressBook.hasModule(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.addModule(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(addressBook.hasModule(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.getModuleList().remove(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.addModule(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.addModule(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * A stub ReadOnlyAddressBook whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        private final ObservableList\u003cDegreePlanner\u003e degreePlanners \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        private final ObservableList\u003cRequirementCategory\u003e requirementCategories \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddressBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        public ObservableList\u003cDegreePlanner\u003e getDegreePlannerList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            return degreePlanners;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        public ObservableList\u003cRequirementCategory\u003e getRequirementCategoryList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            return requirementCategories;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 8,
      "Creastery": 32,
      "chyeo": 12,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(null, modelManager.getSelectedModule());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.hasModule(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void getModuleByCode_nullCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        modelManager.getModuleByCode(null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_moduleNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(modelManager.hasModule(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void hasModule_moduleInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(modelManager.hasModule(ALICE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void deleteModule_moduleIsSelectedAndFirstModuleInFilteredModuleList_selectionCleared() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(ALICE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.setSelectedModule(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.deleteModule(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(null, modelManager.getSelectedModule());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void deleteModule_moduleIsSelectedAndSecondModuleInFilteredModuleList_firstModuleSelected() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(ALICE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredModuleList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.setSelectedModule(BOB);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.deleteModule(BOB);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedModule());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_moduleIsSelected_selectedModuleUpdated() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(ALICE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.setSelectedModule(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module updatedAlice \u003d new ModuleBuilder(ALICE).withCode(VALID_CODE_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.editModule(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedModule());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.getFilteredModuleList().remove(0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setSelectedModule_moduleNotInFilteredModuleList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.setSelectedModule(ALICE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setSelectedModule_moduleInFilteredModuleList_setsSelectedModule() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.addModule(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredModuleList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.setSelectedModule(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedModule());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withModule(ALICE).withModule(BENSON).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.updateFilteredModuleList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertFalse(modelManager"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 48,
      "truegitnovice": 2,
      "chyeo": 10,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withModule(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withModule(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withModule(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 6,
      "-": 292
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CodeContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class CodeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CodeContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CodeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CodeContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CodeContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CodeContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CodeContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CodeContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new CodeContainsKeywordsPredicate(Collections.singletonList(\"CS1010\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        predicate \u003d new CodeContainsKeywordsPredicate(Arrays.asList(\"CS1010\", \"CS1231\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS1231\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        predicate \u003d new CodeContainsKeywordsPredicate(Arrays.asList(\"cS1010\", \"Cs1231\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCode(\"CS1231\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CodeContainsKeywordsPredicate predicate \u003d new CodeContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        predicate \u003d new CodeContainsKeywordsPredicate(Arrays.asList(\"CS1000\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // Keywords match credits and name, but does not match code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        predicate \u003d new CodeContainsKeywordsPredicate(Arrays.asList(\"CS0000\", \"CS1111\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"Alice\").withCredits(\"123\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 15,
      "lycjackie": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class CodeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void constructor_invalidCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String invalidCode \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Code(invalidCode));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void isValidCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // null code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Code.isValidCode(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // invalid codes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Code.isValidCode(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Code.isValidCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // valid codes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS1010\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS2040C\")); // ends with an optional alphabet"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Code.isValidCode(\"IFS4231\")); // starts with 3 alphabets"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Code.isValidCode(\"ABC1234D\")); // starts with 3 alphabets and ends with optional alphabet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CreditsContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "public class CreditsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    //TODO: to update all test cases again after regex for `Credits` is updated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1 2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"1\", \"1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CreditsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CreditsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CreditsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CreditsContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CreditsContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CreditsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CreditsContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                new CreditsContainsKeywordsPredicate(Collections.singletonList(\"444\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCredits(\"444\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        predicate \u003d new CreditsContainsKeywordsPredicate(Arrays.asList(\"122\", \"444\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCredits(\"122\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        predicate \u003d new CreditsContainsKeywordsPredicate(Arrays.asList(\"999\", \"444\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withCredits(\"444\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        CreditsContainsKeywordsPredicate predicate \u003d new CreditsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCredits(\"123\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        predicate \u003d new CreditsContainsKeywordsPredicate(Arrays.asList(\"144\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withCredits(\"441\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "lycjackie": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CreditsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Credits(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Credits(invalidCredits));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void isValidCredits() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // null credits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Credits.isValidCredits(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"+10\")); // no plus sign"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"-1\")); // no negative sign"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"00\")); // no leading zero (for 1 zero)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"000\")); // no leading zeroes (for 1 zero)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"01\")); // no leading zero (for 1 digit)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"001\")); // no leading zeroes (for 1 digit)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"099\")); // no leading zero (for 2 digits)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"1MC\")); // alphabets within digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"1 6\")); // spaces within digits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // valid credits"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"0\")); // exactly zero"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"50\")); // exactly 2 numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"999\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        module.getTags().remove(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(ALICE.isSameModule(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(ALICE.isSameModule(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different credits and code -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(ALICE).withCredits(VALID_CREDITS_BOB).withCode(VALID_CODE_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different name but same code -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // same name, same code, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module aliceCopy \u003d new ModuleBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different credits -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(ALICE).withCredits(VALID_CREDITS_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(ALICE).withCode(VALID_CODE_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 29,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // Keywords match credits and code, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withName(\"Alice\").withCredits(\"123\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                .withCode(\"CS1010\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 13,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Name.isValidName(\"µ\")); // only non-printable character"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(Name.isValidName(\"pëter\")); // contains non-printable characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Creastery"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public void getModuleByCode_nullCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        uniqueModuleList.getModuleByCode(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(null, ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedUniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(ALICE).withCode(VALID_CODE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedUniqueModuleList.add(editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModule(ALICE, BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.remove(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.remove(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.remove(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModules((UniqueModuleList) null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModules((List\u003cModule\u003e) null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.setModules(listWithDuplicateModules);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uniqueModuleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 85,
      "chyeo": 6,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Rächel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_CREDITS \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String INVALID_CODE \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String VALID_CREDITS \u003d BENSON.getCredits().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final String VALID_CODE \u003d BENSON.getCode().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final List\u003cJsonAdaptedCode\u003e VALID_COREQUISITES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(BENSON, module.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(INVALID_NAME, VALID_CREDITS, VALID_CODE, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(null, VALID_CREDITS, VALID_CODE, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_invalidCredits_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, INVALID_CREDITS, VALID_CODE, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d Credits.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_nullCredits_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_NAME, null, VALID_CODE, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, VALID_CREDITS, INVALID_CODE, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d Code.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, VALID_CREDITS, null, VALID_TAGS, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new JsonAdaptedModule(VALID_NAME, VALID_CREDITS, VALID_CODE, invalidTags, VALID_COREQUISITES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, module::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 43,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        readAddressBook(null, null, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Reads files at the specified {@code moduleListFilePath}, {@code degreePlannerListFilePath}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * and {@code requirementCategoryListFilePath}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String moduleListFilePath,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            String degreePlannerListFilePath, String requirementCategoryListFilePath) throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(moduleListFilePath), Paths.get(degreePlannerListFilePath),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                Paths.get(requirementCategoryListFilePath))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(moduleListFilePath),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        addToTestDataPathIfNotNull(degreePlannerListFilePath),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        addToTestDataPathIfNotNull(requirementCategoryListFilePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentModuleListFile.json\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"NonExistentDegreePlannerListFile.json\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"NonExistentRequirementCategoryListFile.json\").isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"notJsonFormatAddressBook.json\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void readAddressBook_invalidModuleAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        readAddressBook(\"invalidModuleAddressBook.json\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"invalidDegreePlannerAddressBook.json\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"invalidModuleAddressBook.json\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void readAddressBook_invalidAndValidModuleAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        readAddressBook(\"invalidAndValidModuleAddressBook.json\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"invalidAndValidDegreePlannerAddressBook.json\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"invalidAndValidModuleAddressBook.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path moduleListFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempModuleAddressBook.json\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path degreePlannerListFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempDegreePlannerAddressBook.json\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path requirementCategoryListFilePath \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                testFolder.getRoot().toPath().resolve(\"TempRequirementCategoryAddressBook.json\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook original \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .toModelType();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonAddressBookStorage(moduleListFilePath, degreePlannerListFilePath,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        jsonAddressBookStorage.saveModuleList(original, moduleListFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        jsonAddressBookStorage.saveDegreePlannerList(original, degreePlannerListFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        jsonAddressBookStorage.saveRequirementCategoryList(original, requirementCategoryListFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                jsonAddressBookStorage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .readAddressBook(moduleListFilePath, degreePlannerListFilePath, requirementCategoryListFilePath)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        original.addModule(HOON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        original.removeModule(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        jsonAddressBookStorage.saveModuleList(original, moduleListFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        jsonAddressBookStorage.saveDegreePlannerList(original, degreePlannerListFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        readBack \u003d jsonAddressBookStorage"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .readAddressBook(moduleListFilePath, degreePlannerListFilePath, requirementCategoryListFilePath).get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        original.addModule(IDA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        jsonAddressBookStorage.saveModuleList(original); // file path not specified"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveAddressBook(null, \"SomeModuleListFile.json\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"SomeDegreePlannerListFile.json\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                \"SomeRequirementCategoryListFile.json\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String moduleListFilePath,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            String degreePlannerListFilePath,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            String requirementCategoryListFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(moduleListFilePath), Paths.get(degreePlannerListFilePath),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    Paths.get(requirementCategoryListFilePath))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .saveModuleList(addressBook, addToTestDataPathIfNotNull(moduleListFilePath));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        saveAddressBook(new AddressBook(), null, null, null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 43,
      "Creastery": 9,
      "chyeo": 16,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.testutil.TypicalDegreePlanners;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.testutil.TypicalRequirementCategories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final Path TYPICAL_DEGREE_PLANNER_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalDegreePlannerAddressBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private static final Path TYPICAL_REQUIREMENT_CATEGORY_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalRequirementCategoryAddressBook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleAddressBook.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleAddressBook.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        JsonSerializableModuleList dataFromModuleListFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        JsonSerializableDegreePlannerList dataFromDegreePlannerListFile \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_DEGREE_PLANNER_FILE, JsonSerializableDegreePlannerList.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        JsonSerializableRequirementCategoryList dataFromRequirementCategoryListFile \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_REQUIREMENT_CATEGORY_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        JsonSerializableRequirementCategoryList.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonSerializableAddressBook jsonSerializableAddressBook \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(dataFromModuleListFile.toModelType(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        dataFromDegreePlannerListFile.toModelType(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        dataFromRequirementCategoryListFile.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook addressBookFromFile \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                jsonSerializableAddressBook.toModelType();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonSerializableAddressBook typicalAddressBookData \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                new JsonSerializableAddressBook(TypicalModules.getTypicalModuleList(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        TypicalDegreePlanners.getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        TypicalRequirementCategories.getTypicalRequirementCategoriesList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        AddressBook typicalAddressBook \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                typicalAddressBookData.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        assertEquals(addressBookFromFile, typicalAddressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonSerializableModuleList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonSerializableModuleList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                JsonSerializableModuleList.class).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        thrown.expectMessage(JsonSerializableModuleList.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 14,
      "Creastery": 7,
      "chyeo": 17,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonAddressBookStorage(getTempFilePath(\"ab\"), getTempFilePath(\"dp\"), getTempFilePath(\"reqCat\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook original \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        .toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        assertNotNull(storageManager.getModuleListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 4,
      "chyeo": 7,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withModule(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Adds a new {@code Module} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public AddressBookBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        addressBook.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DegreePlannerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.Year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * A utility class to help with building DegreePlanner objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * {@code DegreePlanner dp \u003d new DegreePlannerBuilder().withYear(\"1).withSemester(\"1\").build();}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class DegreePlannerBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String DEFAULT_YEAR \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private Set\u003cCode\u003e codes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        semester \u003d new Semester(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        codes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Initializes the DegreePlannerBuilder with the data of {@code degreePlannerToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerBuilder(DegreePlanner degreePlannerToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        year \u003d degreePlannerToCopy.getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        semester \u003d degreePlannerToCopy.getSemester();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        codes \u003d new HashSet\u003cCode\u003e(degreePlannerToCopy.getCodes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Sets the {@code Year} of the {@code DegreePlanner} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerBuilder withYear(String year) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Sets the {@code Semester} of the {@code DegreePlanner} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Parses the {@code codes} into a {@code Set\u003cCode\u003e} and set it to the {@code DegreePlanner} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlannerBuilder withCodes(String... codes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        this.codes \u003d SampleDataUtil.getCodeSet(codes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public DegreePlanner build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new DegreePlanner(year, semester, codes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private EditCommand.EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder(EditCommand.EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor \u003d new EditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setName(module.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setCredits(module.getCredits());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setCode(module.getCode());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setTags(module.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Name} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Credits} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setCredits(new Credits(credits));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Code} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder withCode(String code) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setCode(new Code(code));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses the {@code corequisites} into a {@code Set\u003cCode\u003e} and set it to the {@code EditModuleDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditModuleDescriptorBuilder withCorequisites(String... corequisites) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Set\u003cCode\u003e corequisitesSet \u003d Stream.of(corequisites).map(Code::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.setCorequisites(corequisitesSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public EditCommand.EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 41,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d \"666\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"ABC1234Z\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Set\u003cCode\u003e corequisites;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        code \u003d new Code(DEFAULT_CODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        corequisites \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        name \u003d moduleToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        credits \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        code \u003d moduleToCopy.getCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        corequisites \u003d new HashSet\u003c\u003e(moduleToCopy.getCorequisites());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Name} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Parses the {@code corequisites} into a {@code Set\u003cCode\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withCorequisites(String ... corequisites) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.corequisites \u003d SampleDataUtil.getCodeSet(corequisites);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code corequisites} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withCorequisites(Set\u003cCode\u003e corequisites) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.corequisites \u003d new HashSet\u003c\u003e(corequisites);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Code} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.code \u003d new Code(code);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Sets the {@code Credits} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        this.credits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return new Module(name, credits, code, tags, corequisites);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 50,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        sb.append(PREFIX_NAME + module.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        sb.append(PREFIX_CREDITS + module.getCredits().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        sb.append(PREFIX_CODE + module.getCode().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        module.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static String getEditModuleDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.getCredits().ifPresent(credits -\u003e sb.append(PREFIX_CREDITS).append(credits.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        descriptor.getCode().ifPresent(code -\u003e sb.append(PREFIX_CODE).append(code.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 19,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RequirementCategoryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A utility class to help with building RequirementCategory objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementCategoryBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Computing Foundation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d \"36\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private Set\u003cCode\u003e codeSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Initializes the RequirementCategoryBuilder with the data of {@code requirementCategoryToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryBuilder(RequirementCategory requirementCategoryToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        name \u003d requirementCategoryToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        credits \u003d requirementCategoryToCopy.getCredits();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeSet \u003d new HashSet\u003c\u003e(requirementCategoryToCopy.getCodeSet());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Sets the {@code Name} of the {@code RequirementCategory} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Parses the {@code codes} into a {@code Set\u003cCode\u003e} and set it to the {@code RequirementCategory} that we are"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryBuilder withCodes(String... codes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.codeSet \u003d SampleDataUtil.getCodeSet(codes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Sets the {@code Credits} of the {@code RequirementCategory} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategoryBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        this.credits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public RequirementCategory build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new RequirementCategory(name, credits, codeSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 1,
      "chyeo": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RequirementUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.logic.commands.RequirementRemoveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A utility class for RequirementCategory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class RequirementUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns an remove command string for removing the {@code code}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static String getRequirementRemoveCommand(Name requirementCategoryName, Set\u003cCode\u003e codeSet) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        sb.append(RequirementRemoveCommand.COMMAND_WORD).append(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        sb.append(PREFIX_NAME).append(requirementCategoryName.toString()).append(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        codeSet.stream().forEach(s -\u003e sb.append(PREFIX_CODE).append(s.value).append(\" \"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chyeo": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDegreePlanners.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import seedu.address.model.planner.DegreePlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " * A utility class containing a list of {@code DegreePlanner} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "public class TypicalDegreePlanners {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_1 \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"1\").withSemester(\"1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    .withCodes(\"CS1231\", \"CS2100\", \"CS1010\", \"CS2040C\", \"CS2102\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_1_SEMESTER_2 \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"1\").withSemester(\"2\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_1 \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"2\").withSemester(\"1\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_2_SEMESTER_2 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"2\").withSemester(\"2\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"3\").withSemester(\"1\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    private static final DegreePlanner YEAR_3_SEMESTER_2 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            new DegreePlannerBuilder().withYear(\"3\").withSemester(\"2\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical degree planners."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static ObservableList\u003cDegreePlanner\u003e getTypicalDegreePlannerList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        AddressBook degreePlannerList \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        for (DegreePlanner degreePlanner : getTypicalDegreePlanners()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            degreePlannerList.addDegreePlanner(degreePlanner);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return degreePlannerList.getDegreePlannerList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    public static List\u003cDegreePlanner\u003e getTypicalDegreePlanners() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(YEAR_1_SEMESTER_1, YEAR_1_SEMESTER_2, YEAR_2_SEMESTER_1, YEAR_2_SEMESTER_2,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                YEAR_3_SEMESTER_1, YEAR_3_SEMESTER_2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Index INDEX_FIRST_MODULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Index INDEX_SECOND_MODULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Index INDEX_THIRD_MODULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module ALICE \u003d new ModuleBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS1010\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCredits(\"0\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module BENSON \u003d new ModuleBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS1231\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCredits(\"1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCorequisites(\"CS2102\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module CARL \u003d new ModuleBuilder().withName(\"Carl Kurz\").withCredits(\"2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2040C\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module DANIEL \u003d new ModuleBuilder().withName(\"Daniel Meier\").withCredits(\"3\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2100\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module ELLE \u003d new ModuleBuilder().withName(\"Elle Meyer\").withCredits(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module FIONA \u003d new ModuleBuilder().withName(\"Fiona Kunz\").withCredits(\"5\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2102\").withCorequisites(\"CS1231\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module GEORGE \u003d new ModuleBuilder().withName(\"George Best\").withCredits(\"6\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2105\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module HOON \u003d new ModuleBuilder().withName(\"Hoon Meier\").withCredits(\"7\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2106\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module IDA \u003d new ModuleBuilder().withName(\"Ida Mueller\").withCredits(\"8\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(\"CS2107\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module AMY \u003d new ModuleBuilder().withName(VALID_NAME_AMY).withCredits(VALID_CREDITS_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(VALID_CODE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static final Module BOB \u003d new ModuleBuilder().withName(VALID_NAME_BOB).withCredits(VALID_CREDITS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            .withCode(VALID_CODE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d PREFIX_NAME + \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical modules."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static ObservableList\u003cModule\u003e getTypicalModuleList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook moduleList \u003d new AddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return moduleList.getModuleList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 39,
      "chyeo": 6,
      "lycjackie": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRequirementCategories.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.model.requirement.RequirementCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chyeo"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chyeo"
        },
        "content": "public class TypicalRequirementCategories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory COMPUTING_FOUNDATION \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Computing Foundation\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .withCredits(\"36\").withCodes(\"CS2100\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory INFORMATION_SECURITY_REQUIREMENTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Information Security Requirements\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                    .withCredits(\"20\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory INFORMATION_SECURITY_ELECTIVES \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Information Security Electives\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"12\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory COMPUTING_BREADTH \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Computing Breadth\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"20\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory IT_PROFESSIONALISM \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"IT Professionalism\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"8\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory MATHEMATICS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Mathematics\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"12\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory GENERAL_EDUCATION \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"General Education\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"20\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static final RequirementCategory UNRESTRICTED_ELECTIVES \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            new RequirementCategoryBuilder().withName(\"Unrestricted Electives\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                    .withCredits(\"12\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    private TypicalRequirementCategories() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical modules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static ObservableList\u003cRequirementCategory\u003e getTypicalRequirementCategoriesList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook requirementCategoryList \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        for (RequirementCategory requirementCategory : getTypicalRequirementCategories()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            requirementCategoryList.addRequirementCategory(requirementCategory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return requirementCategoryList.getRequirementCategoryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public static List\u003cRequirementCategory\u003e getTypicalRequirementCategories() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                Arrays.asList(COMPUTING_FOUNDATION, INFORMATION_SECURITY_REQUIREMENTS, INFORMATION_SECURITY_ELECTIVES,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        COMPUTING_BREADTH, IT_PROFESSIONALISM, MATHEMATICS, GENERAL_EDUCATION, UNRESTRICTED_ELECTIVES));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 6,
      "chyeo": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private SimpleObjectProperty\u003cModule\u003e selectedModule \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedModule));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // associated web page of a module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        guiRobot.interact(() -\u003e selectedModule.set(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        URL expectedModuleUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedModuleUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 8,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.newFile().toPath(), temporaryFolder.newFile().toPath(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                        temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        StorageManager storageManager \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 4,
      "chyeo": 1,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ModuleCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleWithNoTags \u003d new ModuleBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCard moduleCard \u003d new ModuleCard(moduleWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uiPartRule.setUiPart(moduleCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCardDisplay(moduleCard, moduleWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleWithTags \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleCard \u003d new ModuleCard(moduleWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uiPartRule.setUiPart(moduleCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCardDisplay(moduleCard, moduleWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCard moduleCard \u003d new ModuleCard(module, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // same module, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCard copy \u003d new ModuleCard(module, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(moduleCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(moduleCard.equals(moduleCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(moduleCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(moduleCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // different module, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module differentModule \u003d new ModuleBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(moduleCard.equals(new ModuleCard(differentModule, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // same module, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(moduleCard.equals(new ModuleCard(module, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that {@code moduleCard} displays the details of {@code expectedModule} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void assertCardDisplay(ModuleCard moduleCard, Module expectedModule, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCardHandle moduleCardHandle \u003d new ModuleCardHandle(moduleCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", moduleCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // verify module details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCardDisplaysModule(expectedModule, moduleCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 32,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ModuleListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "public class ModuleListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final ObservableList\u003cModule\u003e TYPICAL_MODULES \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            FXCollections.observableList(getTypicalModules());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private final SimpleObjectProperty\u003cModule\u003e selectedModule \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private ModuleListPanelHandle moduleListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        initUi(TYPICAL_MODULES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_MODULES.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            moduleListPanelHandle.navigateToCard(TYPICAL_MODULES.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Module expectedModule \u003d TYPICAL_MODULES.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            ModuleCardHandle actualCard \u003d moduleListPanelHandle.getModuleCardHandle(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            assertCardDisplaysModule(expectedModule, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public void selection_modelSelectedModuleChanged_selectionChanges() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        initUi(TYPICAL_MODULES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module secondModule \u003d TYPICAL_MODULES.get(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        guiRobot.interact(() -\u003e selectedModule.set(secondModule));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCardHandle expectedModule \u003d moduleListPanelHandle.getModuleCardHandle(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleCardHandle selectedModule \u003d moduleListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCardEquals(expectedModule, selectedModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Verifies that creating and deleting large number of modules in {@code ModuleListPanel} requires lesser than"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cModule\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        }, \"Creation and deletion of module cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns a list of modules containing {@code moduleCount} modules that is used to populate the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code ModuleListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private ObservableList\u003cModule\u003e createBackingList(int moduleCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ObservableList\u003cModule\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Credits credits \u003d new Credits(\"999\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Code code \u003d new Code(\"CS1010\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            Module module \u003d new Module(name, credits, code, Collections.emptySet(), Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            backingList.add(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Initializes {@code moduleListPanelHandle} with a {@code ModuleListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ModuleListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void initUi(ObservableList\u003cModule\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModuleListPanel moduleListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                new ModuleListPanel(backingList, selectedModule, selectedModule::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        uiPartRule.setUiPart(moduleListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleListPanelHandle \u003d new ModuleListPanelHandle(getChildNode(moduleListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                ModuleListPanelHandle.MODULE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 47,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addModule(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 2,
      "lycjackie": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertCardEquals(ModuleCardHandle expectedCard, ModuleCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCard.getCode(), actualCard.getCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCard.getCredits(), actualCard.getCredits());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedCard.getCorequisites(), actualCard.getCorequisites());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedModule}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertCardDisplaysModule(Module expectedModule, ModuleCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedModule.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedModule.getCredits().value, actualCard.getCredits());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedModule.getCode().value, actualCard.getCode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedModule.getTags().stream().map(tag -\u003e tag.tagName).sorted().collect(Collectors.toList()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that the list in {@code moduleListPanelHandle} displays the details of {@code modules} correctly and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertListMatching(ModuleListPanelHandle moduleListPanelHandle, Module... modules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            moduleListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "            assertCardDisplaysModule(modules[i], moduleListPanelHandle.getModuleCardHandle(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that the list in {@code moduleListPanelHandle} displays the details of {@code modules} correctly and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertListMatching(ModuleListPanelHandle moduleListPanelHandle, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertListMatching(moduleListPanelHandle, modules.toArray(new Module[0]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts the size of the list in {@code moduleListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void assertListSize(ModuleListPanelHandle moduleListPanelHandle, int size) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        int numberOfModules \u003d moduleListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(size, numberOfModules);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 25,
      "-": 48
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDITS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CARL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.HOON;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.IDA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a module without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module toAdd \u003d AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + CREDITS_DESC_AMY"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + \"   \" + CODE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a module with all fields same as another module in the address book except name -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        toAdd \u003d new ModuleBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d ModuleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, toAdd.getCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a module with all fields same as another module in the address book except credits -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        toAdd \u003d new ModuleBuilder(AMY).withCredits(VALID_CREDITS_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d ModuleUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, toAdd.getCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteAllModules();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a module with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + CREDITS_DESC_BOB + CODE_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a module, missing tags -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filters the module list before adding -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* ------------------------ Perform add operation while a module card is selected --------------------------- */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: selects first card in the module list, add a module -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectModule(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a duplicate module -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d ModuleUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, HOON.getCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: add a duplicate module except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d ModuleUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(AddCommand.MESSAGE_DUPLICATE_MODULE, HOON.getCode());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + CREDITS_DESC_AMY + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: missing credits -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: missing code -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d \"adds \" + ModuleUtil.getModuleDetails(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + CREDITS_DESC_AMY + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: invalid credits -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_CREDITS_DESC + CODE_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: invalid code -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CREDITS_DESC_AMY + INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CREDITS_DESC_AMY + CODE_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. {@code Storage} and {@code ModuleListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void assertCommandSuccess(Module toAdd) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(ModuleUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Module)}. Executes {@code command}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Module)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void assertCommandSuccess(String command, Module toAdd) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.addModule(toAdd);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Module)} except asserts that"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 2. {@code Storage} and {@code ModuleListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Module)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. {@code Storage} and {@code ModuleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 82,
      "-": 139
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "import static seedu.address.testutil.TypicalDegreePlanners.getTypicalDegreePlannerList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRequirementCategories.getTypicalRequirementCategoriesList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import guitests.guihandles.ModuleListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chyeo"
        },
        "content": "import seedu.address.storage.JsonSerializableAddressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        testApp \u003d setupHelper"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                .setupApplication(this::getInitialData, getModuleListFileLocation(), getDegreePlannerListFileLocation(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                        getRequirementCategoryListFileLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getModuleListFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            addressBook \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new JsonSerializableAddressBook(getTypicalModuleList(), getTypicalDegreePlannerList(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            getTypicalRequirementCategoriesList())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chyeo"
        },
        "content": "                            .toModelType();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path getModuleListFileLocation() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_MODULE_LIST_TESTING;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    protected Path getDegreePlannerListFileLocation() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_DEGREE_PLANNER_LIST_TESTING;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path getRequirementCategoryListFileLocation() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_REQUIREMENT_CATEGORY_LIST_TESTING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public ModuleListPanelHandle getModuleListPanel() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return mainWindowHandle.getModuleListPanel();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Displays all modules in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    protected void showAllModules() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(getModel().getAddressBook().getModuleList().size(), getModel().getFilteredModuleList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Displays all modules with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    protected void showModulesWithName(String keyword) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(getModel().getFilteredModuleList().size() \u003c getModel().getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Selects the module at {@code index} of the displayed list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    protected void selectModule(Index index) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(index.getZeroBased(), getModuleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Deletes all modules in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    protected void deleteAllModules() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same module objects as {@code expectedModel}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * and the module list panel displays the modules in the model correctly."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertListMatching(getModuleListPanel(), expectedModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code ModuleListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        getModuleListPanel().rememberSelectedModuleCard();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(getModuleListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the module in the module list panel at"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see ModuleListPanelHandle#isSelectedModuleCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        getModuleListPanel().navigateToCard(getModuleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String selectedCardName \u003d getModuleListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getModuleListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the module list panel remain unchanged."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see ModuleListPanelHandle#isSelectedModuleCardChanged()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(getModuleListPanel().isSelectedModuleCardChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertListMatching(getModuleListPanel(), getModel().getFilteredModuleList());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertEquals(Paths.get(\"\").toAbsolutePath().relativize(testApp.getStorageSaveLocation().toAbsolutePath())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        .toString(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 9,
      "Creastery": 30,
      "chyeo": 24,
      "lycjackie": 2,
      "-": 249
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.util.InitialDataUtil.getInitialAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getInitialAddressBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: selects first card in module list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectModule(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filters the module list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getInitialAddressBook());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 10,
      "-": 94
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TestUtil.getModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: delete the first module in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_MODULE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module deletedModule \u003d removeModule(expectedModel, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MODULE_SUCCESS, deletedModule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: delete the last module in the list -\u003e deleted */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index lastModuleIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(lastModuleIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: undo deleting the last module in the list -\u003e last module restored */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: redo deleting the last module in the list -\u003e last module deleted again */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        removeModule(modelBeforeDeletingLast, lastModuleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: delete the middle module in the list -\u003e deleted */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index middleModuleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(middleModuleIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, delete index within bounds of address book and module list -\u003e deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        // TODO: revisit this unit test due to a strange bug with Travis CI. Where assertion returned false at line 65"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredModuleList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, delete index within bounds of address book but out of bounds of module list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getModuleList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* --------------------- Performing delete operation while a module card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: delete the selected module -\u003e module list panel selects the module before the deleted module */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showAllModules();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectModule(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deletedModule \u003d removeModule(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_MODULE_SUCCESS, deletedModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                getModel().getAddressBook().getModuleList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Removes the {@code Module} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @return the removed module"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private Module removeModule(Model model, Index index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module targetModule \u003d getModule(model, index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.deleteModule(targetModule);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return targetModule;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Deletes the module at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module deletedModule \u003d removeModule(expectedModel, toDelete);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MODULE_SUCCESS, deletedModule);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 45,
      "chyeo": 8,
      "-": 148
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDITS_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CREDITS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Credits;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CREDITS_DESC_BOB + \" \" + CODE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, index, editedModule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: undo editing the last module in the list -\u003e last module restored */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: redo editing the last module in the list -\u003e last module edited again */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.editModule(getModel().getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased()), editedModule);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: edit a module with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: edit a module with new values same as another module\u0027s values but with different name -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(getModel().getAddressBook().getModuleList().contains(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertNotEquals(getModel().getFilteredModuleList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module moduleToEdit \u003d getModel().getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(), VALID_CODE_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: edit a module with new values same as another module\u0027s values but with different credits -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CREDITS_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleToEdit \u003d getModel().getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(), VALID_CODE_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleToEdit \u003d getModel().getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedModule \u003d new ModuleBuilder(moduleToEdit).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, index, editedModule);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, edit index within bounds of address book and module list -\u003e edited */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredModuleList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleToEdit \u003d getModel().getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        editedModule \u003d new ModuleBuilder(moduleToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, index, editedModule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, edit index within bounds of address book but out of bounds of module list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getModuleList().size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* --------------------- Performing edit operation while a module card is selected -------------------------- */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: selects first card in the module list, edit a module -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showAllModules();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectModule(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + CREDITS_DESC_AMY"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        // browser\u0027s url is updated to reflect the new module\u0027s name"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredModuleList().size() + 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: invalid credits -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased() + INVALID_CREDITS_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: invalid code -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased() + INVALID_CODE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: edit a module with new values same as another module\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        executeCommand(ModuleUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(getModel().getAddressBook().getModuleList().contains(BOB));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        index \u003d INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(getModel().getFilteredModuleList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        moduleToEdit \u003d getModel().getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(), VALID_CODE_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: edit a module with new values same as another module\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CREDITS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                + CODE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_DUPLICATE_MODULE, moduleToEdit.getCode(), VALID_CODE_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Module, Index)} except that"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Module, Index)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Module editedModule) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedModule, null);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the module at index {@code toEdit} being"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * updated to values specified {@code editedModule}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Module editedModule,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module originalModule \u003d expectedModel.getFilteredModuleList().get(toEdit.getZeroBased());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                EditCommand.MESSAGE_EDIT_MODULE_SUCCESS, originalModule.getCode(), editedModule"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.editModule(expectedModel.getFilteredModuleList().get(toEdit.getZeroBased()), editedModule);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedMessage, expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        expectedModel.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 117,
      "-": 170
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_AND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_LEFT_BRACKET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_OR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.OPERATOR_RIGHT_BRACKET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CARL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DANIEL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find multiple modules in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * -\u003e 2 modules found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: repeat previous find command where module list is displaying the modules we are finding"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * -\u003e 2 modules found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module where module list is not displaying the module we are finding -\u003e 1 module found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Carl\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find multiple modules in address book, 2 keywords -\u003e 2 modules found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Benson \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Daniel\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find multiple modules in address book, 2 keywords in reversed order -\u003e 2 modules found */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Benson\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find multiple modules in address book, 2 keywords with 1 repeat -\u003e 2 modules found */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Benson \" + OPERATOR_OR + \" \" + PREFIX_NAME + \"Daniel\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find multiple modules in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Creastery"
        },
        "content": "         * -\u003e 2 modules found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Benson \" + OPERATOR_OR + \" \" + PREFIX_NAME + \"NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find same modules in address book after deleting 1 of them -\u003e 1 module found */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(getModel().getAddressBook().getModuleList().contains(BENSON));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module in address book, keyword is same as name but of different case -\u003e 1 module found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"MeIeR\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module in address book, keyword is substring of name -\u003e 0 modules found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Mei\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module in address book, name is substring of keyword -\u003e 0 modules found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Meiers\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module not in address book -\u003e 0 modules found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Mark\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find credits of module in address book -\u003e 0 modules found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + DANIEL.getCredits().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find credits of module in address book with PREFIX_CREDITS -\u003e 1 modules found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CREDITS + DANIEL.getCredits().value;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find credits of module not in address book with PREFIX_CREDITS -\u003e 0 modules found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CREDITS + \"963\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find module in address book, credits is substring of keyword -\u003e 0 modules found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CREDITS + \"999\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find code of module in address book -\u003e 0 modules found */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + DANIEL.getCode().value;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // TODO: Update the test case again after proper attribute is given in TypicalModules"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find code of module in address book with correct PREFIX -\u003e 1 module found */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + DANIEL.getCode().value;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find non-existent module in address book with PREFIX_CODE -\u003e 0 modules found */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"AAA1234Z\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find module in address book, code is substring of keyword -\u003e 0 modules found */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"FS4205\"; // valid partial code derived from IFS4205"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find tags of module in address book -\u003e 0 modules found */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + tags.get(0).tagName;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find while a module is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showAllModules();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        selectModule(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertFalse(getModuleListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module in empty address book -\u003e 0 modules found */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteAllModules();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d \"FiNd \" + PREFIX_NAME + \"Meier\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void multiFind() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find module with name daniel, code \u0027CS1231\u0027 and credits \u00272\u0027-\u003e 3 modules return */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \" + PREFIX_CODE + \"CS1231 \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        + OPERATOR_OR + \" \" + PREFIX_CREDITS + \"2\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, CARL);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find module with name, code and credits in different order -\u003e 3 modules return */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"CS1231 \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CREDITS + \"2 \" + OPERATOR_OR + \" \" + PREFIX_NAME + \"Daniel \";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: find module with name daniel, credits \u002795352563\u0027 and invalid code -\u003e 2 modules return */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"AZ0000 \" + OPERATOR_OR + \" \" + PREFIX_CREDITS + \"2\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, CARL);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module with valid name, code and non-existent credits -\u003e 2 modules return */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"CS1231 \" + OPERATOR_OR + \" \" + PREFIX_CREDITS + \"968\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module with valid name but non-existent code and credits -\u003e 1 modules return */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"FAS1234 \" + OPERATOR_OR + \" \" + PREFIX_CREDITS + \"999\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: find module with non-existent name, code and credits -\u003e 0 modules return */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Programmmmming \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_CODE + \"FAS1234 \" + OPERATOR_OR + \" \" + PREFIX_CREDITS + \"999\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void multiBooleanAndFind() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: Find module name which contain both Daniel and Meier -\u003e Return exactly 1 module"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "          e.g. find ( name/Daniel \u0026\u0026 name/Meier )"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" ( \" + PREFIX_NAME + \"Daniel \" + OPERATOR_AND + \" \""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Meier )\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: Find module name which contain both Daniel and Meier -\u003e Return exactly 1 module"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "          e.g. find name/Daniel \u0026\u0026 name/Meier"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Daniel \" + OPERATOR_AND + \" \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + PREFIX_NAME + \"Meier\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: Find module code which contain CS1231 and CS2100 -\u003e Return exactly 0 module */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"CS2100 \" + OPERATOR_AND + \" \" + PREFIX_CODE"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + \"CS1231\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /* Case: Find module credits that are 4 and 0 -\u003e Return exactly 0 module */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_CREDITS + \"4 \" + OPERATOR_AND + \" \" + PREFIX_CREDITS"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                + \"0\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void complexMultiFind() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        /*  find code/CS2102 || ( name/Daniel \u0026\u0026 name/Meier )  -\u003e Return 2 modules */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_CODE + \"CS2040C\" + \" \" + OPERATOR_OR + \" \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        + OPERATOR_LEFT_BRACKET + PREFIX_NAME + \"Daniel \" + OPERATOR_AND + \" \""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "                        + PREFIX_NAME + \"Meier \" + OPERATOR_RIGHT_BRACKET;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL, CARL);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    public void negativeTest() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // invalid operator"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" name/Programming !! code/CS1231\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandFailure(command, String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // invalid operator"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" name/Programming ## code/CS1231\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandFailure(command, String.format(FindCommand.MESSAGE_INVALID_EXPRESSION, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // valid + invalid prefix"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" name/Programming \" + OPERATOR_OR + \" nonExisting/CS1231\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // single invalid prefix"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" nonExisting/CS1231\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        // single invalid prefix with multiple white space"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \"                          nonExisting/CS1231                \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lycjackie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lycjackie"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * box displays {@code Messages#MESSAGE_MODULES_LISTED_OVERVIEW} with the number of modules in the filtered list,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                MESSAGE_MODULES_LISTED_OVERVIEW, expectedModel.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 41,
      "lycjackie": 156,
      "-": 152
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        getModuleListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertListMatching(getModuleListPanel(), getModel().getFilteredModuleList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 5,
      "-": 98
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static final Predicate\u003cModule\u003e PREDICATE_MATCHING_NO_MODULES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cModule\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Optional\u003cPredicate\u003cModule\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        model.updateFilteredModuleList(predicate.orElse(PREDICATE_MATCHING_NO_MODULES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    public static void setFilteredList(Model model, Module... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Module} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Creastery"
        },
        "content": "    private static Predicate\u003cModule\u003e getPredicateMatching(Module other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        return module -\u003e module.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path getModuleListFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeModuleListFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chyeo"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    protected Path getDegreePlannerListFileLocation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path filePath \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                TestUtil.getFilePathInSandboxFolder(\"SomeDegreePlannerListFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    protected Path getRequirementCategoryListFileLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "        Path filePath \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                TestUtil.getFilePathInSandboxFolder(\"SomeRequirementCategoryFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Module[] expectedList \u003d SampleDataUtil.getSampleModules();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertListMatching(getModuleListPanel(), expectedList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 3,
      "truegitnovice": 17,
      "chyeo": 7,
      "-": 46
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_MODULE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Creastery"
        },
        "content": "import static seedu.address.testutil.TypicalModules.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: select the first card in the module list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: select the last card in the module list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        Index moduleCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + moduleCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandSuccess(command, moduleCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: select the middle card in the module list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, select index within bounds of address book but out of bounds of module list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        showModulesWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getModuleList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        /* Case: filtered module list, select index within bounds of address book and module list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredModuleList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredModuleList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        deleteAllModules();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected module.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. {@code Storage} and {@code ModuleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Creastery"
        },
        "content": "                MESSAGE_SELECT_MODULE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Creastery"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getModuleListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Creastery"
        },
        "content": "     * 4. {@code Storage} and {@code ModuleListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Creastery": 28,
      "-": 126
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chyeo"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveModuleListFileLocation,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "            Path saveDegreePlannerListFileLocation, Path saveRequirementCategoryListFileLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chyeo"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                    new TestApp(addressBook, saveModuleListFileLocation, saveDegreePlannerListFileLocation,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "truegitnovice"
        },
        "content": "                            saveRequirementCategoryListFileLocation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "truegitnovice": 3,
      "chyeo": 2,
      "-": 72
    }
  }
]
